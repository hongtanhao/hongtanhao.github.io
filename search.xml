<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vue 进阶系列vue-router</title>
      <link href="/2019/10/24/vue%E8%BF%9B%E9%98%B6%E7%B3%BB%E5%88%97%E4%B9%8Bvue-router/"/>
      <url>/2019/10/24/vue%E8%BF%9B%E9%98%B6%E7%B3%BB%E5%88%97%E4%B9%8Bvue-router/</url>
      
        <content type="html"><![CDATA[<p>vue 进阶系列vue-router</p><a id="more"></a><h2 id="使用todolist-来深入vue-router"><a href="#使用todolist-来深入vue-router" class="headerlink" title="使用todolist 来深入vue-router"></a>使用todolist 来深入vue-router</h2><ul><li>本示例可以直接copy， 在有网络的情况下查看效果</li><li>和往常一样，注释部分则为新知识点，请认真阅读</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span> vue 进阶系列之全局 API 的使用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.todo-list</span> &#123;</span></span><br><span class="line">      margin: 100px auto;</span><br><span class="line">      width: 600px;</span><br><span class="line">      text-align: center;</span><br><span class="line">      font-family: '微软雅黑';</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.display-item</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line">      text-align: left;</span><br><span class="line">      padding-left: 1rem;</span><br><span class="line"><span class="css">      <span class="selector-tag">color</span>: <span class="selector-id">#bbbbbb</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.input-todo-item</span>&gt;<span class="selector-tag">input</span> &#123;</span></span><br><span class="line">      width: 300px;</span><br><span class="line">      height: 35px;</span><br><span class="line"><span class="css">      <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#bbb</span>;</span></span><br><span class="line">      border-radius: 4px;</span><br><span class="line">      padding: 0 1rem;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.input-todo-item</span>&gt;<span class="selector-tag">input</span><span class="selector-pseudo">:focus</span> &#123;</span></span><br><span class="line">      border-radius: 4px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.input-todo-item</span>&gt;<span class="selector-tag">button</span> &#123;</span></span><br><span class="line">      line-height: 35px;</span><br><span class="line"><span class="css">      <span class="selector-tag">color</span>: <span class="selector-id">#ffffff</span>;</span></span><br><span class="line">      background-color: red;</span><br><span class="line">      outline: none;</span><br><span class="line"><span class="css">      <span class="selector-tag">opacity</span>: <span class="selector-class">.6</span>;</span></span><br><span class="line">      border-radius: 4px;</span><br><span class="line">      border: none;</span><br><span class="line">      padding: 0 1rem;</span><br><span class="line">      cursor: pointer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.input-todo-item</span>&gt;<span class="selector-tag">button</span><span class="selector-pseudo">:hover</span>, <span class="selector-class">.router-link</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line">      opacity: 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.router-link</span> &#123;</span></span><br><span class="line">      display: inline-block;</span><br><span class="line"><span class="css">      <span class="selector-tag">color</span>: <span class="selector-id">#ffffff</span>;</span></span><br><span class="line">      background-color: green;</span><br><span class="line"><span class="css">      <span class="selector-tag">opacity</span>: <span class="selector-class">.6</span>;</span></span><br><span class="line">      border-radius: 4px;</span><br><span class="line"><span class="css">      <span class="selector-tag">padding</span>: <span class="selector-class">.5rem</span> 1<span class="selector-tag">rem</span>;</span></span><br><span class="line">      cursor: pointer;</span><br><span class="line">      text-decoration: none;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.disableBtn</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background-color</span>: <span class="selector-id">#bbb</span> !<span class="selector-tag">important</span>;</span></span><br><span class="line">      opacity: 1 !important;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.samll-widget</span> &#123;</span></span><br><span class="line">      display: inline-block;</span><br><span class="line">      height: 20px;</span><br><span class="line"><span class="css">      <span class="selector-tag">padding</span>: 0<span class="selector-class">.2rem</span> <span class="selector-class">.5rem</span>;</span></span><br><span class="line">      line-height: 20px;</span><br><span class="line">      text-align: center;</span><br><span class="line"><span class="css">      <span class="selector-tag">color</span>: <span class="selector-id">#ffffff</span>;</span></span><br><span class="line">      transition: all 1s;</span><br><span class="line">      border-radius: 2px;</span><br><span class="line">      margin-left: 1rem;</span><br><span class="line"><span class="css">      <span class="selector-tag">opacity</span>: <span class="selector-class">.5</span>;</span></span><br><span class="line">      cursor: pointer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.samll-widget</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line">      opacity: 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.fade-enter-active</span>, <span class="selector-class">.fade-leave-active</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">transition</span>: <span class="selector-tag">opacity</span> <span class="selector-class">.5s</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.fade-enter</span>, <span class="selector-class">.fade-leave-to</span> <span class="comment">/* .fade-leave-active below version 2.1.8 */</span> &#123;</span></span><br><span class="line">      opacity: 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"mount-point"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue-router/dist/vue-router.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> inputTpl =</span></span><br><span class="line"><span class="handlebars"><span class="xml">          `<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-todo-item"</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-focus</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"inputValue"</span>/&gt;</span></span></span></span><br><span class="line">            &lt;button</span><br><span class="line"><span class="actionscript">              ref=<span class="string">"addbtn"</span> </span></span><br><span class="line"><span class="actionscript">              @click=<span class="string">"addClick"</span> </span></span><br><span class="line"><span class="actionscript">              :disabled=<span class="string">"disableAddBtn"</span></span></span><br><span class="line"><span class="javascript">              :<span class="class"><span class="keyword">class</span></span>=<span class="string">"&#123;disableBtn: disableAddBtn&#125;"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">              </span><span class="template-variable">&#123;&#123; add | capitalize&#125;&#125;</span><span class="xml"></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">          `</span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> disTpl =</span></span><br><span class="line"><span class="handlebars"><span class="xml">          `<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"display-item"</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line">              &lt;li </span><br><span class="line"><span class="actionscript">                v-<span class="keyword">for</span>=<span class="string">"(item, index) in disList"</span></span></span><br><span class="line"><span class="actionscript">                :key=<span class="string">"index"</span></span></span><br><span class="line"><span class="actionscript">                :style=<span class="string">"&#123;textDecorationLine: item.isCompleted ? 'line-through' : 'none'&#125;"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">                </span><span class="template-variable">&#123;&#123;item.text&#125;&#125;</span><span class="xml"></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">small-widget</span> <span class="attr">type</span>=<span class="string">"delete"</span> <span class="attr">index</span>=<span class="string">"index"</span> @<span class="attr">onClickWidget</span>=<span class="string">"deleteItem(index)"</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:widget</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;/<span class="name">small-widget</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">small-widget</span> <span class="attr">type</span>=<span class="string">"finished"</span> <span class="attr">index</span>=<span class="string">"index"</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:widget</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">style</span>=<span class="string">"color: #fff"</span> <span class="attr">:to</span>=<span class="string">"&#123;name: 'edit', params: &#123;&#125;&#125;"</span>&gt;</span>edit<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;/<span class="name">small-widget</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">small-widget</span> <span class="attr">type</span>=<span class="string">"link"</span> <span class="attr">index</span>=<span class="string">"index"</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:widget</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">style</span>=<span class="string">"color: #fff"</span> <span class="attr">:to</span>=<span class="string">"&#123;path: '/detail/' + item.id, params: &#123;&#125;&#125;"</span>&gt;</span>view<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;/<span class="name">small-widget</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">              <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> tpl =</span></span><br><span class="line"><span class="handlebars"><span class="xml">          `<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"todo-list"</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">input-item</span> @<span class="attr">onAddItem</span>=<span class="string">"addItemToList"</span>/&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">display-item</span> <span class="attr">:disList</span>=<span class="string">"todoLists"</span>/&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        const widget = Vue.compile(`<span class="tag">&lt;<span class="name">span</span> <span class="attr">ref</span>=<span class="string">"small-widget"</span> <span class="attr">class</span>=<span class="string">"samll-widget"</span> @<span class="attr">click</span>=<span class="string">"handleClick"</span>&gt;</span><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"widget"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>`)</span></span></span><br><span class="line"><span class="actionscript">        Vue.component(<span class="string">'small-widget'</span>, &#123;</span></span><br><span class="line">          props: &#123;</span><br><span class="line">            type: &#123;</span><br><span class="line"><span class="javascript">              type: <span class="built_in">String</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            index: &#123;</span><br><span class="line"><span class="javascript">              type: <span class="built_in">String</span></span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          computed: &#123;</span><br><span class="line">            color () &#123;</span><br><span class="line"><span class="actionscript">              <span class="keyword">if</span> (<span class="keyword">this</span>.type === <span class="string">'delete'</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> <span class="string">'red'</span></span></span><br><span class="line"><span class="actionscript">              &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.type === <span class="string">'remind'</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> <span class="string">'yellow'</span></span></span><br><span class="line"><span class="actionscript">              &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.type === <span class="string">'link'</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> <span class="string">'blue'</span></span></span><br><span class="line"><span class="actionscript">              &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> <span class="string">'green'</span></span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          mounted () &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.$refs[<span class="string">'small-widget'</span>].style.backgroundColor = <span class="keyword">this</span>.color</span></span><br><span class="line">          &#125;,</span><br><span class="line">          methods: &#123;</span><br><span class="line">            handleClick () &#123;</span><br><span class="line"><span class="actionscript">              <span class="keyword">this</span>.$emit(<span class="string">'onClickWidget'</span>)</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          render: widget.render</span><br><span class="line">        &#125;)  </span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> DisplayItem = Vue.extend(&#123;</span></span><br><span class="line">          template: disTpl,</span><br><span class="line">          props: &#123;</span><br><span class="line">            disList: &#123;</span><br><span class="line"><span class="javascript">              type: <span class="built_in">Array</span></span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          methods: &#123;</span><br><span class="line">            deleteItem(index) &#123;</span><br><span class="line"><span class="actionscript">              <span class="keyword">this</span>.$emit(<span class="string">'onDeleteItem'</span>, index)</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">   </span><br><span class="line"><span class="actionscript">        Vue.component(<span class="string">'display-item'</span>, DisplayItem)</span></span><br><span class="line"><span class="actionscript">        Vue.component(<span class="string">'display-item-detail'</span>, &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">          template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;params&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                      <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line">          computed: &#123;</span><br><span class="line">            params () &#123;</span><br><span class="line"><span class="actionscript">              <span class="keyword">return</span> <span class="keyword">this</span>.$route.params</span></span><br><span class="line">            &#125; </span><br><span class="line">          &#125;,</span><br><span class="line">          mounted () &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'params'</span>, <span class="keyword">this</span>.params)</span></span><br><span class="line">          &#125;,</span><br><span class="line">          watch: &#123;</span><br><span class="line"><span class="javascript">            <span class="string">'$route'</span> (to, <span class="keyword">from</span>) &#123;</span></span><br><span class="line"><span class="actionscript">              <span class="comment">// ...</span></span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line"><span class="actionscript">          <span class="comment">// 组件内的守卫</span></span></span><br><span class="line"><span class="vbscript">          beforeRouteUpdate (<span class="keyword">to</span>, from, <span class="keyword">next</span>) &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// react to route changes...</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// don't forget to call next()</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.name = to.params.name</span></span><br><span class="line"><span class="vbscript">            <span class="keyword">next</span>()</span></span><br><span class="line">          &#125;,</span><br><span class="line"><span class="vbscript">          beforeRouteEnter (<span class="keyword">to</span>, from, <span class="keyword">next</span>) &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 在导航完成前获取数据</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// getPost(to.params.id, (err, post) =&gt; &#123;</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//   next(vm =&gt; vm.setData(err, post))</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// &#125;)</span></span></span><br><span class="line">          &#125;,</span><br><span class="line"><span class="vbscript">          beforeRouteLeave (<span class="keyword">to</span>, from, <span class="keyword">next</span>) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> answer = <span class="built_in">window</span>.confirm(<span class="string">'Do you really leave?'</span>)</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span> (answer) &#123;</span></span><br><span class="line"><span class="vbscript">              <span class="keyword">next</span>()</span></span><br><span class="line"><span class="actionscript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">              <span class="literal">false</span></span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="actionscript">        <span class="comment">// 使用模板选项创建组件</span></span></span><br><span class="line"><span class="actionscript">        Vue.component(<span class="string">'input-item'</span>, &#123;</span></span><br><span class="line">          template: inputTpl,</span><br><span class="line">          data() &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">              inputValue: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">              add: <span class="string">'add'</span></span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          computed: &#123;</span><br><span class="line">            disableAddBtn() &#123;</span><br><span class="line"><span class="actionscript">              <span class="keyword">return</span> !<span class="keyword">this</span>.inputValue</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          methods: &#123;</span><br><span class="line">            addClick() &#123;</span><br><span class="line"><span class="javascript">              <span class="built_in">console</span>.log(<span class="keyword">this</span>.disableAddBtn)</span></span><br><span class="line"><span class="actionscript">              <span class="keyword">if</span> (<span class="keyword">this</span>.disableAddBtn) <span class="keyword">return</span></span></span><br><span class="line"><span class="actionscript">              <span class="keyword">this</span>.$emit(<span class="string">'onAddItem'</span>, <span class="keyword">this</span>.inputValue) <span class="comment">// 实例方法/事件</span></span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="actionscript">        <span class="comment">// 使用render函数创建组件</span></span></span><br><span class="line"><span class="actionscript">        Vue.component(<span class="string">'todo-list'</span>, &#123;</span></span><br><span class="line">          data() &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line">              todoLists: [</span><br><span class="line">                &#123;</span><br><span class="line"><span class="actionscript">                  text: <span class="string">'这个周末去song'</span></span></span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          methods: &#123;</span><br><span class="line">            deleteItemFromList (index) &#123;</span><br><span class="line"><span class="actionscript">              <span class="keyword">this</span>.todoLists.splice(index, <span class="number">1</span>)</span></span><br><span class="line">            &#125;,</span><br><span class="line">            addItemToList (value) &#123;</span><br><span class="line"><span class="actionscript">              <span class="keyword">this</span>.todoLists.push(&#123;</span></span><br><span class="line"><span class="actionscript">                isCompleted: <span class="literal">false</span>,</span></span><br><span class="line">                text: value</span><br><span class="line">              &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line"><span class="actionscript">          render: <span class="function"><span class="keyword">function</span> <span class="params">(createElement)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> createElement(<span class="string">'div'</span>, &#123;<span class="string">'class'</span>: &#123;<span class="string">'todo-list'</span>: <span class="literal">true</span>&#125;&#125;, [</span></span><br><span class="line"><span class="actionscript">              createElement(<span class="string">'input-item'</span>, &#123;</span></span><br><span class="line"><span class="vbscript">                <span class="keyword">on</span>: &#123;</span></span><br><span class="line"><span class="actionscript">                  onAddItem: <span class="keyword">this</span>.addItemToList</span></span><br><span class="line">                &#125;,</span><br><span class="line"><span class="actionscript">              &#125;, <span class="keyword">this</span>.$slots.default),</span></span><br><span class="line"><span class="actionscript">              createElement(<span class="string">'display-item'</span>, &#123;</span></span><br><span class="line">                props: &#123;</span><br><span class="line"><span class="actionscript">                  disList: <span class="keyword">this</span>.todoLists</span></span><br><span class="line">                &#125;,</span><br><span class="line"><span class="vbscript">                <span class="keyword">on</span>: &#123;</span></span><br><span class="line"><span class="actionscript">                  onDeleteItem: <span class="keyword">this</span>.deleteItemFromList</span></span><br><span class="line">                &#125;,</span><br><span class="line"><span class="actionscript">              &#125;, <span class="keyword">this</span>.$slots.default),</span></span><br><span class="line">            ])</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> routes = [</span></span><br><span class="line"><span class="actionscript">          &#123;path: <span class="string">'/'</span>, component: Vue.component(<span class="string">'todo-list'</span>)&#125;,</span></span><br><span class="line">          &#123;</span><br><span class="line"><span class="actionscript">            path: <span class="string">'/detail/:id'</span>,</span></span><br><span class="line"><span class="actionscript">            name: <span class="string">'detail'</span>,</span></span><br><span class="line"><span class="actionscript">            component: &#123;template: <span class="string">'&lt;display-item-detail/&gt;'</span>&#125;,</span></span><br><span class="line">            children: [</span><br><span class="line">              &#123;</span><br><span class="line"><span class="actionscript">                path:<span class="string">''</span>,</span></span><br><span class="line"><span class="handlebars"><span class="xml">                component: &#123;template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                                        <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><span class="template-variable">&#123;&#123;title&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                                        <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                                          <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in flows"</span>&gt;</span></span><span class="template-variable">&#123;&#123;item&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                                        <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                                      <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line">                           data () &#123;</span><br><span class="line"><span class="actionscript">                             <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">                               title: <span class="string">''</span>, </span></span><br><span class="line">                               flows: [</span><br><span class="line"><span class="actionscript">                                 <span class="string">'导航被触发'</span>,</span></span><br><span class="line"><span class="actionscript">                                 <span class="string">'在失活的组件里调用离开守卫'</span>,</span></span><br><span class="line"><span class="actionscript">                                 <span class="string">'调用全局的beforeEach守卫'</span>,</span></span><br><span class="line"><span class="actionscript">                                 <span class="string">'在重复的组件中调用beforRouteUpdate守卫'</span>,</span></span><br><span class="line"><span class="actionscript">                                 <span class="string">'在路由配置里调用beforeEnter'</span>,</span></span><br><span class="line"><span class="actionscript">                                 <span class="string">'解析异步路由组件'</span>,</span></span><br><span class="line"><span class="actionscript">                                 <span class="string">'在被激活的组件里调用beforeRouteEnter'</span>,</span></span><br><span class="line"><span class="actionscript">                                 <span class="string">'调用全局的beforeResolve守卫'</span>,</span></span><br><span class="line"><span class="actionscript">                                 <span class="string">'导航被确认'</span>,</span></span><br><span class="line"><span class="actionscript">                                 <span class="string">'调用全局的afterEach钩子'</span>,</span></span><br><span class="line"><span class="actionscript">                                 <span class="string">'触发dom更新'</span>,</span></span><br><span class="line"><span class="actionscript">                                 <span class="string">'用创建好的实例调用beforeRouteEnter守卫中传给next的回调函数'</span></span></span><br><span class="line">                               ]</span><br><span class="line">                             &#125;</span><br><span class="line">                           &#125;&#125;</span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line"><span class="actionscript">            path: <span class="string">'/edit'</span>,</span></span><br><span class="line"><span class="actionscript">            name: <span class="string">'edit'</span>,</span></span><br><span class="line"><span class="handlebars"><span class="xml">            component: &#123;template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                                    <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">"header"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                                    <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">"main"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                                    <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">"footer"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                                  <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`&#125;,</span></span></span><br><span class="line">            children: [</span><br><span class="line">              &#123;</span><br><span class="line"><span class="actionscript">                path: <span class="string">''</span>,</span></span><br><span class="line">                components: &#123;</span><br><span class="line"><span class="handlebars"><span class="xml">                  header: &#123;template: '<span class="tag">&lt;<span class="name">div</span>&gt;</span>header<span class="tag">&lt;/<span class="name">div</span>&gt;</span>'&#125;,</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                  main: &#123;template: '<span class="tag">&lt;<span class="name">div</span>&gt;</span>main<span class="tag">&lt;/<span class="name">div</span>&gt;</span>'&#125;,</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                  footer: &#123;template: '<span class="tag">&lt;<span class="name">div</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span>'&#125;</span></span></span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            ],</span><br><span class="line"><span class="actionscript">            <span class="comment">// 路由独享守卫</span></span></span><br><span class="line"><span class="javascript">            beforeEnter: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line"><span class="actionscript">          &#123;path: <span class="string">'*'</span>, component: &#123;template: <span class="string">'&lt;div&gt;你的页面丢失了&lt;/div&gt;'</span>&#125;&#125;,</span></span><br><span class="line">        ]</span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span></span><br><span class="line">          routes,</span><br><span class="line"><span class="actionscript">          <span class="comment">// 滚动行为</span></span></span><br><span class="line"><span class="javascript">          scrollBehavior (to, <span class="keyword">from</span>, savedPosition) &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 滚动到到顶部</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line">              x: 0,</span><br><span class="line">              y: 0</span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            <span class="comment">// 滚动到锚点</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// if (to.hash) &#123;</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//   return &#123;</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//     seletor: to.hash</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//   &#125;</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// &#125;</span></span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="actionscript">        <span class="comment">// 注册一个全局前置守卫</span></span></span><br><span class="line"><span class="javascript">        router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="vbscript">          console.<span class="built_in">log</span>(<span class="keyword">to</span>)</span></span><br><span class="line"><span class="vbscript">          <span class="keyword">next</span>()</span></span><br><span class="line">        &#125;)</span><br><span class="line"><span class="actionscript">        router.push(<span class="string">'/'</span>)</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> TodoList = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line">          router,</span><br><span class="line"><span class="actionscript">          render: <span class="function"><span class="keyword">function</span> <span class="params">(createElement)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> createElement(<span class="string">'transition'</span>, &#123;props: &#123;name: <span class="string">'fade'</span>, mode: <span class="string">'out-in'</span>&#125;&#125;, [</span></span><br><span class="line"><span class="actionscript">              createElement(<span class="string">'router-view'</span>)</span></span><br><span class="line">            ])</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        Vue.mixin(&#123;</span><br><span class="line"><span class="actionscript">          created: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> myOption = <span class="keyword">this</span>.$options.myOption</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'[myOption]'</span>, myOption)</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="actionscript">        Vue.directive(<span class="string">'focus'</span>, &#123;</span></span><br><span class="line">          inserted (el, binding, vNode) &#123;</span><br><span class="line">            el.focus()</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        Vue.use(&#123;</span><br><span class="line">          install(Vue) &#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> message = <span class="function">(<span class="params">context, options</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">              let res = Vue.compile('<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;options.text&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>')</span></span></span><br><span class="line"><span class="javascript">              <span class="keyword">let</span> Message = Vue.extend(&#123;</span></span><br><span class="line">                render: res.render</span><br><span class="line">              &#125;)</span><br><span class="line"><span class="actionscript">              <span class="keyword">new</span> Message().$mount(context)</span></span><br><span class="line">            &#125;</span><br><span class="line">            Vue.prototype.$message = message</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="actionscript">        Vue.filter(<span class="string">'capitalize'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(value)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">if</span> (!value) <span class="keyword">return</span> <span class="string">''</span></span></span><br><span class="line">          value = value.toString()</span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> value.charAt(<span class="number">0</span>).toUpperCase() + value.slice(<span class="number">1</span>)</span></span><br><span class="line">        &#125;)</span><br><span class="line"><span class="actionscript">        TodoList.$mount(<span class="string">'#mount-point'</span>)</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue 进阶系列之实例方法</title>
      <link href="/2019/10/23/vue%E8%BF%9B%E9%98%B6%E7%B3%BB%E5%88%97%E4%B9%8B%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95/"/>
      <url>/2019/10/23/vue%E8%BF%9B%E9%98%B6%E7%B3%BB%E5%88%97%E4%B9%8B%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>继<code>vue 进阶系列之指令后</code>，再写 vue 进阶系列之实例方法</p><a id="more"></a><ul><li>基于一个简单的TodoList来演示vue实例方法的使用</li><li>请仔细阅读注释处所涉及到的api的使用方法</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span> vue 进阶系列之全局 API 的使用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.todo-list</span> &#123;</span></span><br><span class="line">      margin: 100px auto;</span><br><span class="line">      width: 500px;</span><br><span class="line">      text-align: center;</span><br><span class="line">      font-family: '微软雅黑';</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.display-item</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line">      text-align: left;</span><br><span class="line">      padding-left: 1rem;</span><br><span class="line"><span class="css">      <span class="selector-tag">color</span>: <span class="selector-id">#bbbbbb</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.input-todoo-item</span>&gt;<span class="selector-tag">input</span> &#123;</span></span><br><span class="line">      width: 300px;</span><br><span class="line">      height: 35px;</span><br><span class="line"><span class="css">      <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#bbb</span>;</span></span><br><span class="line">      border-radius: 4px;</span><br><span class="line">      padding: 0 1rem;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.input-todoo-item</span>&gt;<span class="selector-tag">input</span><span class="selector-pseudo">:focus</span> &#123;</span></span><br><span class="line">      border-radius: 4px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.input-todoo-item</span>&gt;<span class="selector-tag">button</span> &#123;</span></span><br><span class="line">      line-height: 35px;</span><br><span class="line"><span class="css">      <span class="selector-tag">color</span>: <span class="selector-id">#ffffff</span>;</span></span><br><span class="line">      background-color: red;</span><br><span class="line">      outline: none;</span><br><span class="line"><span class="css">      <span class="selector-tag">opacity</span>: <span class="selector-class">.6</span>;</span></span><br><span class="line">      border-radius: 4px;</span><br><span class="line">      border: none;</span><br><span class="line">      padding: 0 1rem;</span><br><span class="line">      cursor: pointer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.input-todoo-item</span>&gt;<span class="selector-tag">button</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line">      opacity: 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.disableBtn</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background-color</span>: <span class="selector-id">#bbb</span> !<span class="selector-tag">important</span>;</span></span><br><span class="line">      opacity: 1 !important;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.samll-widget</span> &#123;</span></span><br><span class="line">      display: inline-block;</span><br><span class="line">      height: 20px;</span><br><span class="line">      width: 30px;</span><br><span class="line">      line-height: 20px;</span><br><span class="line">      text-align: center;</span><br><span class="line"><span class="css">      <span class="selector-tag">color</span>: <span class="selector-id">#ffffff</span>;</span></span><br><span class="line">      transition: all 1s;</span><br><span class="line"><span class="css">      <span class="comment">/* border: 1px solid #eee; */</span></span></span><br><span class="line">      border-radius: 2px;</span><br><span class="line">      margin-left: 1rem;</span><br><span class="line"><span class="css">      <span class="selector-tag">opacity</span>: <span class="selector-class">.5</span>;</span></span><br><span class="line">      cursor: pointer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.samll-widget</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line">      opacity: 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"mount-point"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 定义 &lt;input-item/&gt;组件 html 片段</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> inputTpl =</span></span><br><span class="line"><span class="handlebars"><span class="xml">          `<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-todoo-item"</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-focus</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"inputValue"</span>/&gt;</span></span></span></span><br><span class="line">            &lt;button</span><br><span class="line"><span class="actionscript">              ref=<span class="string">"addbtn"</span></span></span><br><span class="line"><span class="actionscript">              @click=<span class="string">"addClick"</span></span></span><br><span class="line"><span class="actionscript">              :disabled=<span class="string">"disableAddBtn"</span></span></span><br><span class="line"><span class="javascript">              :<span class="class"><span class="keyword">class</span></span>=<span class="string">"&#123;disableBtn: disableAddBtn&#125;"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">              </span><span class="template-variable">&#123;&#123; add | capitalize&#125;&#125;</span><span class="xml"></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">          `</span><br><span class="line"><span class="actionscript">        <span class="comment">// 定义 &lt;display-item&gt;组件 html 片段</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> disTpl =</span></span><br><span class="line"><span class="handlebars"><span class="xml">          `<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"display-item"</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line">              &lt;li</span><br><span class="line"><span class="actionscript">                v-<span class="keyword">for</span>=<span class="string">"(item, index) in disList"</span></span></span><br><span class="line"><span class="actionscript">                :key=<span class="string">"index"</span></span></span><br><span class="line"><span class="actionscript">                :style=<span class="string">"&#123;textDecorationLine: item.isCompleted ? 'line-through' : 'none'&#125;"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">                </span><span class="template-variable">&#123;&#123;item.text&#125;&#125;</span><span class="xml"></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">small-widget</span> <span class="attr">type</span>=<span class="string">"delete"</span> <span class="attr">index</span>=<span class="string">"index"</span> @<span class="attr">onClickWidget</span>=<span class="string">"deleteItem(index)"</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:widget</span>&gt;</span>x<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;/<span class="name">small-widget</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">small-widget</span> <span class="attr">type</span>=<span class="string">"finished"</span> <span class="attr">index</span>=<span class="string">"index"</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:widget</span>&gt;</span>o<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;/<span class="name">small-widget</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">              <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 定义 TodoList html 片段</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> tpl =</span></span><br><span class="line"><span class="handlebars"><span class="xml">          `<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"todo-list"</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">input-item</span> @<span class="attr">onAddItem</span>=<span class="string">"addItemToList"</span>/&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">display-item</span> <span class="attr">:disList</span>=<span class="string">"todoLists"</span>/&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        const widget = Vue.compile(`<span class="tag">&lt;<span class="name">span</span> <span class="attr">ref</span>=<span class="string">"small-widget"</span> <span class="attr">class</span>=<span class="string">"samll-widget"</span> @<span class="attr">click</span>=<span class="string">"handleClick"</span>&gt;</span><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"widget"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>`)</span></span></span><br><span class="line"><span class="actionscript">        Vue.component(<span class="string">'small-widget'</span>, &#123;</span></span><br><span class="line">          props: &#123;</span><br><span class="line">            type: &#123;</span><br><span class="line"><span class="javascript">              type: <span class="built_in">String</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            index: &#123;</span><br><span class="line"><span class="javascript">              type: <span class="built_in">String</span></span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          computed: &#123;</span><br><span class="line">            color () &#123;</span><br><span class="line"><span class="actionscript">              <span class="keyword">if</span> (<span class="keyword">this</span>.type === <span class="string">'delete'</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> <span class="string">'red'</span></span></span><br><span class="line"><span class="actionscript">              &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.type === <span class="string">'remind'</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> <span class="string">'yellow'</span></span></span><br><span class="line"><span class="actionscript">              &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> <span class="string">'green'</span></span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          mounted () &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.$refs[<span class="string">'small-widget'</span>].style.backgroundColor = <span class="keyword">this</span>.color</span></span><br><span class="line">          &#125;,</span><br><span class="line">          methods: &#123;</span><br><span class="line">            handleClick () &#123;</span><br><span class="line">              /** instance API</span><br><span class="line">              * @vm.$emit(target, propertyName/index, value )</span><br><span class="line">              * 功能： 触发当前实例上的事件。附加参数都会传给监听器回调。</span><br><span class="line"><span class="vbscript">              * params: &#123;<span class="built_in">string</span>&#125; eventName [...args]</span></span><br><span class="line">              */</span><br><span class="line"><span class="actionscript">              <span class="keyword">this</span>.$emit(<span class="string">'onClickWidget'</span>)</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          render: widget.render</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> DisplayItem = Vue.extend(&#123;</span></span><br><span class="line">          template: disTpl,</span><br><span class="line">          props: &#123;</span><br><span class="line">            disList: &#123;</span><br><span class="line"><span class="javascript">              type: <span class="built_in">Array</span></span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          methods: &#123;</span><br><span class="line">            deleteItem(index) &#123;</span><br><span class="line"><span class="actionscript">              <span class="keyword">this</span>.$emit(<span class="string">'onDeleteItem'</span>, index)</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="actionscript">        <span class="comment">// 使用构造器创建组件</span></span></span><br><span class="line"><span class="actionscript">        Vue.component(<span class="string">'display-item'</span>, DisplayItem)</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 使用模板选项创建组件</span></span></span><br><span class="line"><span class="actionscript">        Vue.component(<span class="string">'input-item'</span>, &#123;</span></span><br><span class="line">          template: inputTpl,</span><br><span class="line">          data() &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">              inputValue: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">              add: <span class="string">'add'</span></span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          computed: &#123;</span><br><span class="line">            disableAddBtn() &#123;</span><br><span class="line"><span class="actionscript">              <span class="keyword">return</span> !<span class="keyword">this</span>.inputValue</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          methods: &#123;</span><br><span class="line">            addClick() &#123;</span><br><span class="line"><span class="javascript">              <span class="built_in">console</span>.log(<span class="keyword">this</span>.disableAddBtn)</span></span><br><span class="line"><span class="actionscript">              <span class="keyword">if</span> (<span class="keyword">this</span>.disableAddBtn) <span class="keyword">return</span></span></span><br><span class="line"><span class="actionscript">              <span class="keyword">this</span>.$emit(<span class="string">'onAddItem'</span>, <span class="keyword">this</span>.inputValue) <span class="comment">// 实例方法/事件</span></span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="actionscript">        <span class="comment">// 使用render函数创建组件</span></span></span><br><span class="line"><span class="actionscript">        Vue.component(<span class="string">'todo-list'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">          render: <span class="function"><span class="keyword">function</span> <span class="params">(createElement)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> createElement(<span class="string">'div'</span>, &#123;<span class="string">'class'</span>: &#123;<span class="string">'todo-list'</span>: <span class="literal">true</span>&#125;&#125;, [</span></span><br><span class="line"><span class="actionscript">              createElement(<span class="string">'input-item'</span>, &#123;</span></span><br><span class="line"><span class="vbscript">                <span class="keyword">on</span>: &#123;</span></span><br><span class="line"><span class="actionscript">                  onAddItem: <span class="keyword">this</span>.$parent.addItemToList</span></span><br><span class="line">                &#125;,</span><br><span class="line"><span class="actionscript">              &#125;, <span class="keyword">this</span>.$slots.default),</span></span><br><span class="line"><span class="actionscript">              createElement(<span class="string">'display-item'</span>, &#123;</span></span><br><span class="line">                props: &#123;</span><br><span class="line"><span class="actionscript">                  disList: <span class="keyword">this</span>.$parent.$data.todoLists</span></span><br><span class="line">                &#125;,</span><br><span class="line"><span class="vbscript">                <span class="keyword">on</span>: &#123;</span></span><br><span class="line"><span class="actionscript">                  onDeleteItem: <span class="keyword">this</span>.$parent.deleteItemFromList</span></span><br><span class="line">                &#125;,</span><br><span class="line"><span class="actionscript">              &#125;, <span class="keyword">this</span>.$slots.default),</span></span><br><span class="line">            ])</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> TodoList = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line">          props: &#123;</span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="javascript">              type: <span class="built_in">Object</span></span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          data() &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line">              todoLists: [</span><br><span class="line">                &#123;</span><br><span class="line"><span class="actionscript">                  text: <span class="string">'这个周末去song'</span></span></span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          methods: &#123;</span><br><span class="line">            deleteItemFromList (index) &#123;</span><br><span class="line"><span class="actionscript">              <span class="keyword">this</span>.todoLists.splice(index, <span class="number">1</span>)</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line"><span class="actionscript">          render: <span class="function"><span class="keyword">function</span> <span class="params">(createElement)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> createElement(<span class="string">'todo-list'</span>)</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        Vue.mixin(&#123;</span><br><span class="line"><span class="actionscript">          created: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> myOption = <span class="keyword">this</span>.$options.myOption</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'[myOption]'</span>, myOption)</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="actionscript">        Vue.directive(<span class="string">'focus'</span>, &#123;</span></span><br><span class="line">          inserted (el, binding, vNode) &#123;</span><br><span class="line">            el.focus()</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        Vue.use(&#123;</span><br><span class="line">          install(Vue) &#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> message = <span class="function">(<span class="params">context, options</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">              let res = Vue.compile('<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;options.text&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>')</span></span></span><br><span class="line"><span class="javascript">              <span class="keyword">let</span> Message = Vue.extend(&#123;</span></span><br><span class="line">                render: res.render</span><br><span class="line">              &#125;)</span><br><span class="line"><span class="actionscript">              <span class="keyword">new</span> Message().$mount(context)</span></span><br><span class="line">            &#125;</span><br><span class="line">            Vue.prototype.$message = message</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="actionscript">        Vue.filter(<span class="string">'capitalize'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(value)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">if</span> (!value) <span class="keyword">return</span> <span class="string">''</span></span></span><br><span class="line">          value = value.toString()</span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> value.charAt(<span class="number">0</span>).toUpperCase() + value.slice(<span class="number">1</span>)</span></span><br><span class="line">        &#125;)</span><br><span class="line"><span class="actionscript">        Vue.set(TodoList, <span class="string">'key'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">          text: <span class="string">'这个周末去song'</span></span></span><br><span class="line">        &#125;)</span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> list = TodoList.$data.todoLists</span></span><br><span class="line"><span class="javascript">        list = list.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">          TodoList.$<span class="keyword">set</span>(item, <span class="string">'isCompleted'</span>, <span class="literal">true</span>)</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> item</span></span><br><span class="line">        &#125;)</span><br><span class="line"><span class="javascript">        TodoList.addItemToList = <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span></span><br><span class="line">          list.push(&#123;</span><br><span class="line"><span class="actionscript">            isCompleted: <span class="literal">false</span>,</span></span><br><span class="line">            text: value</span><br><span class="line">          &#125;)</span><br><span class="line">          TodoList.$data.todoLists = list</span><br><span class="line">        &#125;</span><br><span class="line">        /** instance API</span><br><span class="line">        * @vm.$mount(target, propertyName/index, value )</span><br><span class="line">        * 功能： 将一个处在未挂载状态的组件挂载到dom树种</span><br><span class="line">        * params:  一个包含组件选项的对象。</span><br><span class="line">        */</span><br><span class="line"><span class="actionscript">        TodoList.$mount(<span class="string">'#mount-point'</span>)</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue 进阶系列之全局API</title>
      <link href="/2019/10/22/vue%E8%BF%9B%E9%98%B6%E7%B3%BB%E5%88%97%E4%B9%8B%E5%85%A8%E5%B1%80API/"/>
      <url>/2019/10/22/vue%E8%BF%9B%E9%98%B6%E7%B3%BB%E5%88%97%E4%B9%8B%E5%85%A8%E5%B1%80API/</url>
      
        <content type="html"><![CDATA[<p>继<code>vue 进阶系列之指令后</code>，再写 vue 进阶系列之全局 API</p><a id="more"></a><ul><li><code>基于一个简单的TodoList来演示全局API的使用, 在使用到全局API的地方会有注释标明</code></li><li><code>请仔细阅读注释处所涉及到的api的使用方法</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span> vue 进阶系列之全局 API 的使用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.todo-list</span> &#123;</span></span><br><span class="line">      margin: 100px auto;</span><br><span class="line">      width: 500px;</span><br><span class="line">      text-align: center;</span><br><span class="line">      font-family: '微软雅黑';</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.display-item</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line">      text-align: left;</span><br><span class="line">      padding-left: 1rem;</span><br><span class="line"><span class="css">      <span class="selector-tag">color</span>: <span class="selector-id">#bbbbbb</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.input-todo-item</span>&gt;<span class="selector-tag">input</span> &#123;</span></span><br><span class="line">      width: 300px;</span><br><span class="line">      height: 35px;</span><br><span class="line"><span class="css">      <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#bbb</span>;</span></span><br><span class="line">      border-radius: 4px;</span><br><span class="line">      padding: 0 1rem;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.input-todo-item</span>&gt;<span class="selector-tag">input</span><span class="selector-pseudo">:focus</span> &#123;</span></span><br><span class="line">      border-radius: 4px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.input-todo-item</span>&gt;<span class="selector-tag">button</span> &#123;</span></span><br><span class="line">      line-height: 35px;</span><br><span class="line"><span class="css">      <span class="selector-tag">color</span>: <span class="selector-id">#ffffff</span>;</span></span><br><span class="line">      background-color: red;</span><br><span class="line">      outline: none;</span><br><span class="line"><span class="css">      <span class="selector-tag">opacity</span>: <span class="selector-class">.6</span>;</span></span><br><span class="line">      border-radius: 4px;</span><br><span class="line">      border: none;</span><br><span class="line">      padding: 0 1rem;</span><br><span class="line">      cursor: pointer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.input-todo-item</span>&gt;<span class="selector-tag">button</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line">      opacity: 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.disableBtn</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background-color</span>: <span class="selector-id">#bbb</span> !<span class="selector-tag">important</span>;</span></span><br><span class="line">      opacity: 1 !important;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.samll-widget</span> &#123;</span></span><br><span class="line">      display: inline-block;</span><br><span class="line">      height: 20px;</span><br><span class="line">      width: 30px;</span><br><span class="line">      line-height: 20px;</span><br><span class="line">      text-align: center;</span><br><span class="line"><span class="css">      <span class="selector-tag">color</span>: <span class="selector-id">#ffffff</span>;</span></span><br><span class="line">      transition: all 1s;</span><br><span class="line"><span class="css">      <span class="comment">/* border: 1px solid #eee; */</span></span></span><br><span class="line">      border-radius: 2px;</span><br><span class="line">      margin-left: 1rem;</span><br><span class="line"><span class="css">      <span class="selector-tag">opacity</span>: <span class="selector-class">.5</span>;</span></span><br><span class="line">      cursor: pointer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.samll-widget</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line">      opacity: 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"mount-point"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 定义 &lt;input-item/&gt;组件 html 片段</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> inputTpl =</span></span><br><span class="line"><span class="handlebars"><span class="xml">          `<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-todo-item"</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-focus</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"inputValue"</span>/&gt;</span></span></span></span><br><span class="line">            &lt;button</span><br><span class="line"><span class="actionscript">              ref=<span class="string">"addbtn"</span></span></span><br><span class="line"><span class="actionscript">              @click=<span class="string">"addClick"</span></span></span><br><span class="line"><span class="actionscript">              :disabled=<span class="string">"disableAddBtn"</span></span></span><br><span class="line"><span class="javascript">              :<span class="class"><span class="keyword">class</span></span>=<span class="string">"&#123;disableBtn: disableAddBtn&#125;"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">              </span><span class="template-variable">&#123;&#123; add | capitalize&#125;&#125;</span><span class="xml"></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">          `</span><br><span class="line"><span class="actionscript">        <span class="comment">// 定义 &lt;display-item&gt;组件 html 片段</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> disTpl =</span></span><br><span class="line"><span class="handlebars"><span class="xml">          `<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"display-item"</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line">              &lt;li</span><br><span class="line"><span class="actionscript">                v-<span class="keyword">for</span>=<span class="string">"(item, index) in disList"</span></span></span><br><span class="line"><span class="actionscript">                :key=<span class="string">"index"</span></span></span><br><span class="line"><span class="actionscript">                :style=<span class="string">"&#123;textDecorationLine: item.isCompleted ? 'line-through' : 'none'&#125;"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">                </span><span class="template-variable">&#123;&#123;item.text&#125;&#125;</span><span class="xml"></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">small-widget</span> <span class="attr">type</span>=<span class="string">"delete"</span> <span class="attr">index</span>=<span class="string">"index"</span> @<span class="attr">onClickWidget</span>=<span class="string">"deleteItem(index)"</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:widget</span>&gt;</span>x<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;/<span class="name">small-widget</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">small-widget</span> <span class="attr">type</span>=<span class="string">"finished"</span> <span class="attr">index</span>=<span class="string">"index"</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:widget</span>&gt;</span>o<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;/<span class="name">small-widget</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">              <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 定义 TodoList html 片段</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> tpl =</span></span><br><span class="line"><span class="handlebars"><span class="xml">          `<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"todo-list"</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">input-item</span> @<span class="attr">onAddItem</span>=<span class="string">"addItemToList"</span>/&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">display-item</span> <span class="attr">:disList</span>=<span class="string">"todoLists"</span>/&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">        /** global API</span><br><span class="line">         * @Vue.compile(template)</span><br><span class="line">         * 功能： 在 render 函数中编译模板字符串</span><br><span class="line">         * params:</span><br><span class="line">         */</span><br><span class="line"><span class="handlebars"><span class="xml">        const widget = Vue.compile(`<span class="tag">&lt;<span class="name">span</span> <span class="attr">ref</span>=<span class="string">"small-widget"</span> <span class="attr">class</span>=<span class="string">"samll-widget"</span> @<span class="attr">click</span>=<span class="string">"handleClick"</span>&gt;</span><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"widget"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>`)</span></span></span><br><span class="line"><span class="actionscript">        Vue.component(<span class="string">'small-widget'</span>, &#123;</span></span><br><span class="line">          props: &#123;</span><br><span class="line">            type: &#123;</span><br><span class="line"><span class="javascript">              type: <span class="built_in">String</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            index: &#123;</span><br><span class="line"><span class="javascript">              type: <span class="built_in">String</span></span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          computed: &#123;</span><br><span class="line">            color () &#123;</span><br><span class="line"><span class="actionscript">              <span class="keyword">if</span> (<span class="keyword">this</span>.type === <span class="string">'delete'</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> <span class="string">'red'</span></span></span><br><span class="line"><span class="actionscript">              &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.type === <span class="string">'remind'</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> <span class="string">'yellow'</span></span></span><br><span class="line"><span class="actionscript">              &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> <span class="string">'green'</span></span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          mounted () &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.$refs[<span class="string">'small-widget'</span>].style.backgroundColor = <span class="keyword">this</span>.color</span></span><br><span class="line">          &#125;,</span><br><span class="line">          methods: &#123;</span><br><span class="line">            handleClick () &#123;</span><br><span class="line"><span class="actionscript">              <span class="keyword">this</span>.$emit(<span class="string">'onClickWidget'</span>)</span></span><br><span class="line"><span class="actionscript">              <span class="comment">// console.log('fsafasfsafsafa' ,this.$parent.$parent.$data)</span></span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          render: widget.render</span><br><span class="line">        &#125;)</span><br><span class="line">        /** global API</span><br><span class="line">         * @Vue.extend(options)</span><br><span class="line">         * 功能： 使用基础 Vue 构造器，创建一个“子类”</span><br><span class="line">         * params:  一个包含组件选项的对象。</span><br><span class="line">         */</span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> DisplayItem = Vue.extend(&#123;</span></span><br><span class="line">          template: disTpl,</span><br><span class="line">          props: &#123;</span><br><span class="line">            disList: &#123;</span><br><span class="line"><span class="javascript">              type: <span class="built_in">Array</span></span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          methods: &#123;</span><br><span class="line">            deleteItem(index) &#123;</span><br><span class="line"><span class="actionscript">              <span class="keyword">this</span>.$emit(<span class="string">'onDeleteItem'</span>, index)</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        /** global API</span><br><span class="line">         * @Vue.component(id, [definition])</span><br><span class="line">         * 功能： 注册或获取全局组件</span><br><span class="line"><span class="javascript">         * params:  &#123;string&#125; id, &#123;<span class="built_in">Function</span> | <span class="built_in">Object</span>&#125; [definition]</span></span><br><span class="line">         */</span><br><span class="line"><span class="actionscript">        <span class="comment">// 使用构造器创建组件</span></span></span><br><span class="line"><span class="actionscript">        Vue.component(<span class="string">'display-item'</span>, DisplayItem)</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 使用模板选项创建组件</span></span></span><br><span class="line"><span class="actionscript">        Vue.component(<span class="string">'input-item'</span>, &#123;</span></span><br><span class="line">          template: inputTpl,</span><br><span class="line">          data() &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">              inputValue: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">              add: <span class="string">'add'</span></span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          computed: &#123;</span><br><span class="line">            disableAddBtn() &#123;</span><br><span class="line"><span class="actionscript">              <span class="keyword">return</span> !<span class="keyword">this</span>.inputValue</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          methods: &#123;</span><br><span class="line">            addClick() &#123;</span><br><span class="line"><span class="javascript">              <span class="built_in">console</span>.log(<span class="keyword">this</span>.disableAddBtn)</span></span><br><span class="line"><span class="actionscript">              <span class="keyword">if</span> (<span class="keyword">this</span>.disableAddBtn) <span class="keyword">return</span></span></span><br><span class="line"><span class="actionscript">              <span class="keyword">this</span>.$emit(<span class="string">'onAddItem'</span>, <span class="keyword">this</span>.inputValue) <span class="comment">// 实例方法/事件</span></span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="actionscript">        <span class="comment">// 使用render函数创建组件</span></span></span><br><span class="line"><span class="actionscript">        Vue.component(<span class="string">'todo-list'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">          render: <span class="function"><span class="keyword">function</span> <span class="params">(createElement)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> createElement(<span class="string">'div'</span>, &#123;<span class="string">'class'</span>: &#123;<span class="string">'todo-list'</span>: <span class="literal">true</span>&#125;&#125;, [</span></span><br><span class="line"><span class="actionscript">              createElement(<span class="string">'input-item'</span>, &#123;</span></span><br><span class="line"><span class="vbscript">                <span class="keyword">on</span>: &#123;</span></span><br><span class="line"><span class="actionscript">                  onAddItem: <span class="keyword">this</span>.$parent.addItemToList</span></span><br><span class="line">                &#125;,</span><br><span class="line"><span class="actionscript">              &#125;, <span class="keyword">this</span>.$slots.default),</span></span><br><span class="line"><span class="actionscript">              createElement(<span class="string">'display-item'</span>, &#123;</span></span><br><span class="line">                props: &#123;</span><br><span class="line"><span class="actionscript">                  disList: <span class="keyword">this</span>.$parent.$data.todoLists</span></span><br><span class="line">                &#125;,</span><br><span class="line"><span class="vbscript">                <span class="keyword">on</span>: &#123;</span></span><br><span class="line"><span class="actionscript">                  onDeleteItem: <span class="keyword">this</span>.$parent.deleteItemFromList</span></span><br><span class="line">                &#125;,</span><br><span class="line"><span class="actionscript">              &#125;, <span class="keyword">this</span>.$slots.default),</span></span><br><span class="line">            ])</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> TodoList = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line">          props: &#123;</span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="javascript">              type: <span class="built_in">Object</span></span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          data() &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line">              todoLists: [</span><br><span class="line">                &#123;</span><br><span class="line"><span class="actionscript">                  text: <span class="string">'这个周末去song'</span></span></span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          methods: &#123;</span><br><span class="line">            deleteItemFromList (index) &#123;</span><br><span class="line"><span class="actionscript">              <span class="keyword">this</span>.todoLists.splice(index, <span class="number">1</span>)</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line"><span class="actionscript">          render: <span class="function"><span class="keyword">function</span> <span class="params">(createElement)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> createElement(<span class="string">'todo-list'</span>)</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        /** global API</span><br><span class="line">        * @Vue.mixin(id, [definition])</span><br><span class="line">        * 功能： 定义一个全局混入</span><br><span class="line"><span class="javascript">        * params:  &#123;string&#125; id &#123;<span class="built_in">Function</span> | <span class="built_in">Object</span>&#125; [definition]</span></span><br><span class="line">        */</span><br><span class="line">        Vue.mixin(&#123;</span><br><span class="line"><span class="actionscript">          created: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> myOption = <span class="keyword">this</span>.$options.myOption</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'[myOption]'</span>, myOption)</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        /** global API</span><br><span class="line">        * @Vue.directive(id, [definition])</span><br><span class="line">        * 功能： 注册或获取一个全局指令</span><br><span class="line"><span class="javascript">        * params:  &#123;string&#125; id &#123;<span class="built_in">Function</span> | <span class="built_in">Object</span>&#125; [definition]</span></span><br><span class="line">        */</span><br><span class="line"><span class="actionscript">        Vue.directive(<span class="string">'focus'</span>, &#123;</span></span><br><span class="line">          inserted (el, binding, vNode) &#123;</span><br><span class="line">            el.focus()</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        /** global API</span><br><span class="line">        * @Vue.vue(plugin)</span><br><span class="line">        * 功能： 安装 Vue.js 插件</span><br><span class="line"><span class="javascript">        * params:  &#123;<span class="built_in">Object</span> | <span class="built_in">Function</span>&#125; plugin</span></span><br><span class="line">        */</span><br><span class="line">        Vue.use(&#123;</span><br><span class="line">          install(Vue) &#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> message = <span class="function">(<span class="params">context, options</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">              let res = Vue.compile('<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;options.text&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>')</span></span></span><br><span class="line"><span class="javascript">              <span class="keyword">let</span> Message = Vue.extend(&#123;</span></span><br><span class="line">                render: res.render</span><br><span class="line">              &#125;)</span><br><span class="line"><span class="actionscript">              <span class="keyword">new</span> Message().$mount(context)</span></span><br><span class="line">            &#125;</span><br><span class="line">            Vue.prototype.$message = message</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        /** global API</span><br><span class="line"><span class="vbscript">        * @Vue.<span class="built_in">filter</span>(id, [definition])</span></span><br><span class="line">        * 功能： 注册或获取全局过滤器。</span><br><span class="line"><span class="javascript">        * params:  &#123;string&#125; id &#123;<span class="built_in">Function</span> | <span class="built_in">Object</span>&#125; [definition]</span></span><br><span class="line">        */</span><br><span class="line"><span class="actionscript">        Vue.filter(<span class="string">'capitalize'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(value)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">if</span> (!value) <span class="keyword">return</span> <span class="string">''</span></span></span><br><span class="line">          value = value.toString()</span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> value.charAt(<span class="number">0</span>).toUpperCase() + value.slice(<span class="number">1</span>)</span></span><br><span class="line">        &#125;)</span><br><span class="line">        /** global API</span><br><span class="line"><span class="vbscript">        * @Vue.<span class="keyword">set</span>(target, propertyName/index, value )</span></span><br><span class="line">        * 功能： 向响应式对象中添加一个属性</span><br><span class="line">        * params:  一个包含组件选项的对象。</span><br><span class="line">        */</span><br><span class="line"><span class="actionscript">        Vue.set(TodoList, <span class="string">'key'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">          text: <span class="string">'这个周末去song'</span></span></span><br><span class="line">        &#125;)</span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> list = TodoList.$data.todoLists</span></span><br><span class="line"><span class="javascript">        list = list.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">          TodoList.$<span class="keyword">set</span>(item, <span class="string">'isCompleted'</span>, <span class="literal">true</span>)</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> item</span></span><br><span class="line">        &#125;)</span><br><span class="line"><span class="javascript">        TodoList.addItemToList = <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span></span><br><span class="line">          list.push(&#123;</span><br><span class="line"><span class="actionscript">            isCompleted: <span class="literal">false</span>,</span></span><br><span class="line">            text: value</span><br><span class="line">          &#125;)</span><br><span class="line">          TodoList.$data.todoLists = list</span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        TodoList.$mount(<span class="string">'#mount-point'</span>)</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue 进阶系列之实例属性</title>
      <link href="/2019/10/22/vue%E8%BF%9B%E9%98%B6%E7%B3%BB%E5%88%97%E4%B9%8B%E5%AE%9E%E4%BE%8B%E5%B1%9E%E6%80%A7/"/>
      <url>/2019/10/22/vue%E8%BF%9B%E9%98%B6%E7%B3%BB%E5%88%97%E4%B9%8B%E5%AE%9E%E4%BE%8B%E5%B1%9E%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<p>vue 进阶系列之实例属性, 沿用进阶系列之全局 API 的实例</p><a id="more"></a><h2 id="vue-进阶系列之实例属性"><a href="#vue-进阶系列之实例属性" class="headerlink" title="vue 进阶系列之实例属性"></a>vue 进阶系列之实例属性</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span> vue 进阶系列之全局 API 的使用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.todo-list</span> &#123;</span></span><br><span class="line">      margin: 100px auto;</span><br><span class="line">      width: 500px;</span><br><span class="line">      text-align: center;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.display-item</span> &#123;</span></span><br><span class="line">      text-align: left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.input-todo-item</span>&gt;<span class="selector-tag">input</span> &#123;</span></span><br><span class="line">      width: 300px;</span><br><span class="line">      height: 35px;</span><br><span class="line"><span class="css">      <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#bbb</span>;</span></span><br><span class="line">      border-radius: 4px;</span><br><span class="line">      padding-left: 1rem;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.input-todo-item</span>&gt;<span class="selector-tag">input</span><span class="selector-pseudo">:focus</span> &#123;</span></span><br><span class="line">      border-radius: 4px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.input-todo-item</span>&gt;<span class="selector-tag">button</span> &#123;</span></span><br><span class="line">      line-height: 35px;</span><br><span class="line"><span class="css">      <span class="selector-tag">color</span>: <span class="selector-id">#ffffff</span>;</span></span><br><span class="line">      background-color: red;</span><br><span class="line">      outline: none;</span><br><span class="line"><span class="css">      <span class="selector-tag">opacity</span>: <span class="selector-class">.6</span>;</span></span><br><span class="line">      border-radius: 4px;</span><br><span class="line">      border: none;</span><br><span class="line">      padding: 0 1rem;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.input-todo-item</span>&gt;<span class="selector-tag">button</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line">      opacity: 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.disableBtn</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background-color</span>: <span class="selector-id">#bbb</span> !<span class="selector-tag">important</span>;</span></span><br><span class="line">      opacity: 1 !important;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"mount-point"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> inputTpl =</span></span><br><span class="line"><span class="handlebars"><span class="xml">          `<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-todo-item"</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"inputValue"</span>/&gt;</span></span></span></span><br><span class="line">            &lt;button</span><br><span class="line"><span class="actionscript">              ref=<span class="string">"addbtn"</span></span></span><br><span class="line"><span class="actionscript">              @click=<span class="string">"addClick"</span></span></span><br><span class="line"><span class="actionscript">              :disabled=<span class="string">"disableAddBtn"</span></span></span><br><span class="line"><span class="javascript">              :<span class="class"><span class="keyword">class</span></span>=<span class="string">"&#123;disableBtn: disableAddBtn&#125;"</span>&gt;</span></span><br><span class="line">              add</span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">          `</span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> disTpl =</span></span><br><span class="line"><span class="handlebars"><span class="xml">          `<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"display-item"</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line">              &lt;li</span><br><span class="line"><span class="actionscript">                v-<span class="keyword">for</span>=<span class="string">"(item, index) in disList"</span></span></span><br><span class="line"><span class="actionscript">                :key=<span class="string">"index"</span></span></span><br><span class="line"><span class="actionscript">                :style=<span class="string">"&#123;textDecorationLine: item.isCompleted ? 'line-through' : 'none'&#125;"</span></span></span><br><span class="line"><span class="actionscript">                @click=<span class="string">"deleteItem"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">                </span><span class="template-variable">&#123;&#123;item.text&#125;&#125;</span><span class="xml"></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">              <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> tpl =</span></span><br><span class="line"><span class="handlebars"><span class="xml">          `<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"todo-list"</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">input-item</span> @<span class="attr">onAddItem</span>=<span class="string">"addItemToList"</span>/&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">display-item</span> <span class="attr">:disList</span>=<span class="string">"todoLists"</span>/&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> DisplayItem = Vue.extend(&#123;</span></span><br><span class="line">          template: disTpl,</span><br><span class="line">          props: &#123;</span><br><span class="line">            disList: &#123;</span><br><span class="line"><span class="javascript">              type: <span class="built_in">Array</span></span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          methods: &#123;</span><br><span class="line">            deleteItem() &#123; &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="actionscript">        Vue.component(<span class="string">'display-item'</span>, DisplayItem)</span></span><br><span class="line"><span class="actionscript">        Vue.component(<span class="string">'input-item'</span>, &#123;</span></span><br><span class="line">          template: inputTpl,</span><br><span class="line">          data() &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">              inputValue: <span class="string">''</span></span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          computed: &#123;</span><br><span class="line">            disableAddBtn() &#123;</span><br><span class="line"><span class="actionscript">              <span class="keyword">return</span> !<span class="keyword">this</span>.inputValue</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          methods: &#123;</span><br><span class="line">            addClick() &#123;</span><br><span class="line"><span class="javascript">              <span class="built_in">console</span>.log(<span class="keyword">this</span>.disableAddBtn)</span></span><br><span class="line"><span class="actionscript">              <span class="keyword">if</span> (<span class="keyword">this</span>.disableAddBtn) <span class="keyword">return</span></span></span><br><span class="line"><span class="actionscript">              <span class="keyword">this</span>.$emit(<span class="string">'onAddItem'</span>, <span class="keyword">this</span>.inputValue) <span class="comment">// 实例方法/事件</span></span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> TodoList = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line">          template: tpl,</span><br><span class="line">          props: &#123;</span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="javascript">              type: <span class="built_in">Object</span></span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          data() &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line">              todoLists: [</span><br><span class="line">                &#123;</span><br><span class="line"><span class="actionscript">                  text: <span class="string">'这个周末去song'</span></span></span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> list = TodoList.$data.todoLists</span></span><br><span class="line"><span class="javascript">        list = list.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">          TodoList.$<span class="keyword">set</span>(item, <span class="string">'isCompleted'</span>, <span class="literal">true</span>)</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> item</span></span><br><span class="line">        &#125;)</span><br><span class="line"><span class="javascript">        TodoList.addItemToList = <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span></span><br><span class="line">          list.push(&#123;</span><br><span class="line"><span class="actionscript">            isCompleted: <span class="literal">false</span>,</span></span><br><span class="line">            text: value</span><br><span class="line">          &#125;)</span><br><span class="line">          TodoList.$data.todoLists = list</span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        TodoList.$mount(<span class="string">'#mount-point'</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 此处列举vue实例属性</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(TodoList.$data) <span class="comment">// rw 代理data对象</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// =&gt; &#123;__ob__: Observer&#125;</span></span></span><br><span class="line"><span class="actionscript">              <span class="comment">// todoLists: (...)</span></span></span><br><span class="line"><span class="actionscript">              <span class="comment">// __ob__: Observer &#123;value: &#123;…&#125;, dep: Dep, vmCount: 1&#125;</span></span></span><br><span class="line"><span class="actionscript">              <span class="comment">// get todoLists: ƒ reactiveGetter()</span></span></span><br><span class="line"><span class="actionscript">              <span class="comment">// set todoLists: ƒ reactiveSetter(newVal)</span></span></span><br><span class="line"><span class="actionscript">              <span class="comment">// __proto__: Object</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(TodoList.$options) <span class="comment">// onlyread</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        // =&gt; &#123;components: &#123;…&#125;, directives: &#123;…&#125;, filters: &#123;…&#125;, _base: ƒ, template: "<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"todo-list"</span>&gt;</span><span class="tag">&lt;<span class="name">input-item</span> @<span class="attr">o</span>…<span class="attr">play-item</span> <span class="attr">:disList</span>=<span class="string">"todoLists"</span>/&gt;</span>↵          <span class="tag">&lt;/<span class="name">div</span>&gt;</span>", …&#125;</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(TodoList.$el) <span class="comment">// onlyread Vue</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// =&gt; undefined</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(TodoList.$root)</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// =&gt; 当前vue实例</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(TodoList.$props)</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// =&gt; &#123;&#125;</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// data: (...)</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// get data: ƒ reactiveGetter()</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// set data: ƒ reactiveSetter(newVal)</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// __proto__: Object</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(TodoList.$parent)  <span class="comment">// onlyread</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// =&gt; 父实例，如果当前实例有的话</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(TodoList.$children)  <span class="comment">// onlyread</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// =&gt; 当前实例的直接子组件</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// []</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 0: VueComponent &#123;_uid: 1, _isVue: true, $options: &#123;…&#125;, _renderProxy: Proxy, _self: VueComponent, …&#125;</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 1: VueComponent &#123;_uid: 2, _isVue: true, $options: &#123;…&#125;, _renderProxy: Proxy, _self: VueComponent, …&#125;</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// length: 2</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// __proto__: Array(0)</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(TodoList.$refs)  <span class="comment">// onlyread</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// =&gt; 一个对象，持有注册过 ref 特性 的所有 DOM 元素和组件实例。</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(TodoList.$scopedSlots) <span class="comment">// onlyread</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// =&gt; 用来访问作用域插槽</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(TodoList.$slots)  <span class="comment">// onlyread</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// =&gt; 用来访问被插槽分发的内容</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(TodoList.$listeners)  <span class="comment">// onlyread</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// =&gt; 包含了父作用域中的 (不含 .native 修饰器的) v-on 事件监听器</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(TodoList.$attrs)  <span class="comment">// onlyread</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// =&gt; 包含了父作用域中不作为 prop 被识别 (且获取) 的特性绑定 (class 和 style 除外)</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(vm.$isServer)</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// =&gt; 当前 Vue 实例是否运行于服务器</span></span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从一个todoList来体验vue的神秘感</title>
      <link href="/2019/10/22/%E4%BB%8E%E4%B8%80%E4%B8%AAtodoList%E6%9D%A5%E4%BD%93%E9%AA%8Cvue%E7%9A%84%E7%A5%9E%E7%A7%98%E6%84%9F/"/>
      <url>/2019/10/22/%E4%BB%8E%E4%B8%80%E4%B8%AAtodoList%E6%9D%A5%E4%BD%93%E9%AA%8Cvue%E7%9A%84%E7%A5%9E%E7%A7%98%E6%84%9F/</url>
      
        <content type="html"><![CDATA[<p>从一个 todoList 来体验 vue 的神秘感</p><a id="more"></a><ul><li>请纵情体验使用 vue 来玩 todoList</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span> vue 进阶系列之全局 API 的使用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.todo-list</span> &#123;</span></span><br><span class="line">      margin: 100px auto;</span><br><span class="line">      width: 500px;</span><br><span class="line">      text-align: center;</span><br><span class="line">      font-family: '微软雅黑';</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.display-item</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line">      text-align: left;</span><br><span class="line">      padding-left: 1rem;</span><br><span class="line"><span class="css">      <span class="selector-tag">color</span>: <span class="selector-id">#bbbbbb</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.input-tod-item</span>&gt;<span class="selector-tag">input</span> &#123;</span></span><br><span class="line">      width: 300px;</span><br><span class="line">      height: 35px;</span><br><span class="line"><span class="css">      <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#bbb</span>;</span></span><br><span class="line">      border-radius: 4px;</span><br><span class="line">      padding: 0 1rem;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.input-tod-item</span>&gt;<span class="selector-tag">input</span><span class="selector-pseudo">:focus</span> &#123;</span></span><br><span class="line">      border-radius: 4px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.input-tod-item</span>&gt;<span class="selector-tag">button</span> &#123;</span></span><br><span class="line">      line-height: 35px;</span><br><span class="line"><span class="css">      <span class="selector-tag">color</span>: <span class="selector-id">#ffffff</span>;</span></span><br><span class="line">      background-color: red;</span><br><span class="line">      outline: none;</span><br><span class="line"><span class="css">      <span class="selector-tag">opacity</span>: <span class="selector-class">.6</span>;</span></span><br><span class="line">      border-radius: 4px;</span><br><span class="line">      border: none;</span><br><span class="line">      padding: 0 1rem;</span><br><span class="line">      cursor: pointer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.input-tod-item</span>&gt;<span class="selector-tag">button</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line">      opacity: 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.disableBtn</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background-color</span>: <span class="selector-id">#bbb</span> !<span class="selector-tag">important</span>;</span></span><br><span class="line">      opacity: 1 !important;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.samll-widget</span> &#123;</span></span><br><span class="line">      display: inline-block;</span><br><span class="line">      height: 20px;</span><br><span class="line">      width: 30px;</span><br><span class="line">      line-height: 20px;</span><br><span class="line">      text-align: center;</span><br><span class="line"><span class="css">      <span class="selector-tag">color</span>: <span class="selector-id">#ffffff</span>;</span></span><br><span class="line">      transition: all 1s;</span><br><span class="line"><span class="css">      <span class="comment">/* border: 1px solid #eee; */</span></span></span><br><span class="line">      border-radius: 2px;</span><br><span class="line">      margin-left: 1rem;</span><br><span class="line"><span class="css">      <span class="selector-tag">opacity</span>: <span class="selector-class">.5</span>;</span></span><br><span class="line">      cursor: pointer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.samll-widget</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line">      opacity: 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"mount-point"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 定义 &lt;input-item/&gt;组件 html 片段</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> inputTpl =</span></span><br><span class="line"><span class="handlebars"><span class="xml">          `<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-tod-item"</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-focus</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"inputValue"</span>/&gt;</span></span></span></span><br><span class="line">            &lt;button</span><br><span class="line"><span class="actionscript">              ref=<span class="string">"addbtn"</span></span></span><br><span class="line"><span class="actionscript">              @click=<span class="string">"addClick"</span></span></span><br><span class="line"><span class="actionscript">              :disabled=<span class="string">"disableAddBtn"</span></span></span><br><span class="line"><span class="javascript">              :<span class="class"><span class="keyword">class</span></span>=<span class="string">"&#123;disableBtn: disableAddBtn&#125;"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">              </span><span class="template-variable">&#123;&#123; add | capitalize&#125;&#125;</span><span class="xml"></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">          `</span><br><span class="line"><span class="actionscript">        <span class="comment">// 定义 &lt;display-item&gt;组件 html 片段</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> disTpl =</span></span><br><span class="line"><span class="handlebars"><span class="xml">          `<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"display-item"</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line">              &lt;li</span><br><span class="line"><span class="actionscript">                v-<span class="keyword">for</span>=<span class="string">"(item, index) in disList"</span></span></span><br><span class="line"><span class="actionscript">                :key=<span class="string">"index"</span></span></span><br><span class="line"><span class="actionscript">                :style=<span class="string">"&#123;textDecorationLine: item.isCompleted ? 'line-through' : 'none'&#125;"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">                </span><span class="template-variable">&#123;&#123;item.text&#125;&#125;</span><span class="xml"></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">small-widget</span> <span class="attr">type</span>=<span class="string">"delete"</span> <span class="attr">index</span>=<span class="string">"index"</span> @<span class="attr">onClickWidget</span>=<span class="string">"deleteItem(index)"</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:widget</span>&gt;</span>x<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;/<span class="name">small-widget</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">small-widget</span> <span class="attr">type</span>=<span class="string">"finished"</span> <span class="attr">index</span>=<span class="string">"index"</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:widget</span>&gt;</span>o<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;/<span class="name">small-widget</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">              <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 定义 TodoList html 片段</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> tpl =</span></span><br><span class="line"><span class="handlebars"><span class="xml">          `<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"todo-list"</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">input-item</span> @<span class="attr">onAddItem</span>=<span class="string">"addItemToList"</span>/&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">display-item</span> <span class="attr">:disList</span>=<span class="string">"todoLists"</span>/&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">        /** global API</span><br><span class="line">         * @Vue.compile(template)</span><br><span class="line">         * 功能： 在 render 函数中编译模板字符串</span><br><span class="line">         * params:</span><br><span class="line">         */</span><br><span class="line"><span class="handlebars"><span class="xml">        const widget = Vue.compile(`<span class="tag">&lt;<span class="name">span</span> <span class="attr">ref</span>=<span class="string">"small-widget"</span> <span class="attr">class</span>=<span class="string">"samll-widget"</span> @<span class="attr">click</span>=<span class="string">"handleClick"</span>&gt;</span><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"widget"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>`)</span></span></span><br><span class="line"><span class="actionscript">        Vue.component(<span class="string">'small-widget'</span>, &#123;</span></span><br><span class="line">          props: &#123;</span><br><span class="line">            type: &#123;</span><br><span class="line"><span class="javascript">              type: <span class="built_in">String</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            index: &#123;</span><br><span class="line"><span class="javascript">              type: <span class="built_in">String</span></span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          computed: &#123;</span><br><span class="line">            color () &#123;</span><br><span class="line"><span class="actionscript">              <span class="keyword">if</span> (<span class="keyword">this</span>.type === <span class="string">'delete'</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> <span class="string">'red'</span></span></span><br><span class="line"><span class="actionscript">              &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.type === <span class="string">'remind'</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> <span class="string">'yellow'</span></span></span><br><span class="line"><span class="actionscript">              &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> <span class="string">'green'</span></span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          mounted () &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.$refs[<span class="string">'small-widget'</span>].style.backgroundColor = <span class="keyword">this</span>.color</span></span><br><span class="line">          &#125;,</span><br><span class="line">          methods: &#123;</span><br><span class="line">            handleClick () &#123;</span><br><span class="line"><span class="actionscript">              <span class="keyword">this</span>.$emit(<span class="string">'onClickWidget'</span>)</span></span><br><span class="line"><span class="actionscript">              <span class="comment">// console.log('fsafasfsafsafa' ,this.$parent.$parent.$data)</span></span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          render: widget.render</span><br><span class="line">        &#125;)</span><br><span class="line">        /** global API</span><br><span class="line">         * @Vue.extend(options)</span><br><span class="line">         * 功能： 使用基础 Vue 构造器，创建一个“子类”</span><br><span class="line">         * params:  一个包含组件选项的对象。</span><br><span class="line">         */</span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> DisplayItem = Vue.extend(&#123;</span></span><br><span class="line">          template: disTpl,</span><br><span class="line">          props: &#123;</span><br><span class="line">            disList: &#123;</span><br><span class="line"><span class="javascript">              type: <span class="built_in">Array</span></span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          methods: &#123;</span><br><span class="line">            deleteItem(index) &#123;</span><br><span class="line"><span class="actionscript">              <span class="keyword">this</span>.$emit(<span class="string">'onDeleteItem'</span>, index)</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        /** global API</span><br><span class="line">         * @Vue.component(id, [definition])</span><br><span class="line">         * 功能： 注册或获取全局组件</span><br><span class="line"><span class="javascript">         * params:  &#123;string&#125; id, &#123;<span class="built_in">Function</span> | <span class="built_in">Object</span>&#125; [definition]</span></span><br><span class="line">         */</span><br><span class="line"><span class="actionscript">        <span class="comment">// 使用构造器创建组件</span></span></span><br><span class="line"><span class="actionscript">        Vue.component(<span class="string">'display-item'</span>, DisplayItem)</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 使用模板选项创建组件</span></span></span><br><span class="line"><span class="actionscript">        Vue.component(<span class="string">'input-item'</span>, &#123;</span></span><br><span class="line">          template: inputTpl,</span><br><span class="line">          data() &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">              inputValue: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">              add: <span class="string">'add'</span></span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          computed: &#123;</span><br><span class="line">            disableAddBtn() &#123;</span><br><span class="line"><span class="actionscript">              <span class="keyword">return</span> !<span class="keyword">this</span>.inputValue</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line"><span class="actionscript">          <span class="comment">// watch 监听的属性只有当其发生变化后才触发，因此首次不会触发的</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// watch: &#123;</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">//   disableAddBtn (newV, oldV) &#123;</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">//     if (newV) &#123;</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">//       this.$refs['addbtn'].style.backgroundColor = "#bbb"</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">//     &#125; else &#123;</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">//       this.$refs['addbtn'].style.backgroundColor = "red"</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">//   &#125;</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// &#125;,</span></span></span><br><span class="line">          methods: &#123;</span><br><span class="line">            addClick() &#123;</span><br><span class="line"><span class="javascript">              <span class="built_in">console</span>.log(<span class="keyword">this</span>.disableAddBtn)</span></span><br><span class="line"><span class="actionscript">              <span class="keyword">if</span> (<span class="keyword">this</span>.disableAddBtn) <span class="keyword">return</span></span></span><br><span class="line"><span class="actionscript">              <span class="keyword">this</span>.$emit(<span class="string">'onAddItem'</span>, <span class="keyword">this</span>.inputValue) <span class="comment">// 实例方法/事件</span></span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="actionscript">        <span class="comment">// 使用render函数创建组件</span></span></span><br><span class="line"><span class="actionscript">        Vue.component(<span class="string">'todo-list'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">          render: <span class="function"><span class="keyword">function</span> <span class="params">(createElement)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> createElement(<span class="string">'div'</span>, &#123;<span class="string">'class'</span>: &#123;<span class="string">'todo-list'</span>: <span class="literal">true</span>&#125;&#125;, [</span></span><br><span class="line"><span class="actionscript">              createElement(<span class="string">'input-item'</span>, &#123;</span></span><br><span class="line"><span class="vbscript">                <span class="keyword">on</span>: &#123;</span></span><br><span class="line"><span class="actionscript">                  onAddItem: <span class="keyword">this</span>.$parent.addItemToList</span></span><br><span class="line">                &#125;,</span><br><span class="line"><span class="actionscript">              &#125;, <span class="keyword">this</span>.$slots.default),</span></span><br><span class="line"><span class="actionscript">              createElement(<span class="string">'display-item'</span>, &#123;</span></span><br><span class="line">                props: &#123;</span><br><span class="line"><span class="actionscript">                  disList: <span class="keyword">this</span>.$parent.$data.todoLists</span></span><br><span class="line">                &#125;,</span><br><span class="line"><span class="vbscript">                <span class="keyword">on</span>: &#123;</span></span><br><span class="line"><span class="actionscript">                  onDeleteItem: <span class="keyword">this</span>.$parent.deleteItemFromList</span></span><br><span class="line">                &#125;,</span><br><span class="line"><span class="actionscript">              &#125;, <span class="keyword">this</span>.$slots.default),</span></span><br><span class="line">            ])</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> TodoList = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line">          props: &#123;</span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="javascript">              type: <span class="built_in">Object</span></span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          data() &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line">              todoLists: [</span><br><span class="line">                &#123;</span><br><span class="line"><span class="actionscript">                  text: <span class="string">'这个周末去song'</span></span></span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          methods: &#123;</span><br><span class="line">            deleteItemFromList (index) &#123;</span><br><span class="line"><span class="actionscript">              <span class="keyword">this</span>.todoLists.splice(index, <span class="number">1</span>)</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line"><span class="actionscript">          render: <span class="function"><span class="keyword">function</span> <span class="params">(createElement)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> createElement(<span class="string">'todo-list'</span>)</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        /** global API</span><br><span class="line">        * @Vue.mixin(id, [definition])</span><br><span class="line">        * 功能： 定义一个全局混入</span><br><span class="line"><span class="javascript">        * params:  &#123;string&#125; id &#123;<span class="built_in">Function</span> | <span class="built_in">Object</span>&#125; [definition]</span></span><br><span class="line">        */</span><br><span class="line">        Vue.mixin(&#123;</span><br><span class="line"><span class="actionscript">          created: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> myOption = <span class="keyword">this</span>.$options.myOption</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'[myOption]'</span>, myOption)</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        /** global API</span><br><span class="line">        * @Vue.directive(id, [definition])</span><br><span class="line">        * 功能： 注册或获取一个全局指令</span><br><span class="line"><span class="javascript">        * params:  &#123;string&#125; id &#123;<span class="built_in">Function</span> | <span class="built_in">Object</span>&#125; [definition]</span></span><br><span class="line">        */</span><br><span class="line"><span class="actionscript">        Vue.directive(<span class="string">'focus'</span>, &#123;</span></span><br><span class="line">          inserted (el, binding, vNode) &#123;</span><br><span class="line">            el.focus()</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        /** global API</span><br><span class="line">        * @Vue.vue(plugin)</span><br><span class="line">        * 功能： 安装 Vue.js 插件</span><br><span class="line"><span class="javascript">        * params:  &#123;<span class="built_in">Object</span> | <span class="built_in">Function</span>&#125; plugin</span></span><br><span class="line">        */</span><br><span class="line">        Vue.use(&#123;</span><br><span class="line">          install(Vue) &#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> message = <span class="function">(<span class="params">context, options</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">              let res = Vue.compile('<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;options.text&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>')</span></span></span><br><span class="line"><span class="javascript">              <span class="keyword">let</span> Message = Vue.extend(&#123;</span></span><br><span class="line">                render: res.render</span><br><span class="line">              &#125;)</span><br><span class="line"><span class="actionscript">              <span class="keyword">new</span> Message().$mount(context)</span></span><br><span class="line">            &#125;</span><br><span class="line">            Vue.prototype.$message = message</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">         /** global API</span><br><span class="line"><span class="vbscript">        * @Vue.<span class="built_in">filter</span>(id, [definition])</span></span><br><span class="line">        * 功能： 注册或获取全局过滤器。</span><br><span class="line"><span class="javascript">        * params:  &#123;string&#125; id &#123;<span class="built_in">Function</span> | <span class="built_in">Object</span>&#125; [definition]</span></span><br><span class="line">        */</span><br><span class="line"><span class="actionscript">        Vue.filter(<span class="string">'capitalize'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(value)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">if</span> (!value) <span class="keyword">return</span> <span class="string">''</span></span></span><br><span class="line">          value = value.toString()</span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> value.charAt(<span class="number">0</span>).toUpperCase() + value.slice(<span class="number">1</span>)</span></span><br><span class="line">        &#125;)</span><br><span class="line">        /** global API</span><br><span class="line"><span class="vbscript">        * @Vue.<span class="keyword">set</span>(target, propertyName/index, value )</span></span><br><span class="line">        * 功能： 向响应式对象中添加一个属性</span><br><span class="line">        * params:  一个包含组件选项的对象。</span><br><span class="line">        */</span><br><span class="line"><span class="actionscript">        Vue.set(TodoList, <span class="string">'key'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">          text: <span class="string">'这个周末去song'</span></span></span><br><span class="line">        &#125;)</span><br><span class="line"><span class="actionscript">        <span class="comment">// 此处列举vue实例属性</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(TodoList.$data) <span class="comment">// rw 代理data对象</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// =&gt; &#123;__ob__: Observer&#125;</span></span></span><br><span class="line"><span class="actionscript">              <span class="comment">// todoLists: (...)</span></span></span><br><span class="line"><span class="actionscript">              <span class="comment">// __ob__: Observer &#123;value: &#123;…&#125;, dep: Dep, vmCount: 1&#125;</span></span></span><br><span class="line"><span class="actionscript">              <span class="comment">// get todoLists: ƒ reactiveGetter()</span></span></span><br><span class="line"><span class="actionscript">              <span class="comment">// set todoLists: ƒ reactiveSetter(newVal)</span></span></span><br><span class="line"><span class="actionscript">              <span class="comment">// __proto__: Object</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(TodoList.$options) <span class="comment">// onlyread</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        // =&gt; &#123;components: &#123;…&#125;, directives: &#123;…&#125;, filters: &#123;…&#125;, _base: ƒ, template: "<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"todo-list"</span>&gt;</span><span class="tag">&lt;<span class="name">input-item</span> @<span class="attr">o</span>…<span class="attr">play-item</span> <span class="attr">:disList</span>=<span class="string">"todoLists"</span>/&gt;</span>↵          <span class="tag">&lt;/<span class="name">div</span>&gt;</span>", …&#125;</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(TodoList.$el) <span class="comment">// onlyread Vue</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// =&gt; undefined</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(TodoList.$root)</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// =&gt; 当前vue实例</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(TodoList.$props)</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// =&gt; &#123;&#125;</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// data: (...)</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// get data: ƒ reactiveGetter()</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// set data: ƒ reactiveSetter(newVal)</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// __proto__: Object</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(TodoList.$parent)  <span class="comment">// onlyread</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// =&gt; 父实例，如果当前实例有的话</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(TodoList.$children)  <span class="comment">// onlyread</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// =&gt; 当前实例的直接子组件</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// []</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 0: VueComponent &#123;_uid: 1, _isVue: true, $options: &#123;…&#125;, _renderProxy: Proxy, _self: VueComponent, …&#125;</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 1: VueComponent &#123;_uid: 2, _isVue: true, $options: &#123;…&#125;, _renderProxy: Proxy, _self: VueComponent, …&#125;</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// length: 2</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// __proto__: Array(0)</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(TodoList.$refs)  <span class="comment">// onlyread</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// =&gt; 一个对象，持有注册过 ref 特性 的所有 DOM 元素和组件实例。</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(TodoList.$scopedSlots) <span class="comment">// onlyread</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// =&gt; 用来访问作用域插槽</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(TodoList.$slots)  <span class="comment">// onlyread</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// =&gt; 用来访问被插槽分发的内容</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(TodoList.$listeners)  <span class="comment">// onlyread</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// =&gt; 包含了父作用域中的 (不含 .native 修饰器的) v-on 事件监听器</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(TodoList.$attrs)  <span class="comment">// onlyread</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// =&gt; 包含了父作用域中不作为 prop 被识别 (且获取) 的特性绑定 (class 和 style 除外)</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(TodoList.$isServer)</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// =&gt; 当前 Vue 实例是否运行于服务器</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> list = TodoList.$data.todoLists</span></span><br><span class="line"><span class="javascript">        list = list.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">          TodoList.$<span class="keyword">set</span>(item, <span class="string">'isCompleted'</span>, <span class="literal">true</span>)</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> item</span></span><br><span class="line">        &#125;)</span><br><span class="line"><span class="javascript">        TodoList.addItemToList = <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span></span><br><span class="line">          list.push(&#123;</span><br><span class="line"><span class="actionscript">            isCompleted: <span class="literal">false</span>,</span></span><br><span class="line">            text: value</span><br><span class="line">          &#125;)</span><br><span class="line">          TodoList.$data.todoLists = list</span><br><span class="line">        &#125;</span><br><span class="line">        /** instance API (实例方法)</span><br><span class="line">        * @vm.$mount(id, [definition])</span><br><span class="line">        * 功能： 挂载一个未挂载的实例</span><br><span class="line"><span class="vbscript">        * params:  &#123;Element | <span class="built_in">string</span>&#125; [elementOrSelector] &#123;boolean&#125; [hydrating]</span></span><br><span class="line">        */</span><br><span class="line"><span class="actionscript">        TodoList.$mount(<span class="string">'#mount-point'</span>)</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue 进阶系列之指令</title>
      <link href="/2019/10/22/vue%E8%BF%9B%E9%98%B6%E7%B3%BB%E5%88%97%E4%B9%8B%E6%8C%87%E4%BB%A4/"/>
      <url>/2019/10/22/vue%E8%BF%9B%E9%98%B6%E7%B3%BB%E5%88%97%E4%B9%8B%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>本文章是基于<code>vue 2</code>做总结案例，主要展示了在<code>SPA</code>中怎么使用。</p><blockquote><p><a href="https://cli.vuejs.org/zh/" target="_blank" rel="noopener">如何构建<code>SPA</code></a></p></blockquote><blockquote><p>参考文档<a href="https://cn.vuejs.org" target="_blank" rel="noopener">vuejs</a></p></blockquote><a id="more"></a><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><h2 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h2><blockquote><p>作用： 更新元素的 <code>textContent</code></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--#ps: 请和插值语法&#123;&#123;msg&#125;&#125;比较学习 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">        msg: <span class="string">"just do it"</span></span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-text-vs-Mustache-语法"><a href="#v-text-vs-Mustache-语法" class="headerlink" title="v-text vs Mustache 语法"></a>v-text vs Mustache 语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 同： 都是更新元素的textContent</span></span><br><span class="line"><span class="comment"># 异： 当网速很慢或者下面的JavaScript写错时，会直接将&#123;&#123;msg&#125;&#125;渲染到页面而使用v-text="message" 如果出错是不显示的</span></span><br></pre></td></tr></table></figure><h2 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h2><blockquote><p>作用： 操作元素中的<code>HTML标签</code></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- #ps: 请和`v-text`比较学习 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data () &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        msg: "<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">'img/1.ipg'</span>"/&gt;</span></span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-text-vs-v-html"><a href="#v-text-vs-v-html" class="headerlink" title="v-text vs v-html"></a>v-text vs v-html</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 同： 如果只是用来渲染 `textContent`， 则效果相同</span></span><br><span class="line"><span class="comment"># 异： v-text会将元素当成纯文本输出，v-html会将元素当成HTML标签解析后输出</span></span><br></pre></td></tr></table></figure><h2 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h2><blockquote><p>作用： 根据表达式之真假值，切换元素的 display CSS 属性</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- #ps: 请和`v-if`比较学习 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">"isShow"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">        isShow: <span class="literal">false</span></span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h2><blockquote><p>作用： 根据表达式的值的真假条件渲染元素</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- #ps: 请和`v-if`比较学习 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"isShow"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">        isShow: <span class="literal">true</span></span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-show-vs-v-if"><a href="#v-show-vs-v-if" class="headerlink" title="v-show vs v-if"></a>v-show vs v-if</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 同： 根据表达式值的真假都可以达到隐藏和显示节点的效果</span></span><br><span class="line"><span class="comment"># 异： v-show改变的是css 的display属性。v-if在切换时元素及它的数据绑定 / 组件被销毁并重建</span></span><br></pre></td></tr></table></figure><h2 id="v-else"><a href="#v-else" class="headerlink" title="v-else"></a>v-else</h2><blockquote><p>限制：前一兄弟元素必须有 v-if 或 v-else-if。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- #ps: 前面必须有兄弟元素使用了 v-if 或者 v-else-if 才可 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"isShow"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  data () &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      isShow: <span class="literal">true</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h2><blockquote><p>作用： 基于源数据多次渲染元素或模板块</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- #ps: 源数据类型可以是 number、Array、Object--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 源数据是number --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in n"</span> <span class="attr">:key</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">        &#123;&#123;item&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 源数据是Object --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(value, name, index) in student"</span> <span class="attr">:key</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">        &#123;&#123; index &#125;&#125;. &#123;&#123; name &#125;&#125;: &#123;&#123; value &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 源数据是Array --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 当它们处于同一节点，v-for 的优先级比 v-if 更高 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-for</span>=<span class="string">"(item, index) in schedules"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:key</span>=<span class="string">"index"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-if</span>=<span class="string">"item.isShow"</span>&gt;</span></span><br><span class="line">       &#123;&#123;item.goal&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  data () &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      n: 7,</span><br><span class="line">      student: &#123;</span><br><span class="line"><span class="actionscript">        name: <span class="string">'zhangsan'</span>,</span></span><br><span class="line"><span class="actionscript">        sex: <span class="string">'male'</span>,</span></span><br><span class="line"><span class="actionscript">        nation: <span class="string">'china'</span></span></span><br><span class="line">      &#125;</span><br><span class="line">      schedules: [</span><br><span class="line">        &#123;</span><br><span class="line"><span class="actionscript">          goal: <span class="string">'一周时间刷一边vue官网'</span>,</span></span><br><span class="line"><span class="actionscript">          isShow: <span class="literal">true</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line"><span class="actionscript">          goal: <span class="string">'用10天时间刷一边react官网'</span>,</span></span><br><span class="line"><span class="actionscript">          isShow: <span class="literal">true</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line"><span class="actionscript">          goal: <span class="string">'用半月时间熟悉vue 和 react全家桶'</span>,</span></span><br><span class="line"><span class="actionscript">          isShow: <span class="literal">false</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="源数据更新"><a href="#源数据更新" class="headerlink" title="源数据更新"></a>源数据更新</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 变异方法：</span></span><br><span class="line">push()</span><br><span class="line">pop()</span><br><span class="line"><span class="built_in">shift</span>()</span><br><span class="line">unshift()</span><br><span class="line">splice()</span><br><span class="line">sort()</span><br><span class="line">reverse()</span><br><span class="line"><span class="comment"># 非变异方法</span></span><br><span class="line">filter()</span><br><span class="line">concat()</span><br><span class="line">slice()</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> defult &#123;</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    <span class="comment">// 变异方法的使用</span></span><br><span class="line">    <span class="keyword">this</span>.schedules.push(&#123;</span><br><span class="line">      goal: <span class="string">"学习js算法基础知识"</span>,</span><br><span class="line">      isShow: <span class="literal">false</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 非变异方法的使用</span></span><br><span class="line">    <span class="keyword">this</span>.schedules = <span class="keyword">this</span>.schedules.filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> item.isShow</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p><code>Vue 不能检测以下数组的变动：</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当你利用索引直接设置一个数组项时</span></span><br><span class="line">this.schedules[indexOfItem] = newValue</span><br><span class="line"><span class="comment"># 可以这样解决</span></span><br><span class="line">this.<span class="variable">$set</span>(this.schedules, indexOfItem, newValue)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当你修改数组的长度时</span></span><br><span class="line">this.schedules.length = newLength</span><br><span class="line"><span class="comment"># 可以这样解决：</span></span><br><span class="line">this.schedules.splice(newLength)</span><br></pre></td></tr></table></figure><p><code>Vue 不能检测对象属性的添加或删除：</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    student: &#123;</span><br><span class="line">      name: <span class="string">"zhangsan"</span>,</span><br><span class="line">      sex: <span class="string">"male"</span>,</span><br><span class="line">      nation: <span class="string">"china"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// `vm.student.name` 现在是响应式的</span></span><br><span class="line">vm.student.age = <span class="number">27</span>;</span><br><span class="line"><span class="comment">// `vm.student.age` 不是响应式的</span></span><br><span class="line"><span class="comment">// 可以这样解决：</span></span><br><span class="line"><span class="keyword">this</span>.$<span class="keyword">set</span>(this.student, "age", 27);</span><br></pre></td></tr></table></figure><h2 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h2><blockquote><p>作用: 实现双向数据绑定</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">action</span>=<span class="string">"/login"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>用户名：<span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.trim</span>=<span class="string">"userName"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"请输入用户名"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>密码：<span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.lazy.trim</span>=<span class="string">"userPassword"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"请输入密码"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>是否关联第三放帐号：<span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"isRelationThirdPartAccNo"</span> <span class="attr">value</span>=<span class="string">"true"</span> <span class="attr">type</span>=<span class="string">"radio"</span>/&gt;</span>是</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"isRelationThirdPartAccNo"</span> <span class="attr">value</span>=<span class="string">"false"</span> <span class="attr">type</span>=<span class="string">"radio"</span>/&gt;</span>否</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"isRelationThirdPartAccNo === 'true'"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"thirdPartAccNos"</span> <span class="attr">value</span>=<span class="string">"wechat"</span> <span class="attr">type</span>=<span class="string">"checbox"</span>/&gt;</span>微信</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"thirdPartAccNos"</span> <span class="attr">value</span>=<span class="string">"email"</span> <span class="attr">type</span>=<span class="string">"checbox"</span>/&gt;</span>邮箱</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"thirdPartAccNos"</span> <span class="attr">value</span>=<span class="string">"qq"</span> <span class="attr">type</span>=<span class="string">"checbox"</span>/&gt;</span>qq</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>地址：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"province"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">disabled</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>请选择您所在省<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in provinces"</span> <span class="attr">:value</span>=<span class="string">"item.code"</span>&gt;</span>&#123;&#123;item.text&#125;&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span>--</span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"city"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">disabled</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>请选择您所在市区<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in cities"</span> <span class="attr">:value</span>=<span class="string">"item.code"</span>&gt;</span>&#123;&#123;item.text&#125;&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>详细地址：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model</span>=<span class="string">"address"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  data () &#123;</span><br><span class="line"><span class="actionscript">    userName: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">    userPassword: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">    isRelationThirdPartAccNo: <span class="string">''</span>,</span></span><br><span class="line">    thirdPartAccNos: [],</span><br><span class="line"><span class="actionscript">    province: <span class="string">''</span>,</span></span><br><span class="line">    provinces: [</span><br><span class="line">      &#123;</span><br><span class="line"><span class="actionscript">        code: <span class="string">'620'</span>,<span class="comment">// 省份代码</span></span></span><br><span class="line"><span class="actionscript">        text: <span class="string">'甘肃'</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line"><span class="actionscript">        code: <span class="string">'320'</span>,<span class="comment">// 省份代码</span></span></span><br><span class="line"><span class="actionscript">        text: <span class="string">'江苏'</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line"><span class="actionscript">    city: <span class="string">''</span>,</span></span><br><span class="line">    cities: [],</span><br><span class="line"><span class="actionscript">    address: <span class="string">''</span></span></span><br><span class="line">  &#125;，</span><br><span class="line">  computed: &#123;</span><br><span class="line">    cities () &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">if</span> (<span class="keyword">this</span>.province === <span class="string">'320'</span>) &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> [</span></span><br><span class="line">          &#123;</span><br><span class="line"><span class="actionscript">            value: <span class="string">'3201'</span>,</span></span><br><span class="line"><span class="actionscript">            text: <span class="string">'南京'</span></span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line"><span class="actionscript">            value: <span class="string">'3202'</span>,</span></span><br><span class="line"><span class="actionscript">            text: <span class="string">'苏州'</span></span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line"><span class="actionscript">            value: <span class="string">'3201'</span>,</span></span><br><span class="line"><span class="actionscript">            text: <span class="string">'常州'</span></span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h2><blockquote><p>作用： 绑定事件监听器</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 方法处理器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 动态事件 (2.6.0+) --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:</span>[<span class="attr">event</span>]=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 内联语句 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"doThat('hello', $event)"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 动态事件缩写 (2.6.0+) --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @[<span class="attr">event</span>]=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 停止冒泡 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 阻止默认行为 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.prevent</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 阻止默认行为，没有表达式 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--  串联修饰符 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop.prevent</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 键修饰符，键别名 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.enter</span>=<span class="string">"onEnter"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 键修饰符，键代码 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.13</span>=<span class="string">"onEnter"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 点击回调只会触发一次 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click.once</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 对象语法 (2.4.0+) --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on</span>=<span class="string">"&#123; mousedown: doThis, mouseup: doThat &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h2><blockquote><p>作用：动态地绑定一个或多个特性，或一个组件 prop 到表达式。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 绑定一个属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">"imageSrc"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 动态特性名 (2.6.0+) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-bind:</span>[<span class="attr">key</span>]=<span class="string">"value"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"imageSrc"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 动态特性名缩写 (2.6.0+) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">:</span>[<span class="attr">key</span>]=<span class="string">"value"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 内联字符串拼接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"'/path/to/images/' + fileName"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- class 绑定 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"&#123; red: isRed &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"[classA, classB]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"[classA, &#123; classB: isB, classC: isC &#125;]"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- style 绑定 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">"&#123; fontSize: size + 'px' &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">"[styleObjectA, styleObjectB]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 绑定一个有属性的对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind</span>=<span class="string">"&#123; id: someProp, 'other-attr': otherProp &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 通过 prop 修饰符绑定 DOM 属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:text-content.prop</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- prop 绑定。“prop”必须在 my-component 中声明。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">:prop</span>=<span class="string">"someThing"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 通过 $props 将父组件的 props 一起传给子组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">child-component</span> <span class="attr">v-bind</span>=<span class="string">"$props"</span>&gt;</span><span class="tag">&lt;/<span class="name">child-component</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- XLink --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">:xlink:special</span>=<span class="string">"foo"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-slot"><a href="#v-slot" class="headerlink" title="v-slot"></a>v-slot</h2><blockquote><p>作用： 为插槽传入 prop 的时候使用</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义一个插槽模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 具名插槽 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"header"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 默认插槽 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"footer"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 向具名插槽提供内容 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">base-layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:header</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Here might be a page title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>A paragraph for the main content.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>And another one.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:footer</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Here's some contact info<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">base-layout</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 渲染结果 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Here might be a page title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>A paragraph for the main content.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>And another one.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Here's some contact info<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>注意： v-slot 只能添加在一个 &lt;template&gt; 上</code></p><h2 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h2><blockquote><p>作用： 跳过这个元素和它的子元素的编译过程</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-pre</span>&gt;</span>&#123;&#123; this will not be compiled &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h2><blockquote><p>作用： 指令保持在元素上直到关联实例结束编译。</p></blockquote><h2 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h2><blockquote><p>作用： 只渲染元素和组件一次。随后的重新渲染，元素/组件及其所有的子节点将被视为静态内容并跳过</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-once</span>&gt;</span>This will never change: &#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js基础算法</title>
      <link href="/2019/10/21/js%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E7%B3%BB%E5%88%971/"/>
      <url>/2019/10/21/js%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E7%B3%BB%E5%88%971/</url>
      
        <content type="html"><![CDATA[<p>js基础算法</p><a id="more"></a><h2 id="实现一个js栈"><a href="#实现一个js栈" class="headerlink" title="实现一个js栈"></a>实现一个js栈</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.items = [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 入栈或者压栈</span></span><br><span class="line">  push(ele) &#123;</span><br><span class="line">    <span class="keyword">this</span>.items.push(ele);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 移除栈顶元素</span></span><br><span class="line">  pop() &#123;</span><br><span class="line">    <span class="keyword">this</span>.items.pop();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回栈顶的元素</span></span><br><span class="line">  peek() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items[<span class="keyword">this</span>.items.length - <span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 判断是否为空</span></span><br><span class="line">  isEmpty() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items.length === <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 长度</span></span><br><span class="line">  size() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.item.length;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sysConvertToBinary</span>(<span class="params">decimal</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> stack = <span class="keyword">new</span> Stack();</span><br><span class="line">  <span class="keyword">let</span> remainder;</span><br><span class="line">  <span class="keyword">while</span> (decimal &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    reminder = decimal % <span class="number">2</span>;</span><br><span class="line">    decimal = <span class="built_in">Math</span>.floor(decimal / <span class="number">2</span>);</span><br><span class="line">    stack.push(remainder);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> str = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">while</span>(!stack.isEmpth()) &#123;</span><br><span class="line">    str += stack.pop();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sysConvertToBinary(<span class="number">101</span>)); <span class="comment">// 110011</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> js算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js数组flat方法</title>
      <link href="/2019/09/09/js%E6%95%B0%E7%BB%84%E6%89%81%E5%B9%B3%E5%8C%96%EF%BC%88flat%EF%BC%89%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/"/>
      <url>/2019/09/09/js%E6%95%B0%E7%BB%84%E6%89%81%E5%B9%B3%E5%8C%96%EF%BC%88flat%EF%BC%89%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>实现js数组flat方法</p><a id="more"></a>]]></content>
      
      
      
        <tags>
            
            <tag> jsApi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剖析并且自己手动编写javascript API</title>
      <link href="/2019/09/09/%E5%89%96%E6%9E%90%E5%B9%B6%E4%B8%94%E8%87%AA%E5%B7%B1%E6%89%8B%E5%8A%A8%E7%BC%96%E5%86%99API/"/>
      <url>/2019/09/09/%E5%89%96%E6%9E%90%E5%B9%B6%E4%B8%94%E8%87%AA%E5%B7%B1%E6%89%8B%E5%8A%A8%E7%BC%96%E5%86%99API/</url>
      
        <content type="html"><![CDATA[<p>自己手动编写jsApi</p><a id="more"></a><h2 id="1-用es5实现数组的map方法"><a href="#1-用es5实现数组的map方法" class="headerlink" title="1.用es5实现数组的map方法"></a>1.用es5实现数组的map方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myMap = <span class="function">(<span class="params">fn, context</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">let</span> mappedArr = [];</span><br><span class="line">   <span class="keyword">let</span> arr = <span class="built_in">Array</span>.prototype.slice.call(<span class="keyword">this</span>);</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">       mappedArr.push(fn.call(context, arr[i], i, <span class="keyword">this</span>));</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> mappedArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-用es5实现数组的reduce方法"><a href="#2-用es5实现数组的reduce方法" class="headerlink" title="2.用es5实现数组的reduce方法"></a>2.用es5实现数组的reduce方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myReduce = <span class="function">(<span class="params">fn, initialValue</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">let</span> arr = <span class="built_in">Array</span>.prototype.slice.call(<span class="keyword">this</span>); </span><br><span class="line">   <span class="keyword">let</span> res = initialValue ? initialValue : arr[<span class="number">0</span>];</span><br><span class="line">   <span class="keyword">let</span> startIndex = initialValue ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">let</span> i = startIndex; i &lt; arr.length; i++) &#123;</span><br><span class="line">       res = fn.call(<span class="literal">null</span>, res, arr[startIndex]);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> mappedArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-实现call-apply"><a href="#3-实现call-apply" class="headerlink" title="3.实现call/apply"></a>3.实现call/apply</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现apply只要把下面的...args 换成 args</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.myCall = <span class="function">(<span class="params">context = <span class="built_in">window</span>, ...args</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">let</span> func = <span class="keyword">this</span>;</span><br><span class="line">   <span class="keyword">let</span> fn = <span class="built_in">Symbol</span>(<span class="string">'fn'</span>);</span><br><span class="line">   context[fn] = func;</span><br><span class="line">   <span class="keyword">let</span> res = context[fn](...args<span class="string">"fn"</span>); <span class="comment">// 相当于 context.caller(...args);</span></span><br><span class="line">   <span class="keyword">delete</span> context[fn];</span><br><span class="line">   <span class="keyword">return</span> res; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-实现对象的Object-create-方法"><a href="#4-实现对象的Object-create-方法" class="headerlink" title="4.实现对象的Object.create()方法"></a>4.实现对象的Object.create()方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.create = <span class="function">(<span class="params">proto</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">    F.prototype = proto;</span><br><span class="line">    F.prototype.constructor = F;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-实现bind方法"><a href="#5-实现bind方法" class="headerlink" title="5.实现bind方法"></a>5.实现bind方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myBind = <span class="function">(<span class="params">context, ...args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> self = <span class="keyword">this</span>;<span class="comment">// 谨记this指向调用bind的函数</span></span><br><span class="line">    <span class="keyword">let</span> fBound = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> self.apply(<span class="keyword">this</span> <span class="keyword">instanceof</span> fBound ? <span class="keyword">this</span> : context || <span class="built_in">window</span>, args);</span><br><span class="line">    &#125;</span><br><span class="line">    fBound.prototype = object.create(<span class="keyword">this</span>.prototype); <span class="comment">// 保证函数原型上的属性不丢失</span></span><br><span class="line">    <span class="keyword">return</span> fBound;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-实现new关键字"><a href="#6-实现new关键字" class="headerlink" title="6.实现new关键字"></a>6.实现new关键字</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myNew</span>(<span class="params">fn, ...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> instance = <span class="built_in">Object</span>.create(fn.prototype);</span><br><span class="line">    <span class="keyword">let</span> res = fn.apply(instance, args);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> res === <span class="string">'object'</span> ? res : instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-实现instanceof的作用"><a href="#7-实现instanceof的作用" class="headerlink" title="7.实现instanceof的作用"></a>7.实现instanceof的作用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myInstanceof</span>(<span class="params">left, right</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> proto = Oject.getPrototypeOf(left);</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (proto === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (proto === right.prototype) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        proto = Oject.getProtypeOf(proto);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-实现单例模式"><a href="#8-实现单例模式" class="headerlink" title="8.实现单例模式"></a>8.实现单例模式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">proxy</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> instance;</span><br><span class="line">    <span class="keyword">let</span> handler = &#123;</span><br><span class="line">        <span class="keyword">constructor</span>(target, args) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!instance) &#123;</span><br><span class="line">                instance = <span class="built_in">Reflect</span>.contructor(fun, args);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Proxy</span>(func, handler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>`</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> jsApi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网易云接口说明文档</title>
      <link href="/2019/09/09/%E7%BD%91%E6%98%93%E4%BA%91%E6%8E%A5%E5%8F%A3%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/"/>
      <url>/2019/09/09/%E7%BD%91%E6%98%93%E4%BA%91%E6%8E%A5%E5%8F%A3%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<p>网易云接口说明文档</p><a id="more"></a><h1 id="NeteaseCloudMusicApi"><a href="#NeteaseCloudMusicApi" class="headerlink" title="NeteaseCloudMusicApi"></a>NeteaseCloudMusicApi</h1><p>网易云音乐 NodeJS 版 API</p><h2 id="灵感来自"><a href="#灵感来自" class="headerlink" title="灵感来自"></a>灵感来自</h2><p><a href="https://github.com/disoul/electron-cloud-music" target="_blank" rel="noopener">disoul/electron-cloud-music</a></p><p><a href="https://github.com/darknessomi/musicbox" target="_blank" rel="noopener">darknessomi/musicbox</a></p><p><a href="https://github.com/sqaiyan/netmusic-node" target="_blank" rel="noopener">sqaiyan/netmusic-node</a></p><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p>跨站请求伪造 (CSRF), 伪造请求头 , 调用官方 API</p><h2 id="功能特性"><a href="#功能特性" class="headerlink" title="功能特性"></a>功能特性</h2><ol><li>登录</li><li>刷新登录</li><li>发送验证码</li><li>校验验证码</li><li>注册(修改密码)</li><li>获取用户信息 , 歌单，收藏，mv, dj 数量</li><li>获取用户歌单</li><li>获取用户电台</li><li>获取用户关注列表</li><li>获取用户粉丝列表</li><li>获取用户动态</li><li>获取用户播放记录</li><li>获取精品歌单</li><li>获取歌单详情</li><li>搜索</li><li>搜索建议</li><li>获取歌词</li><li>歌曲评论</li><li>收藏单曲到歌单</li><li>专辑评论</li><li>歌单评论</li><li>mv 评论</li><li>电台节目评论</li><li>banner</li><li>获取歌曲详情</li><li>获取专辑内容</li><li>获取歌手单曲</li><li>获取歌手 mv</li><li>获取歌手专辑</li><li>获取歌手描述</li><li>获取相似歌手</li><li>获取相似歌单</li><li>相似 mv</li><li>获取相似音乐</li><li>获取最近 5 个听了这首歌的用户</li><li>获取每日推荐歌单</li><li>获取每日推荐歌曲</li><li>私人 FM</li><li>签到</li><li>喜欢音乐</li><li>垃圾桶</li><li>歌单 ( 网友精选碟 )</li><li>新碟上架</li><li>热门歌手</li><li>最新 mv</li><li>推荐 mv</li><li>推荐歌单</li><li>推荐新音乐</li><li>推荐电台</li><li>推荐节目</li><li>独家放送</li><li>mv 排行</li><li>获取 mv 数据</li><li>播放 mv/视频</li><li>排行榜</li><li>歌手榜</li><li>云盘</li><li>电台 - 推荐</li><li>电台 - 分类</li><li>电台 - 分类推荐</li><li>电台 - 订阅</li><li>电台 - 详情</li><li>电台 - 节目</li><li>给评论点赞</li><li>获取动态</li><li>热搜列表(简略)</li><li>发送私信</li><li>发送私信歌单</li><li>新建歌单</li><li>收藏/取消收藏歌单</li><li>歌单分类</li><li>收藏的歌手列表</li><li>订阅的电台列表</li><li>相关歌单推荐</li><li>付费精选接口</li><li>音乐是否可用检查接口</li><li>登录状态</li><li>获取视频播放地址</li><li>发送/删除评论</li><li>热门评论</li><li>视频评论</li><li>退出登录</li><li>所有榜单</li><li>所有榜单内容摘要</li><li>收藏视频</li><li>收藏 MV</li><li>视频详情</li><li>相关视频</li><li>关注用户</li><li>新歌速递</li><li>喜欢音乐列表(无序)</li><li>收藏的 MV 列表</li><li>获取最新专辑</li><li>听歌打卡</li><li>获取视频标签下的视频</li><li>已收藏专辑列表</li><li>获取动态评论</li><li>歌单收藏者列表</li><li>云盘歌曲删除</li><li>热门话题</li><li>电台 - 推荐类型</li><li>电台 - 非热门类型</li><li>电台 - 今日优选</li><li>心动模式/智能播放</li><li>转发动态</li><li>删除动态</li><li>分享歌曲、歌单、mv、电台、电台节目到动态</li><li>通知-私信</li><li>通知-评论</li><li>通知-@我</li><li>通知-通知</li><li>设置</li><li>云盘数据详情</li><li>私信内容</li><li>我的数字专辑</li><li>batch批量请求接口</li><li>获取视频标签列表</li><li>全部mv</li><li>网易出品mv</li><li>收藏/取消收藏专辑</li><li>专辑动态信息</li><li>热搜列表(详细)</li><li>更换绑定手机</li><li>检测手机号码是否已注册</li><li>初始化昵称</li><li>更新歌单描述</li><li>更新歌单名</li><li>更新歌单标签</li><li>默认搜索关键词</li></ol><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> git@github.com:Binaryify/NeteaseCloudMusicApi.git</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install</span></span><br></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> node app.js</span></span><br></pre></td></tr></table></figure><p>服务器启动默认端口为 3000, 若不想使用 3000 端口 , 可使用以下命令 : Mac/Linux</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> PORT=4000 node app.js</span></span><br></pre></td></tr></table></figure><p>windows 下使用 git-bash 或者 cmder 等终端执行以下命令 :</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">set</span> PORT=4000 &amp;&amp; node app.js</span></span><br></pre></td></tr></table></figure><h2 id="可以使用代理"><a href="#可以使用代理" class="headerlink" title="可以使用代理"></a>可以使用代理</h2><p>在 query 参数中加上 proxy=your-proxy 即可让这一次的请求使用 proxy</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例子</span></span><br><span class="line"><span class="keyword">const</span> url = <span class="string">`http://localhost:3000/song/url?id=33894312&amp;proxy=http://121.196.226.246:84`</span></span><br><span class="line">fetch(url).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// do what you want</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="comment">// &#123;"data":[&#123;"id":33894312,"url":"http://m10.music.126.net/20180104125640/930a968b3fb04908b733506b3833e60b/ymusic/0fd6/4f65/43ed/a8772889f38dfcb91c04da915b301617.mp3","br":320000,"size":10691439,"md5":"a8772889f38dfcb91c04da915b301617","code":200,"expi":1200,"type":"mp3","gain":-2.0E-4,"fee":0,"uf":null,"payed":0,"flag":0,"canExtend":false&#125;],"code": 200&#125;</span></span><br></pre></td></tr></table></figure><p>v3.3.0 后支持使用 PAC代理,如 <code>?proxy=http://192.168.0.1/proxy.pac</code></p><h2 id="更新到-v3-0-说明"><a href="#更新到-v3-0-说明" class="headerlink" title="更新到 v3.0 说明"></a>更新到 v3.0 说明</h2><p>!&gt;2018.10.14 更新到 3.0.0,使用了模块化机制,因为部分接口参数和 url 做了调整,如还不想升级到 3.0.0,请查看 <a href="http://binaryify.github.io/NeteaseCloudMusicApi/#/v2" target="_blank" rel="noopener">v2 的文档</a>, <a href="https://github.com/Binaryify/NeteaseCloudMusicApi/blob/master/CHANGELOG.MD" target="_blank" rel="noopener">更新日志</a>, <a href="https://github.com/Binaryify/NeteaseCloudMusicApi/releases/tag/v2.20.5" target="_blank" rel="noopener">2.0+下载地址</a>, 同时 2.0+ 将不再维护</p><h2 id="Docker-容器运行"><a href="#Docker-容器运行" class="headerlink" title="Docker 容器运行"></a>Docker 容器运行</h2><blockquote><p>注意: 在 docker 中运行的时候, 由于使用了 request 来发请求, 所以会检查几个 proxy 相关的环境变量(如下所列), 这些环境变量 会影响到 request 的代理, 详情请参考<a href="https://github.com/request/request#proxies" target="_blank" rel="noopener">request 的文档</a>, 如果这些环境变量 指向的代理不可用, 那么就会造成错误, 所以在使用 docker 的时候一定要注意这些环境变量. 不过, 要是你在 query 中加上了 proxy 参数, 那么环境变量会被覆盖, 就会用你通过 proxy 参数提供的代理了.</p></blockquote><p>request 相关的环境变量</p><ol><li>http_proxy</li><li>https_proxy</li><li>HTTP_PROXY</li><li>HTTPS_PROXY</li><li>no_proxy</li><li>NO_PROXY</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">docker pull binaryify/netease_cloud_music_api</span><br><span class="line"></span><br><span class="line">docker run -d -p 3000:3000 --name netease_cloud_music_api    binaryify/netease_cloud_music_api</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 或者 </span><br><span class="line">docker run -d -p 3000:3000 binaryify/netease_cloud_music_api</span><br><span class="line"></span><br><span class="line">// 去掉或者设置相关的环境变量</span><br><span class="line"></span><br><span class="line">docker run -d -p 3000:3000 --name netease_cloud_music_api -e http_proxy= -e https_proxy= -e no_proxy= -e HTTP_PROXY= -e HTTPS_PROXY= -e NO_PROXY= binaryify/netease_cloud_music_api</span><br><span class="line"></span><br><span class="line">// 或者</span><br><span class="line">docker run -d -p 3000:3000 -e http_proxy= -e https_proxy= -e no_proxy= -e HTTP_PROXY= -e HTTPS_PROXY= -e NO_PROXY= binaryify/netease_cloud_music_api</span><br></pre></td></tr></table></figure><blockquote><p>以下是自行 build docker 镜像方式</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/Binaryify/NeteaseCloudMusicApi &amp;&amp; cd NeteaseCloudMusicApi</span><br><span class="line"></span><br><span class="line">$ sudo docker build . -t netease-music-api</span><br><span class="line"></span><br><span class="line">$ sudo docker run -d -p 3000:3000 netease-music-api</span><br></pre></td></tr></table></figure><h2 id="接口文档"><a href="#接口文档" class="headerlink" title="接口文档"></a>接口文档</h2><h3 id="调用前须知"><a href="#调用前须知" class="headerlink" title="调用前须知"></a>调用前须知</h3><p>!&gt; 本项目不提供线上 demo，请不要轻易信任使用他人提供的公开服务，以免发生安全问题,泄露自己的账号和密码</p><p>!&gt; 为使用方便,降低门槛, 文档示例接口直接使用了 GET 请求,本项目同时支持 GET/POST 请按实际需求使用</p><p>!&gt; 由于接口做了缓存处理 ( 缓存 2 分钟,不缓存数据极容易引起网易服务器高频ip错误 , 可在 app.js 设置 , 可能会导致登陆后获取不到 cookie), <strong>相同的 url</strong> 会在两分钟内只向网易服务器发一次请求 , 如果遇到不需要缓<br>存结果的接口 , 可在请求 url 后面加一个时间戳参数使 url 不同 , 例子 :<br><code>/simi/playlist?id=347230&amp;timestamp=1503019930000</code> (之所以加入缓存机制是因为项目早期没有缓存机制，很多  issues 都是报 IP高频，请按自己需求改造缓存中间件(app.js)，源码不复杂)</p><p>!&gt; 如果是跨域请求 , 请在所有请求带上 <code>xhrFields: { withCredentials: true }</code> (axios 为 <code>withCredentials: true</code>)否则<br>可能会因为没带上 cookie 导致 301, 具体例子可看 <code>public/test.html</code>, 例子使用 jQuery 和 axios </p><p>!&gt; 301 错误基本都是没登录就调用了需要登录的接口,如果登陆了还是提示 301, 基本都是缓存把数据缓存起来了,解决方法是加时间戳或者等待 2 分钟或者重启服务重新登录后再调用接口,可自行改造缓存方法</p><p>!&gt; 部分接口如登录接口不能调用太频繁 , 否则可能会触发 503 错误或者 ip 高频错误 ,若需频繁调用 , 需要准备 IP 代理池 (更新:已加入缓存机制,但仍需注意).</p><p>!&gt; 本项目仅供学习使用,请尊重版权，请勿利用此项目从事商业行为</p><p>!&gt; 文档可能会有缓存 , 如果文档版本和 github 上的版本不一致,请清除缓存再查看</p><p>!&gt; 由于网易限制,此项目在国外服务器上使用会受到限制,如需解决 , 可使用大陆服务器或者使用代理 , 感谢 <a href="https://github.com/hiyangguo" target="_blank" rel="noopener">@hiyangguo</a>提出的<a href="https://github.com/Binaryify/NeteaseCloudMusicApi/issues/29#issuecomment-298358438" target="_blank" rel="noopener">解决方法</a>:<br>在 ‘/util/request.js’ 的 ‘headers’ 处增加 <code>X-Real-IP&#39;:&#39;211.161.244.70&#39; // 任意国内 IP</code><br>即可解决</p><p>!&gt; 图片加上 <code>?param=宽y高</code> 可控制图片尺寸，如 <code>http://p4.music.126.net/JzNK4a5PjjPIXAgVlqEc5Q==/109951164154280311.jpg?param=200y200</code>, <code>http://p4.music.126.net/JzNK4a5PjjPIXAgVlqEc5Q==/109951164154280311.jpg?param=50y50</code></p><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p>说明 : 登录有两个接口</p><h4 id="1-手机登录"><a href="#1-手机登录" class="headerlink" title="1. 手机登录"></a>1. 手机登录</h4><p><strong>必选参数 :</strong> <code>phone</code>: 手机号码 <code>password</code>: 密码</p><p><strong>接口地址 :</strong> <code>/login/cellphone</code></p><p><strong>可选参数 :</strong> <code>countrycode</code>: 国家码，用于国外手机号登陆，例如美国传入：<code>1</code></p><p><strong>调用例子 :</strong> <code>/login/cellphone?phone=xxx&amp;password=yyy</code></p><h4 id="2-邮箱登录"><a href="#2-邮箱登录" class="headerlink" title="2. 邮箱登录"></a>2. 邮箱登录</h4><p>~~ 注意 : 此接口被网易和谐了 , 待修复 , 暂时使用手机登录 (2017.05.20)~~</p><blockquote><p>更新 : 此接口已经可以正常使用(2018.07.03)</p></blockquote><p><strong>必选参数 :</strong> <code>email</code>: 163 网易邮箱<br><code>password</code>: 密码</p><p><strong>接口地址 :</strong> <code>/login</code></p><p><strong>调用例子 :</strong> <a href="mailto:`/login?email=xxx@163.com" target="_blank" rel="noopener">`/login?email=xxx@163.com</a>&amp;password=yyy`</p><p>返回数据如下图 :<br><img src="https://raw.githubusercontent.com/Binaryify/NeteaseCloudMusicApi/master/static/%E7%99%BB%E5%BD%95.png" alt="登录"></p><p>完成登录后 , 会在浏览器保存一个 Cookies 用作登录凭证 , 大部分 API 都需要用到这个<br>Cookies</p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>调用登录接口的速度比调用其他接口慢 , 因为登录过程调用了加密算法</p><h3 id="刷新登录"><a href="#刷新登录" class="headerlink" title="刷新登录"></a>刷新登录</h3><p>说明 : 调用此接口 , 可刷新登录状态</p><p><strong>调用例子 :</strong> <code>/login/refresh</code></p><h3 id="发送验证码"><a href="#发送验证码" class="headerlink" title="发送验证码"></a>发送验证码</h3><p>说明 : 调用此接口 ,传入手机号码, 可发送验证码</p><p><strong>必选参数 :</strong> <code>phone</code>: 手机号码  </p><p><strong>可选参数 :</strong><br><code>ctcode</code>:  国家区号,默认86即中国</p><p><strong>接口地址 :</strong> <code>/captcha/sent</code></p><p><strong>调用例子 :</strong> <code>/captcha/sent?phone=13xxx</code></p><h3 id="验证验证码"><a href="#验证验证码" class="headerlink" title="验证验证码"></a>验证验证码</h3><p>说明 : 调用此接口 ,传入手机号码和验证码, 可校验验证码是否正确</p><p><strong>必选参数 :</strong> <code>phone</code>: 手机号码  </p><p><code>captcha</code>: 验证码</p><p><strong>可选参数 :</strong></p><p><code>ctcode</code>:  国家区号,默认86即中国</p><p><strong>接口地址 :</strong> <code>/captcha/verify</code></p><p><strong>调用例子 :</strong> <code>/captcha/verify?phone=13xxx&amp;captcha=1597</code></p><h3 id="注册-修改密码"><a href="#注册-修改密码" class="headerlink" title="注册(修改密码)"></a>注册(修改密码)</h3><p>说明 : 调用此接口 ,传入手机号码和验证码,密码,昵称, 可注册网易云音乐账号(同时可修改密码)</p><p><strong>必选参数 :</strong> </p><p><code>captcha</code>: 验证码</p><p><code>phone</code> :  手机号码 </p><p><code>password</code>: 密码</p><p><code>nickname</code>: 昵称</p><p><strong>接口地址 :</strong> <code>/register/cellphone</code></p><p><strong>调用例子 :</strong> <code>/register/cellphone?phone=13xxx&amp;password=xxxxx&amp;captcha=1234&amp;nickname=binary1345</code></p><h3 id="检测手机号码是否已注册"><a href="#检测手机号码是否已注册" class="headerlink" title="检测手机号码是否已注册"></a>检测手机号码是否已注册</h3><p>说明 : 调用此接口 ,可检测手机号码是否已注册<br><strong>必选参数 :</strong><br><code>phone</code> :  手机号码  </p><p><strong>接口地址 :</strong> <code>/cellphone/existence/check</code></p><p><strong>调用例子 :</strong> <code>/cellphone/existence/check?phone=13xxx</code></p><h3 id="初始化昵称"><a href="#初始化昵称" class="headerlink" title="初始化昵称"></a>初始化昵称</h3><p>说明 : 刚注册的账号(需登录),调用此接口 ,可初始化昵称<br><strong>必选参数 :</strong><br><code>nickname</code> :  昵称  </p><p><strong>接口地址 :</strong> <code>/activate/initProfile</code></p><p><strong>调用例子 :</strong> <code>/activate/initProfile?nickname=testUser2019</code></p><h3 id="更换绑定手机"><a href="#更换绑定手机" class="headerlink" title="更换绑定手机"></a>更换绑定手机</h3><p>说明 : 调用此接口 ,可更换绑定手机(流程:先发送验证码到原手机号码,再发送验证码到新手机号码然后再调用此接口)</p><p><strong>必选参数 :</strong><br><code>oldcaptcha</code>: 原手机验证码</p><p><code>captcha</code>: 新手机验证码</p><p><code>phone</code> :  手机号码  </p><p><code>ctcode</code> :  国家区号,默认86即中国</p><p><strong>接口地址 :</strong> <code>/rebind</code></p><p><strong>调用例子 :</strong> <code>/rebind?phone=xxx&amp;oldcaptcha=1234&amp;captcha=5678</code></p><h3 id="退出登录"><a href="#退出登录" class="headerlink" title="退出登录"></a>退出登录</h3><p>说明 : 调用此接口 , 可退出登录</p><p><strong>调用例子 :</strong> <code>/logout</code></p><h3 id="登录状态"><a href="#登录状态" class="headerlink" title="登录状态"></a>登录状态</h3><p>说明 : 调用此接口,可获取登录状态</p><p><strong>接口地址 :</strong> <code>/login/status</code><br>返回数据如下图:<br><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fup6q18kk6j316i0nw0wa.jpg" alt="数据"></p><h3 id="获取用户详情"><a href="#获取用户详情" class="headerlink" title="获取用户详情"></a>获取用户详情</h3><p>说明 : 登陆后调用此接口 , 传入用户 id, 可以获取用户详情</p><p><strong>必选参数 :</strong> <code>uid</code> : 用户 id</p><p><strong>接口地址 :</strong> <code>/user/detail</code></p><p><strong>调用例子 :</strong> <code>/user/detail?uid=32953014</code></p><h3 id="获取用户信息-歌单，收藏，mv-dj-数量"><a href="#获取用户信息-歌单，收藏，mv-dj-数量" class="headerlink" title="获取用户信息 , 歌单，收藏，mv, dj 数量"></a>获取用户信息 , 歌单，收藏，mv, dj 数量</h3><p>说明 : 登陆后调用此接口 , 可以获取用户信息</p><p><strong>接口地址 :</strong> <code>/user/subcount</code></p><p><strong>调用例子 :</strong> <code>/user/subcount</code></p><h3 id="更新用户信息"><a href="#更新用户信息" class="headerlink" title="更新用户信息"></a>更新用户信息</h3><p>说明 : 登陆后调用此接口 , 传入相关信息,可以更新用户信息</p><p><strong>必选参数 :</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">gender: 性别 0:保密 1:男性 2:女性</span><br><span class="line"></span><br><span class="line">birthday: 出生日期,时间戳 unix timestamp</span><br><span class="line"></span><br><span class="line">nickname: 用户昵称</span><br><span class="line"></span><br><span class="line">province: 省份id</span><br><span class="line"></span><br><span class="line">city: 城市id</span><br><span class="line"></span><br><span class="line">signature：用户签名</span><br></pre></td></tr></table></figure><p><strong>接口地址 :</strong> <code>/user/update</code></p><p><strong>调用例子 :</strong> <code>/user/update?gender=0&amp;signature=测试签名&amp;city=440300&amp;nickname=binary&amp;birthday=1525918298004&amp;province=440000</code></p><h3 id="获取用户歌单"><a href="#获取用户歌单" class="headerlink" title="获取用户歌单"></a>获取用户歌单</h3><p>说明 : 登陆后调用此接口 , 传入用户 id, 可以获取用户歌单</p><p><strong>必选参数 :</strong> <code>uid</code> : 用户 id</p><p><strong>接口地址 :</strong> <code>/user/playlist</code></p><p><strong>调用例子 :</strong> <code>/user/playlist?uid=32953014</code></p><p>返回数据如下图 :<br><img src="https://raw.githubusercontent.com/Binaryify/NeteaseCloudMusicApi/master/static/%E7%94%A8%E6%88%B7%E6%AD%8C%E5%8D%95.png" alt="用户歌单"></p><h3 id="更新歌单"><a href="#更新歌单" class="headerlink" title="更新歌单"></a>更新歌单</h3><p>说明 : 登陆后调用此接口,可以更新用户歌单<br>参数:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">id:歌单id</span><br><span class="line"></span><br><span class="line">name:歌单名字</span><br><span class="line"></span><br><span class="line">desc:歌单描述</span><br><span class="line"></span><br><span class="line">tags:歌单tag</span><br></pre></td></tr></table></figure><p><strong>接口地址 :</strong> <code>/playlist/update</code></p><p><strong>调用例子 :</strong> <code>/playlist/update?id=24381616&amp;name=新歌单&amp;desc=描述&amp;tags=学习</code></p><h3 id="更新歌单描述"><a href="#更新歌单描述" class="headerlink" title="更新歌单描述"></a>更新歌单描述</h3><p>说明 : 登陆后调用此接口,可以单独更新用户歌单描述<br>参数:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">id:歌单id</span><br><span class="line"></span><br><span class="line">desc:歌单描述</span><br></pre></td></tr></table></figure><p><strong>接口地址 :</strong> <code>/playlist/desc/update</code>  </p><p><strong>调用例子 :</strong> <code>/playlist/desc/update?id=24381616&amp;desc=描述</code>  </p><h3 id="更新歌单名"><a href="#更新歌单名" class="headerlink" title="更新歌单名"></a>更新歌单名</h3><p>说明 : 登陆后调用此接口,可以单独更新用户歌单名<br>参数:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">id: 歌单id</span><br><span class="line"></span><br><span class="line">name: 歌单名</span><br></pre></td></tr></table></figure><p><strong>接口地址 :</strong> <code>/playlist/name/update</code>  </p><p><strong>调用例子 :</strong> <code>/playlist/name/update?id=24381616&amp;name=歌单名</code> </p><h3 id="更新歌单标签"><a href="#更新歌单标签" class="headerlink" title="更新歌单标签"></a>更新歌单标签</h3><p>说明 : 登陆后调用此接口,可以单独更新用户歌单标签<br>参数:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">id: 歌单id</span><br><span class="line"></span><br><span class="line">tags: 歌单标签</span><br></pre></td></tr></table></figure><p><strong>接口地址 :</strong> <code>/playlist/tags/update</code>  </p><p><strong>调用例子 :</strong> <code>/playlist/tags/update?id=24381616&amp;tags=学习</code> </p><h3 id="获取用户电台"><a href="#获取用户电台" class="headerlink" title="获取用户电台"></a>获取用户电台</h3><p>说明 : 登陆后调用此接口 , 传入用户 id, 可以获取用户电台</p><p><strong>必选参数 :</strong> <code>uid</code> : 用户 id</p><p><strong>接口地址 :</strong> <code>/user/dj</code></p><p><strong>调用例子 :</strong> <code>/user/dj?uid=32953014</code></p><h3 id="获取用户关注列表"><a href="#获取用户关注列表" class="headerlink" title="获取用户关注列表"></a>获取用户关注列表</h3><p>说明 : 登陆后调用此接口 , 传入用户 id, 可以获取用户关注列表</p><p><strong>必选参数 :</strong> <code>uid</code> : 用户 id</p><p><strong>可选参数 :</strong></p><p><code>limit</code> : 返回数量 , 默认为 30</p><p><code>offset</code> : 偏移数量，用于分页 , 如<br>: 如 :( 页数 -1)*30, 其中 30 为 limit 的值 , 默认为 0</p><p><strong>接口地址 :</strong> <code>/user/follows</code></p><p><strong>调用例子 :</strong> <code>/user/follows?uid=32953014</code></p><h3 id="获取用户粉丝列表"><a href="#获取用户粉丝列表" class="headerlink" title="获取用户粉丝列表"></a>获取用户粉丝列表</h3><p>说明 : 登陆后调用此接口 , 传入用户 id, 可以获取用户粉丝列表</p><p><strong>必选参数 :</strong> <code>uid</code> : 用户 id  </p><p><strong>可选参数 :</strong> <code>limit</code> : 返回数量 , 默认为 30   </p><p><code>lasttime</code> : 返回数据的 <code>lasttime</code> ,默认-1,传入上一次返回结果的 lasttime,将会返回下一页的数据</p><p><strong>接口地址 :</strong> <code>/user/followeds</code></p><p><strong>调用例子 :</strong> <code>/user/followeds?uid=32953014</code> <code>/user/followeds?uid=416608258&amp;time=1560152549136</code></p><h3 id="获取用户动态"><a href="#获取用户动态" class="headerlink" title="获取用户动态"></a>获取用户动态</h3><p>说明 : 登陆后调用此接口 , 传入用户 id, 可以获取用户动态</p><p><strong>必选参数 :</strong> <code>uid</code> : 用户 id</p><p><strong>可选参数 :</strong> <code>limit</code> : 返回数量 , 默认为 30 </p><p><code>lasttime</code> : 返回数据的 <code>lasttime</code> ,默认-1,传入上一次返回结果的 lasttime,将会返回下一页的数据</p><p><strong>接口地址 :</strong> <code>/user/event</code></p><p><strong>调用例子 :</strong> <code>/user/event?uid=32953014</code>  <code>/user/event?uid=32953014&amp;limit=1&amp;lasttime=1558011138743</code></p><h3 id="转发用户动态"><a href="#转发用户动态" class="headerlink" title="转发用户动态"></a>转发用户动态</h3><p>说明 : 登陆后调用此接口 ,可以转发用户动态</p><p><strong>必选参数 :</strong> <code>uid</code> : 用户 id  </p><p><code>evId</code> : 动态 id  </p><p><code>forwards</code> : 转发的评论</p><p><strong>接口地址 :</strong> <code>/event/forward</code></p><p><strong>调用例子 :</strong> <code>/event/forward?evId=6712917601&amp;uid=32953014&amp;forwards=测试内容</code></p><p>如下图<br><img src="https://ws4.sinaimg.cn/large/006tNc79gy1g2trwz8o2gj31b20r6t9n.jpg" alt><br><img src="https://ws3.sinaimg.cn/large/006tNc79gy1g2trxa0vlej319u0gyjrq.jpg" alt></p><h3 id="删除用户动态"><a href="#删除用户动态" class="headerlink" title="删除用户动态"></a>删除用户动态</h3><p>说明 : 登陆后调用此接口 ,可以删除用户动态</p><p><strong>必选参数 :</strong> <code>evId</code> :  动态 id  </p><p><strong>接口地址 :</strong> <code>/event/del</code></p><p><strong>调用例子 :</strong> <code>/event/del?evId=6712917601</code></p><h3 id="分享歌曲、歌单、mv、电台、电台节目到动态"><a href="#分享歌曲、歌单、mv、电台、电台节目到动态" class="headerlink" title="分享歌曲、歌单、mv、电台、电台节目到动态"></a>分享歌曲、歌单、mv、电台、电台节目到动态</h3><p>说明 : 登陆后调用此接口 ,可以分享歌曲、歌单、mv、电台、电台节目到动态</p><p><strong>必选参数 :</strong> <code>id</code> :   资源 id  （歌曲，歌单，mv，电台，电台节目对应 id）</p><p><strong>可选参数 :</strong> <code>type</code>: 资源类型，默认歌曲 song，可传 <code>song</code>,<code>playlist</code>,<code>mv</code>,<code>djradio</code>,<code>djprogram</code></p><p><code>msg</code>: 内容，140 字限制，支持 emoji，@用户名（<code>/user/follows</code>接口获取的用户名，用户名后和内容应该有空格），图片暂不支持</p><p><strong>接口地址 :</strong> <code>/share/resource</code></p><p><strong>调用例子 :</strong> <code>/share/resource?id=1297494209&amp;msg=测试</code> <code>/share/resource?type=djradio&amp;id=336355127</code> <code>/share/resource?type=djprogram&amp;id=2061034798</code> <code>/share/resource?type=djprogram&amp;id=2061034798&amp;msg=测试@binaryify 测试</code> </p><h3 id="获取动态评论"><a href="#获取动态评论" class="headerlink" title="获取动态评论"></a>获取动态评论</h3><p>说明 : 登陆后调用此接口 , 可以获取动态下评论</p><p><strong>必选参数 :</strong> <code>threadId</code> : 动态 id，可通过 <code>/event</code>，<code>/user/event</code> 接口获取</p><p><strong>接口地址 :</strong> <code>/comment/event</code></p><p><strong>调用例子 :</strong> <code>/comment/event?threadId=A_EV_2_6559519868_32953014</code></p><h3 id="关注-取消关注用户"><a href="#关注-取消关注用户" class="headerlink" title="关注/取消关注用户"></a>关注/取消关注用户</h3><p>说明 : 登陆后调用此接口 , 传入用户 id, 和操作 t,可关注/取消关注用户</p><p><strong>必选参数 :</strong></p><p><code>id</code> : 用户 id</p><p><code>t</code> : <code>1</code>为关注,其他为取消关注</p><p><strong>接口地址 :</strong> <code>/follow</code></p><p><strong>调用例子 :</strong> <code>/follow?id=32953014&amp;t=1</code></p><h3 id="获取用户播放记录"><a href="#获取用户播放记录" class="headerlink" title="获取用户播放记录"></a>获取用户播放记录</h3><p>说明 : 登陆后调用此接口 , 传入用户 id, 可获取用户播放记录</p><p><strong>必选参数 :</strong> <code>uid</code> : 用户 id</p><p><strong>可选参数 :</strong> <code>type</code> : type=1 时只返回 weekData, type=0 时返回 allData</p><p><strong>接口地址 :</strong> <code>/user/record</code></p><p><strong>调用例子 :</strong> <code>/user/record?uid=32953014&amp;type=1</code></p><h3 id="获取热门话题"><a href="#获取热门话题" class="headerlink" title="获取热门话题"></a>获取热门话题</h3><p>说明 : 调用此接口 , 可获取热门话题</p><p><strong>可选参数 :</strong> <code>limit</code>: 取出评论数量 , 默认为 20</p><p><code>offset</code>: 偏移数量 , 用于分页 , 如 :( 评论页数 -1)*20, 其中 20 为 limit 的值</p><p><strong>接口地址 :</strong> <code>/hot/topic</code></p><p><strong>调用例子 :</strong> <code>/hot/topic?limit=30&amp;offset=30</code></p><h3 id="心动模式-智能播放"><a href="#心动模式-智能播放" class="headerlink" title="心动模式/智能播放"></a>心动模式/智能播放</h3><p>说明 : 调用此接口 , 可获取心动模式/智能播放列表<br><strong>必选参数 :</strong> <code>id</code> : 歌曲 id</p><p><code>pid</code> : 歌单 id</p><p><strong>可选参数 :</strong><br><code>sid</code> : 要开始播放的歌曲的 id</p><p><strong>接口地址 :</strong> <code>/playmode/intelligence/list</code></p><p><strong>调用例子 :</strong> <code>/playmode/intelligence/list?id=33894312&amp;pid=24381616</code> , <code>/playmode/intelligence/list?id=33894312&amp;pid=24381616&amp;sid=36871368</code></p><h3 id="获取动态消息"><a href="#获取动态消息" class="headerlink" title="获取动态消息"></a>获取动态消息</h3><p>说明 : 调用此接口 , 可获取各种动态 , 对应网页版网易云，朋友界面里的各种动态消息<br>，如分享的视频，音乐，照片等！</p><p><strong>必选参数 :</strong><br><code>pagesize</code> : 每页数据,默认20</p><p><code>lasttime</code> : 返回数据的 <code>lasttime</code> ,默认-1,传入上一次返回结果的 lasttime,将会返回下一页的数据</p><p><strong>接口地址 :</strong> <code>/event</code></p><p><strong>调用例子 :</strong> <code>/event?pagesize=30&amp;lasttime=1556740526369</code></p><h3 id="歌手分类列表"><a href="#歌手分类列表" class="headerlink" title="歌手分类列表"></a>歌手分类列表</h3><p>说明 : 调用此接口,可获取歌手分类列表<br><strong>必选参数 :</strong> <code>cat</code> : 即 category Code,歌手类型,默认 1001,返回华语男歌手数据<br><strong>可选参数 :</strong></p><p><code>limit</code> : 返回数量 , 默认为 30</p><p><code>offset</code> : 偏移数量，用于分页 , 如<br>: 如 :( 页数 -1)*30, 其中 30 为 limit 的值 , 默认为 0<br><code>initial</code>: 按首字母索引查找参数,如 <code>/artist/list?cat=1001&amp;initial=b</code> 返回内容将以 name 字段开头为 b 或者拼音开头为 b 为顺序排列</p><p>category Code 取值:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">入驻歌手 5001</span><br><span class="line"></span><br><span class="line">华语男歌手 1001</span><br><span class="line"></span><br><span class="line">华语女歌手 1002</span><br><span class="line"></span><br><span class="line">华语组合/乐队 1003</span><br><span class="line"></span><br><span class="line">欧美男歌手 2001</span><br><span class="line"></span><br><span class="line">欧美女歌手 2002</span><br><span class="line"></span><br><span class="line">欧美组合/乐队 2003</span><br><span class="line"></span><br><span class="line">日本男歌手 6001</span><br><span class="line"></span><br><span class="line">日本女歌手 6002</span><br><span class="line"></span><br><span class="line">日本组合/乐队 6003</span><br><span class="line"></span><br><span class="line">韩国男歌手 7001</span><br><span class="line"></span><br><span class="line">韩国女歌手 7002</span><br><span class="line"></span><br><span class="line">韩国组合/乐队 7003</span><br><span class="line"></span><br><span class="line">其他男歌手 4001</span><br><span class="line"></span><br><span class="line">其他女歌手 4002</span><br><span class="line"></span><br><span class="line">其他组合/乐队 4003</span><br></pre></td></tr></table></figure><p><strong>接口地址 :</strong> <code>/artist/list</code></p><p><strong>调用例子 :</strong> <code>/artist/list?cat=1001</code></p><p>返回数据如下图:<br><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fr60g9zps9j31kw1bpk4n.jpg" alt="数据"></p><h3 id="收藏-取消收藏歌手"><a href="#收藏-取消收藏歌手" class="headerlink" title="收藏/取消收藏歌手"></a>收藏/取消收藏歌手</h3><p>说明 : 调用此接口,可收藏歌手</p><p><strong>必选参数 :</strong></p><p><code>artistId</code> : 歌手 id</p><p><code>t</code>:操作,1 为收藏,其他为取消收藏</p><p><strong>接口地址 :</strong> <code>/artist/sub</code></p><p><strong>调用例子 :</strong> <code>/artist/sub?id=6452&amp;t=1</code></p><h3 id="收藏的歌手列表"><a href="#收藏的歌手列表" class="headerlink" title="收藏的歌手列表"></a>收藏的歌手列表</h3><p>说明 : 调用此接口,可获取收藏的歌手列表</p><p><strong>接口地址 :</strong> <code>/artist/sublist</code></p><p><strong>调用例子 :</strong> <code>/artist/sublist</code></p><h3 id="收藏视频"><a href="#收藏视频" class="headerlink" title="收藏视频"></a>收藏视频</h3><p>说明 : 调用此接口,可收藏视频</p><p><strong>必选参数 :</strong></p><p><code>id</code> : 视频 id</p><p><code>t</code> : 1 为收藏,其他为取消收藏</p><p><strong>接口地址 :</strong> <code>/video/sub</code></p><p><strong>调用例子 :</strong> <code>/video/sub</code></p><h3 id="收藏-取消收藏-MV"><a href="#收藏-取消收藏-MV" class="headerlink" title="收藏/取消收藏 MV"></a>收藏/取消收藏 MV</h3><p>说明 : 调用此接口,可收藏/取消收藏 MV</p><p><strong>必选参数 :</strong></p><p><code>id</code> : MV id</p><p><code>t</code> : 1 为收藏,其他为取消收藏</p><p><strong>接口地址 :</strong> <code>/mv/sub</code></p><p><strong>调用例子 :</strong> <code>/mv/sub</code></p><h3 id="收藏的-MV-列表"><a href="#收藏的-MV-列表" class="headerlink" title="收藏的 MV 列表"></a>收藏的 MV 列表</h3><p>说明 : 调用此接口,可获取收藏的 MV 列表</p><p><strong>接口地址 :</strong> <code>/mv/sublist</code></p><p><strong>调用例子 :</strong> <code>/mv/sublist</code></p><h3 id="歌单分类"><a href="#歌单分类" class="headerlink" title="歌单分类"></a>歌单分类</h3><p>说明 : 调用此接口,可获取歌单分类,包含 category 信息</p><p><strong>接口地址 :</strong> <code>/playlist/catlist</code></p><p><strong>调用例子 :</strong> <code>/playlist/catlist</code></p><h3 id="热门歌单分类"><a href="#热门歌单分类" class="headerlink" title="热门歌单分类"></a>热门歌单分类</h3><p>说明 : 调用此接口,可获取歌单分类,包含 category 信息</p><p><strong>接口地址 :</strong> <code>/playlist/hot</code></p><p><strong>调用例子 :</strong> <code>/playlist/hot</code></p><h3 id="歌单-网友精选碟"><a href="#歌单-网友精选碟" class="headerlink" title="歌单 ( 网友精选碟 )"></a>歌单 ( 网友精选碟 )</h3><p>说明 : 调用此接口 , 可获取网友精选碟歌单</p><p><strong>可选参数 :</strong> <code>order</code>: 可选值为 ‘new’ 和 ‘hot’, 分别对应最新和最热 , 默认为<br>‘hot’</p><p><code>cat</code>:<code>cat</code>: tag, 比如 “ 华语 “、” 古风 “ 、” 欧美 “、” 流行 “, 默认为<br>“全部”,可从歌单分类接口获取(/playlist/catlist)</p><p><strong>接口地址 :</strong> <code>/top/playlist</code></p><p><strong>调用例子 :</strong> <code>/top/playlist?limit=10&amp;order=new</code></p><p>返回数据如下图 :</p><p><img src="https://raw.githubusercontent.com/Binaryify/NeteaseCloudMusicApi/master/static/top_playlist.png" alt="精选碟"></p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fr3wnpyg6jj317e0vcqdc.jpg" alt="对应位置"></p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fr3wqs5lw9j31ic1re4c4.jpg" alt="返回数据"></p><h3 id="获取精品歌单"><a href="#获取精品歌单" class="headerlink" title="获取精品歌单"></a>获取精品歌单</h3><p>说明 : 调用此接口 , 可获取精品歌单</p><p><strong>可选参数 :</strong> <code>cat</code>: tag, 比如 “ 华语 “、” 古风 “ 、” 欧美 “、” 流行 “, 默认为<br>“全部”,可从歌单分类接口获取(/playlist/catlist)</p><p><code>limit</code>: 取出歌单数量 , 默认为 20</p><p><code>before</code>: 分页参数,取上一页最后一个歌单的 <code>updateTime</code> 获取下一页数据</p><p><strong>接口地址 :</strong> <code>/top/playlist/highquality</code></p><p><strong>调用例子 :</strong> <code>http://localhost:3000/top/playlist/highquality?before=1503639064232&amp;limit=3</code></p><h3 id="相关歌单推荐"><a href="#相关歌单推荐" class="headerlink" title="相关歌单推荐"></a>相关歌单推荐</h3><p>说明 : 调用此接口,传入歌单 id 可获取相关歌单(对应页面 <a href="https://music.163.com/#/playlist?id=1" target="_blank" rel="noopener">https://music.163.com/#/playlist?id=1</a>)</p><p><strong>必选参数 :</strong> <code>id</code> : 歌单 id</p><p><strong>接口地址 :</strong> <code>/related/playlist</code></p><p><strong>调用例子 :</strong> <code>/related/playlist?id=1</code></p><h3 id="获取歌单详情"><a href="#获取歌单详情" class="headerlink" title="获取歌单详情"></a>获取歌单详情</h3><p>说明 : 歌单能看到歌单名字 , 但看不到具体歌单内容 , 调用此接口 , 传入歌单 id, 可<br>以获取对应歌单内的所有的音乐，但是返回的trackIds是完整的，tracks 则是不完整的，可拿全部 trackIds 请求一次 <code>song/detail</code> 接口获取所有歌曲的详情 (<a href="https://github.com/Binaryify/NeteaseCloudMusicApi/issues/452" target="_blank" rel="noopener">https://github.com/Binaryify/NeteaseCloudMusicApi/issues/452</a>)</p><p><strong>必选参数 :</strong> <code>id</code> : 歌单 id</p><p><strong>可选参数 :</strong> <code>s</code> : 歌单最近的 s 个收藏者</p><p><strong>接口地址 :</strong> <code>/playlist/detail</code></p><p><strong>调用例子 :</strong> <code>/playlist/detail?id=24381616</code></p><p>返回数据如下图 :<br><img src="https://raw.githubusercontent.com/Binaryify/NeteaseCloudMusicApi/master/static/%E6%AD%8C%E5%8D%95%E8%AF%A6%E6%83%85.png" alt="歌单详情"></p><h3 id="获取音乐-url"><a href="#获取音乐-url" class="headerlink" title="获取音乐 url"></a>获取音乐 url</h3><p>说明 : 使用歌单详情接口后 , 能得到的音乐的 id, 但不能得到的音乐 url, 调用此接口<br>, 传入的音乐 id( 可多个 , 用逗号隔开 ), 可以获取对应的音乐的 url( 不需要登录 )</p><blockquote><p>注 : 部分用户反馈获取的 url 会 403,<a href="https://github.com/hwaphon" target="_blank" rel="noopener">hwaphon</a>找到的<br>解决方案是当获取到音乐的 id 后，将<br><a href="https://music.163.com/song/media/outer/url?id=id.mp3" target="_blank" rel="noopener">https://music.163.com/song/media/outer/url?id=id.mp3</a> 以 src 赋予 Audio 即可播放</p></blockquote><p><strong>必选参数 :</strong> <code>id</code> : 音乐 id</p><p><strong>可选参数 :</strong> <code>br</code>: 码率,默认设置了 999000 即最大码率,如果要 320k 则可设置为 320000,其他类推</p><p><strong>接口地址 :</strong> <code>/song/url</code></p><p><strong>调用例子 :</strong> <code>/song/url?id=33894312</code> <code>/song/url?id=405998841,33894312</code></p><p>返回数据如下图 :<br><img src="https://raw.githubusercontent.com/Binaryify/NeteaseCloudMusicApi/master/static/%E9%9F%B3%E4%B9%90%20url.png" alt="音乐 url"></p><h3 id="音乐是否可用"><a href="#音乐是否可用" class="headerlink" title="音乐是否可用"></a>音乐是否可用</h3><p>说明: 调用此接口,传入歌曲 id, 可获取音乐是否可用,返回 <code>{ success: true, message: &#39;ok&#39; }</code> 或者 <code>{ success: false, message: &#39;亲爱的,暂无版权&#39; }</code></p><p><strong>必选参数 :</strong> <code>id</code> : 歌曲 id</p><p><strong>可选参数</strong> : <code>br</code>: 码率,默认设置了 999000 即最大码率,如果要 320k 则可设置为 320000,其他类推</p><p><strong>接口地址 :</strong> <code>/check/music</code></p><p><strong>调用例子 :</strong> <code>/check/music?id=33894312</code></p><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>说明 : 调用此接口 , 传入搜索关键词可以搜索该音乐 / 专辑 / 歌手 / 歌单 / 用户 ,<br>关键词可以多个 , 以空格隔开 , 如 “ 周杰伦 搁浅 “( 不需要登录 ), 搜索获取的<br>mp3url 不能直接用 , 可通过 <code>/song/url</code> 接口传入歌曲 id 获取具体的播放链接</p><p><strong>必选参数 :</strong> <code>keywords</code> : 关键词</p><p><strong>可选参数 :</strong> <code>limit</code> : 返回数量 , 默认为 30 <code>offset</code> : 偏移数量，用于分页 , 如<br>: 如 :( 页数 -1)*30, 其中 30 为 limit 的值 , 默认为 0</p><p><code>type</code>: 搜索类型；默认为 1 即单曲 , 取值意义 : 1: 单曲, 10: 专辑, 100: 歌手, 1000:<br>歌单, 1002: 用户, 1004: MV, 1006: 歌词, 1009: 电台, 1014: 视频, 1018:综合</p><p><strong>接口地址 :</strong> <code>/search</code></p><p><strong>调用例子 :</strong> <code>/search?keywords= 海阔天空</code></p><p>返回数据如下图 :<br><img src="https://raw.githubusercontent.com/Binaryify/NeteaseCloudMusicApi/master/static/%E6%90%9C%E7%B4%A2.png" alt="搜索音乐"></p><h3 id="默认搜索关键词"><a href="#默认搜索关键词" class="headerlink" title="默认搜索关键词"></a>默认搜索关键词</h3><p>说明 : 调用此接口 , 可获取默认搜索关键词</p><p><strong>接口地址 :</strong> <code>/search/default</code></p><h3 id="热搜列表-简略"><a href="#热搜列表-简略" class="headerlink" title="热搜列表(简略)"></a>热搜列表(简略)</h3><p>说明 : 调用此接口,可获取热门搜索列表</p><p><strong>接口地址 :</strong> <code>/search/hot</code></p><p><strong>调用例子 :</strong> <code>/search/hot</code></p><h3 id="热搜列表-详细"><a href="#热搜列表-详细" class="headerlink" title="热搜列表(详细)"></a>热搜列表(详细)</h3><p>说明 : 调用此接口,可获取热门搜索列表</p><p><strong>接口地址 :</strong> <code>/search/hot/detail</code></p><p><strong>调用例子 :</strong> <code>/search/hot/detail</code></p><h3 id="搜索建议"><a href="#搜索建议" class="headerlink" title="搜索建议"></a>搜索建议</h3><p>说明 : 调用此接口 , 传入搜索关键词可获得搜索建议 , 搜索结果同时包含单曲 , 歌手 ,<br>歌单 ,mv 信息</p><p><strong>必选参数 :</strong> <code>keywords</code> : 关键词</p><p><strong>可选参数 :</strong> <code>type</code> : 如果传 ‘mobile’ 则返回移动端数据</p><p><strong>接口地址 :</strong> <code>/search/suggest</code></p><p><strong>调用例子 :</strong> <code>/search/suggest?keywords= 海阔天空</code> <code>/search/suggest?keywords= 海阔天空&amp;type=mobile</code></p><h3 id="搜索多重匹配"><a href="#搜索多重匹配" class="headerlink" title="搜索多重匹配"></a>搜索多重匹配</h3><p>说明 : 调用此接口 , 传入搜索关键词可获得搜索结果</p><p><strong>必选参数 :</strong> <code>keywords</code> : 关键词</p><p><strong>接口地址 :</strong> <code>/search/multimatch</code></p><p><strong>调用例子 :</strong> <code>/search/multimatch?keywords= 海阔天空</code></p><h3 id="新建歌单"><a href="#新建歌单" class="headerlink" title="新建歌单"></a>新建歌单</h3><p>说明 : 调用此接口 , 传入歌单名字可新建歌单</p><p><strong>必选参数 :</strong> <code>name</code> : 歌单名</p><p><strong>可选参数 :</strong> <code>privacy</code> : 是否设置为隐私歌单，默认否，传’10’则设置成隐私歌单</p><p><strong>接口地址 :</strong> <code>/playlist/create</code></p><p><strong>调用例子 :</strong> <code>/playlist/create?name=测试歌单</code></p><p>返回数据如下图:<br><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fr3va885z5j31a617qwjy.jpg" alt="数据"></p><h3 id="收藏-取消收藏歌单"><a href="#收藏-取消收藏歌单" class="headerlink" title="收藏/取消收藏歌单"></a>收藏/取消收藏歌单</h3><p>说明 : 调用此接口 , 传入类型和歌单 id 可收藏歌单或者取消收藏歌单</p><p><strong>必选参数 :</strong></p><p><code>t</code> : 类型,1:收藏,2:取消收藏<br><code>id</code> : 歌单 id</p><p><strong>接口地址 :</strong> <code>/playlist/subscribe</code></p><p><strong>调用例子 :</strong> <code>/playlist/subscribe?t=1&amp;id=106697785</code> <code>/playlist/subscribe?t=2&amp;id=106697785</code></p><p>返回数据如下图:<br><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fr3vdwx0hvj30s405u74b.jpg" alt="数据"></p><h3 id="歌单收藏者"><a href="#歌单收藏者" class="headerlink" title="歌单收藏者"></a>歌单收藏者</h3><p>说明 : 调用此接口 , 传入歌单 id 可获取歌单的所有收藏者<br><strong>必选参数 :</strong></p><p><code>id</code> : 歌单 id</p><p><strong>可选参数 :</strong> <code>limit</code>: 取出评论数量 , 默认为 20</p><p><code>offset</code>: 偏移数量 , 用于分页 , 如 :( 评论页数 -1)*20, 其中 20 为 limit 的值</p><p><strong>接口地址 :</strong> <code>/playlist/subscribers</code></p><p><strong>调用例子 :</strong> <code>/playlist/subscribers?id=544215255&amp;limit=30</code></p><h3 id="对歌单添加或删除歌曲"><a href="#对歌单添加或删除歌曲" class="headerlink" title="对歌单添加或删除歌曲"></a>对歌单添加或删除歌曲</h3><p>说明 : 调用此接口 , 可以添加歌曲到歌单或者从歌单删除某首歌曲 ( 需要登录 )</p><p><strong>必选参数 :</strong></p><p><code>op</code>: 从歌单增加单曲为 add, 删除为 del</p><p><code>pid</code>: 歌单 id<br><code>tracks</code>: 歌曲 id,可多个,用逗号隔开</p><p><strong>接口地址 :</strong> <code>/playlist/tracks</code></p><p><strong>调用例子 :</strong> <code>/playlist/tracks?op=add&amp;pid=24381616&amp;tracks=347231</code> ( 对应把歌曲添加到 ‘ 我 ‘ 的歌单 , 测试的时候请把这里的 pid 换成你自己的, id 和 tracks 不对可能会报 502 错误)</p><h3 id="获取歌词"><a href="#获取歌词" class="headerlink" title="获取歌词"></a>获取歌词</h3><p>说明 : 调用此接口 , 传入音乐 id 可获得对应音乐的歌词 ( 不需要登录 )</p><p><strong>必选参数 :</strong> <code>id</code>: 音乐 id</p><p><strong>接口地址 :</strong> <code>/lyric</code></p><p><strong>调用例子 :</strong> <code>/lyric?id=33894312</code></p><p>返回数据如下图 :<br><img src="https://raw.githubusercontent.com/Binaryify/NeteaseCloudMusicApi/master/static/%E6%AD%8C%E8%AF%8D.png" alt="获取歌词"></p><h3 id="新歌速递"><a href="#新歌速递" class="headerlink" title="新歌速递"></a>新歌速递</h3><p>说明 : 调用此接口 , 可获取新歌速递</p><p><strong>必选参数 :</strong></p><p><code>type</code>: 地区类型 id,对应以下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">全部:0</span><br><span class="line"></span><br><span class="line">华语:7</span><br><span class="line"></span><br><span class="line">欧美:96</span><br><span class="line"></span><br><span class="line">日本:8</span><br><span class="line"></span><br><span class="line">韩国:16</span><br></pre></td></tr></table></figure><p><strong>接口地址 :</strong> <code>/top/song</code></p><p><strong>调用例子 :</strong> <code>/top/song?type=96</code></p><h3 id="歌曲评论"><a href="#歌曲评论" class="headerlink" title="歌曲评论"></a>歌曲评论</h3><p>说明 : 调用此接口 , 传入音乐 id 和 limit 参数 , 可获得该音乐的所有评论 ( 不需要<br>登录 )</p><p><strong>必选参数 :</strong> <code>id</code>: 音乐 id</p><p><strong>可选参数 :</strong> <code>limit</code>: 取出评论数量 , 默认为 20</p><p><code>offset</code>: 偏移数量 , 用于分页 , 如 :( 评论页数 -1)*20, 其中 20 为 limit 的值  </p><p><code>before</code>: 分页参数,取上一页最后一项的 <code>time</code> 获取下一页数据(获取超过5000条评论的时候需要用到)</p><p><strong>接口地址 :</strong> <code>/comment/music</code></p><p><strong>调用例子 :</strong> <code>/comment/music?id=186016&amp;limit=1</code> 对应晴天评论</p><p>返回数据如下图 :<br><img src="https://raw.githubusercontent.com/Binaryify/NeteaseCloudMusicApi/master/static/comment.png" alt="获取评论"></p><h3 id="专辑评论"><a href="#专辑评论" class="headerlink" title="专辑评论"></a>专辑评论</h3><p>说明 : 调用此接口 , 传入音乐 id 和 limit 参数 , 可获得该专辑的所有评论 ( 不需要<br>登录 )</p><p><strong>必选参数 :</strong> <code>id</code>: 专辑 id</p><p><strong>可选参数 :</strong> <code>limit</code>: 取出评论数量 , 默认为 20</p><p><code>offset</code>: 偏移数量 , 用于分页 , 如 :( 评论页数 -1)*20, 其中 20 为 limit 的值  </p><p><code>before</code>: 分页参数,取上一页最后一项的 <code>time</code> 获取下一页数据(获取超过5000条评论的时候需要用到)  </p><p><strong>接口地址 :</strong> <code>/comment/album</code></p><p><strong>调用例子 :</strong> <code>/comment/album?id=32311</code></p><h3 id="歌单评论"><a href="#歌单评论" class="headerlink" title="歌单评论"></a>歌单评论</h3><p>说明 : 调用此接口 , 传入音乐 id 和 limit 参数 , 可获得该歌单的所有评论 ( 不需要<br>登录 )</p><p><strong>必选参数 :</strong> <code>id</code>: 歌单 id</p><p><strong>可选参数 :</strong> <code>limit</code>: 取出评论数量 , 默认为 20</p><p><code>offset</code>: 偏移数量 , 用于分页 , 如 :( 评论页数 -1)*20, 其中 20 为 limit 的值  </p><p><code>before</code>: 分页参数,取上一页最后一项的 <code>time</code> 获取下一页数据(获取超过5000条评论的时候需要用到)</p><p><strong>接口地址 :</strong> <code>/comment/playlist</code></p><p><strong>调用例子 :</strong> <code>/comment/playlist?id=705123491</code></p><h3 id="mv-评论"><a href="#mv-评论" class="headerlink" title="mv 评论"></a>mv 评论</h3><p>说明 : 调用此接口 , 传入音乐 id 和 limit 参数 , 可获得该 mv 的所有评论 ( 不需要<br>登录 )</p><p><strong>必选参数 :</strong> <code>id</code>: mv id</p><p><strong>可选参数 :</strong> <code>limit</code>: 取出评论数量 , 默认为 20</p><p><code>offset</code>: 偏移数量 , 用于分页 , 如 :( 评论页数 -1)*20, 其中 20 为 limit 的值  </p><p><code>before</code>: 分页参数,取上一页最后一项的 <code>time</code> 获取下一页数据(获取超过5000条评论的时候需要用到)</p><p><strong>接口地址 :</strong> <code>/comment/mv</code></p><p><strong>调用例子 :</strong> <code>/comment/mv?id=5436712</code></p><h3 id="电台节目评论"><a href="#电台节目评论" class="headerlink" title="电台节目评论"></a>电台节目评论</h3><p>说明 : 调用此接口 , 传入音乐 id 和 limit 参数 , 可获得该 电台节目 的所有评论 (<br>不需要登录 )</p><p><strong>必选参数 :</strong> <code>id</code>: 电台节目的 id</p><p><strong>可选参数 :</strong> <code>limit</code>: 取出评论数量 , 默认为 20</p><p><code>offset</code>: 偏移数量 , 用于分页 , 如 :( 评论页数 -1)*20, 其中 20 为 limit 的值  </p><p><code>before</code>: 分页参数,取上一页最后一项的 <code>time</code> 获取下一页数据(获取超过5000条评论的时候需要用到)</p><p><strong>接口地址 :</strong> <code>/comment/dj</code></p><p><strong>调用例子 :</strong> <code>/comment/dj?id=794062371</code></p><h3 id="视频评论"><a href="#视频评论" class="headerlink" title="视频评论"></a>视频评论</h3><p>说明 : 调用此接口 , 传入音乐 id 和 limit 参数 , 可获得该 视频 的所有评论 (<br>不需要登录 )</p><p><strong>必选参数 :</strong> <code>id</code>: 视频的 id</p><p><strong>可选参数 :</strong> <code>limit</code>: 取出评论数量 , 默认为 20</p><p><code>offset</code>: 偏移数量 , 用于分页 , 如 :( 评论页数 -1)*20, 其中 20 为 limit 的值  </p><p><code>before</code>: 分页参数,取上一页最后一项的 <code>time</code> 获取下一页数据(获取超过5000条评论的时候需要用到)</p><p><strong>接口地址 :</strong> <code>/comment/video</code></p><p><strong>调用例子 :</strong> <code>/comment/video?id=89ADDE33C0AAE8EC14B99F6750DB954D</code></p><h3 id="热门评论"><a href="#热门评论" class="headerlink" title="热门评论"></a>热门评论</h3><p>说明 : 调用此接口 , 传入 type, 资源 id 可获得对应资源热门评论 ( 不需要登录 )</p><p><strong>必选参数 :</strong></p><p><code>id</code> : 资源 id</p><p><code>tpye</code>: 数字 , 资源类型 , 对应歌曲 , mv, 专辑 , 歌单 , 电台, 视频对应以下类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">0: 歌曲</span><br><span class="line"></span><br><span class="line">1: mv</span><br><span class="line"></span><br><span class="line">2: 歌单</span><br><span class="line"></span><br><span class="line">3: 专辑</span><br><span class="line"></span><br><span class="line">4: 电台</span><br><span class="line"></span><br><span class="line">5: 视频</span><br></pre></td></tr></table></figure><p><strong>可选参数 :</strong> <code>limit</code>: 取出评论数量 , 默认为 20</p><p><code>offset</code>: 偏移数量 , 用于分页 , 如 :( 评论页数 -1)*20, 其中 20 为 limit 的值  </p><p><code>before</code>: 分页参数,取上一页最后一项的 <code>time</code> 获取下一页数据(获取超过5000条评论的时候需要用到)</p><p><strong>接口地址 :</strong> <code>/comment/hot</code></p><p><strong>调用例子 :</strong> <code>/comment/hot?id=186016&amp;type=0</code></p><h3 id="给评论点赞"><a href="#给评论点赞" class="headerlink" title="给评论点赞"></a>给评论点赞</h3><p>说明 : 调用此接口 , 传入 type, 资源 id, 和评论 id cid 和 是否点赞参数 t 即可给对<br>应评论点赞 ( 需要登录 )</p><p><strong>必选参数 :</strong> <code>id</code> : 资源 id, 如歌曲 id,mv id</p><p><code>cid</code> : 评论 id</p><p><code>t</code> : 是否点赞 ,1 为点赞 ,0 为取消点赞</p><p><code>tpye</code>: 数字 , 资源类型 , 对应歌曲 , mv, 专辑 , 歌单 , 电台, 视频对应以下类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">0: 歌曲</span><br><span class="line"></span><br><span class="line">1: mv</span><br><span class="line"></span><br><span class="line">2: 歌单</span><br><span class="line"></span><br><span class="line">3: 专辑</span><br><span class="line"></span><br><span class="line">4: 电台</span><br><span class="line"></span><br><span class="line">5: 视频</span><br><span class="line"></span><br><span class="line">6: 动态</span><br></pre></td></tr></table></figure><p><strong>接口地址 :</strong> <code>comment/like</code></p><p><strong>调用例子 :</strong> <code>/comment/like?id=29178366&amp;cid=12840183&amp;t=1&amp;type=0</code> 对应给 <a href="https://music.163.com/#/song?id=29178366" target="_blank" rel="noopener">https://music.163.com/#/song?id=29178366</a> 最热门的评论点赞</p><p>注意： 动态点赞不需要传入 id 参数，需要传入动态的 <code>threadId</code>  参数,如：<code>/comment/like?type=6&amp;cid=1419532712&amp;threadId=A_EV_2_6559519868_32953014&amp;t=0</code>， <code>threadId</code> 可通过 <code>/event</code>，<code>/user/event</code> 接口获取</p><h3 id="发送-删除评论"><a href="#发送-删除评论" class="headerlink" title="发送/删除评论"></a>发送/删除评论</h3><p>说明 : 调用此接口,可发送评论或者删除评论</p><p><strong>接口地址 :</strong> <code>/comment</code></p><ol><li><p>发送评论</p><p><strong>必选参数</strong></p><p><code>t</code>:1 发送</p><p><code>tpye</code>: 数字,资源类型,对应歌曲,mv,专辑,歌单,电台,视频对应以下类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">0: 歌曲</span><br><span class="line"></span><br><span class="line">1: mv</span><br><span class="line"></span><br><span class="line">2: 歌单</span><br><span class="line"></span><br><span class="line">3: 专辑</span><br><span class="line"></span><br><span class="line">4: 电台</span><br><span class="line"></span><br><span class="line">5: 视频</span><br><span class="line"></span><br><span class="line">6: 动态</span><br></pre></td></tr></table></figure><p><code>id</code>:对应资源 id</p><p><code>content</code> :要发送的内容</p><p><strong>调用例子</strong> : <code>/comment?t=1&amp;type=1&amp;id=5436712&amp;content=test</code> (往广岛之恋 mv 发送评论: test)</p><p>注意：如给动态发送评论，则不需要传 id，需要传动态的 <code>threadId</code>,如：<code>/comment?t=1&amp;type=6&amp;threadId=A_EV_2_6559519868_32953014&amp;content=test</code></p></li><li><p>删除评论</p><p><strong>必选参数</strong></p><p><code>t</code>:0 删除</p><p><code>tpye</code>: 数字,资源类型,对应歌曲,mv,专辑,歌单,电台,视频对应以下类型  </p></li></ol>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">0: 歌曲</span><br><span class="line"></span><br><span class="line">1: mv</span><br><span class="line"></span><br><span class="line">2: 歌单</span><br><span class="line"></span><br><span class="line">3: 专辑</span><br><span class="line"></span><br><span class="line">4: 电台</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5: 视频</span><br><span class="line"></span><br><span class="line">6: 动态</span><br></pre></td></tr></table></figure><p>   <code>id</code>:对应资源 id<br>   <code>content</code> :内容 id,可通过 <code>/comment/mv</code> 等接口获取</p><p>   <strong>调用例子</strong> : <code>/comment?t=0&amp;type=1&amp;id=5436712&amp;commentId=1535550516319</code> (在广岛之恋 mv 删除评论)</p><pre><code>注意：如给动态删除评论，则不需要传 id，需要传动态的 `threadId`,如：`/comment?t=0&amp;type=6&amp;threadId=A_EV_2_6559519868_32953014&amp;commentId=1419516382`</code></pre><h3 id="banner"><a href="#banner" class="headerlink" title="banner"></a>banner</h3><p>说明 : 调用此接口 , 可获取 banner( 轮播图 ) 数据</p><p><strong>可选参数 :</strong></p><p><code>type</code>:资源类型,对应以下类型,默认为 0 即PC</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0: pc</span><br><span class="line"></span><br><span class="line">1: android</span><br><span class="line"></span><br><span class="line">2: iphone</span><br><span class="line"></span><br><span class="line">3: ipad</span><br></pre></td></tr></table></figure><p><strong>接口地址 :</strong> <code>/banner</code></p><p><strong>调用例子 :</strong> <code>/banner</code>, <code>/banner?type=2</code></p><h3 id="资源点赞-MV-电台-视频"><a href="#资源点赞-MV-电台-视频" class="headerlink" title="资源点赞( MV,电台,视频)"></a>资源点赞( MV,电台,视频)</h3><p>说明 : 调用此接口 , 可对 MV,电台,视频点赞</p><p><strong>必选参数 :</strong></p><p><code>type</code>:资源类型,对应以下类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1: mv</span><br><span class="line"></span><br><span class="line">4: 电台</span><br><span class="line"></span><br><span class="line">5: 视频</span><br><span class="line"></span><br><span class="line">6: 动态</span><br></pre></td></tr></table></figure><p><code>t</code>: 操作,1 为点赞,其他未取消点赞</p><p><code>id</code>: 资源 id</p><p><strong>接口地址 :</strong> <code>/resource/like</code></p><p><strong>调用例子 :</strong> <code>/resource/like?t=1&amp;type=1&amp;id=5436712</code></p><p>注意：如给动态点赞，不需要传入 id，需要传入 <code>threadId</code>,可通过 <code>event</code>,<code>/user/event</code> 接口获取，如：<br><code>/resource/like?t=1&amp;type=6&amp;threadId=A_EV_2_6559519868_32953014</code></p><h3 id="获取歌曲详情"><a href="#获取歌曲详情" class="headerlink" title="获取歌曲详情"></a>获取歌曲详情</h3><p>说明 : 调用此接口 , 传入音乐 id(支持多个 id, 用 <code>,</code> 隔开), 可获得歌曲详情(注意:歌曲封面现在需要通过专辑内容接口获取)</p><p><strong>必选参数 :</strong> <code>ids</code>: 音乐 id, 如 <code>ids=347230</code></p><p><strong>接口地址 :</strong> <code>/song/detail</code></p><p><strong>调用例子 :</strong> <code>/song/detail?ids=347230</code>,<code>/song/detail?ids=347230,347231</code></p><p>返回数据如下图 :<br><img src="https://raw.githubusercontent.com/Binaryify/NeteaseCloudMusicApi/master/static/songDetail.png" alt="获取歌曲详情"></p><h3 id="获取专辑内容"><a href="#获取专辑内容" class="headerlink" title="获取专辑内容"></a>获取专辑内容</h3><p>说明 : 调用此接口 , 传入专辑 id, 可获得专辑内容</p><p><strong>必选参数 :</strong> <code>id</code>: 专辑 id</p><p><strong>接口地址 :</strong> <code>/album</code></p><p><strong>调用例子 :</strong> <code>/album?id=32311</code></p><p>返回数据如下图 :<br><img src="https://raw.githubusercontent.com/Binaryify/NeteaseCloudMusicApi/master/static/%E4%B8%93%E8%BE%91.png" alt="获取专辑内容"></p><h3 id="专辑动态信息"><a href="#专辑动态信息" class="headerlink" title="专辑动态信息"></a>专辑动态信息</h3><p>说明 : 调用此接口 , 传入专辑 id, 可获得专辑动态信息,如是否收藏,收藏数,评论数,分享数</p><p><strong>必选参数 :</strong> <code>id</code>: 专辑 id</p><p><strong>接口地址 :</strong> <code>/album/detail/dynamic</code></p><p><strong>调用例子 :</strong> <code>/album/detail/dynamic?id=32311</code></p><h3 id="收藏-取消收藏专辑"><a href="#收藏-取消收藏专辑" class="headerlink" title="收藏/取消收藏专辑"></a>收藏/取消收藏专辑</h3><p>说明 : 调用此接口,可收藏/取消收藏专辑</p><p><strong>必选参数 :</strong></p><p><code>id</code> : 专辑 id</p><p><code>t</code> : 1 为收藏,其他为取消收藏</p><p><strong>接口地址 :</strong> <code>/album/sub</code></p><p><strong>调用例子 :</strong> <code>/album/sub?t=1</code> <code>/album/sub?t=0</code></p><h3 id="获取已收藏专辑列表"><a href="#获取已收藏专辑列表" class="headerlink" title="获取已收藏专辑列表"></a>获取已收藏专辑列表</h3><p>说明 : 调用此接口 , 可获得已收藏专辑列表</p><p><strong>可选参数 :</strong><br><code>limit</code>: 取出数量 , 默认为 25</p><p><code>offset</code>: 偏移数量 , 用于分页 , 如 :( 页数 -1)*25, 其中 25 为 limit 的值 , 默认<br>为 0</p><p><strong>接口地址 :</strong> <code>/album/sublist</code></p><p><strong>调用例子 :</strong> <code>/album/sublist</code> ( 周杰伦 )</p><h3 id="获取歌手单曲"><a href="#获取歌手单曲" class="headerlink" title="获取歌手单曲"></a>获取歌手单曲</h3><p>说明 : 调用此接口 , 传入歌手 id, 可获得歌手部分信息和热门歌曲</p><p><strong>必选参数 :</strong> <code>id</code>: 歌手 id, 可由搜索接口获得</p><p><strong>接口地址 :</strong> <code>/artists</code></p><p><strong>调用例子 :</strong> <code>/artists?id=6452</code></p><p>返回数据如下图 :<br><img src="https://raw.githubusercontent.com/Binaryify/NeteaseCloudMusicApi/master/static/artists.png" alt="获取歌手单曲"></p><h3 id="获取歌手-mv"><a href="#获取歌手-mv" class="headerlink" title="获取歌手 mv"></a>获取歌手 mv</h3><p>说明 : 调用此接口 , 传入歌手 id, 可获得歌手 mv 信息 , 具体 mv 播放地址可调<br>用<code>/mv</code>传入此接口获得的 mvid 来拿到 , 如 :<br><code>/artist/mv?id=6452</code>,<code>/mv?mvid=5461064</code></p><p><strong>必选参数 :</strong> <code>id</code>: 歌手 id, 可由搜索接口获得</p><p><strong>接口地址 :</strong> <code>/artist/mv</code></p><p><strong>调用例子 :</strong> <code>/artist/mv?id=6452</code></p><h3 id="获取歌手专辑"><a href="#获取歌手专辑" class="headerlink" title="获取歌手专辑"></a>获取歌手专辑</h3><p>说明 : 调用此接口 , 传入歌手 id, 可获得歌手专辑内容</p><p><strong>必选参数 :</strong> <code>id</code>: 歌手 id</p><p><strong>可选参数 :</strong> <code>limit</code>: 取出数量 , 默认为 50</p><p><code>offset</code>: 偏移数量 , 用于分页 , 如 :( 页数 -1)*50, 其中 50 为 limit 的值 , 默认<br>为 0</p><p><strong>接口地址 :</strong> <code>/artist/album</code></p><p><strong>调用例子 :</strong> <code>/artist/album?id=6452&amp;limit=30</code> ( 周杰伦 )</p><p>返回数据如下图 :<br><img src="https://raw.githubusercontent.com/Binaryify/NeteaseCloudMusicApi/master/static/artist_album.png" alt="获取专辑内容"></p><h3 id="获取歌手描述"><a href="#获取歌手描述" class="headerlink" title="获取歌手描述"></a>获取歌手描述</h3><p>说明 : 调用此接口 , 传入歌手 id, 可获得歌手描述</p><p><strong>必选参数 :</strong> <code>id</code>: 歌手 id</p><p><strong>接口地址 :</strong> <code>/artist/desc</code></p><p><strong>调用例子 :</strong> <code>/artist/desc?id=6452</code> ( 周杰伦 )</p><h3 id="获取相似歌手"><a href="#获取相似歌手" class="headerlink" title="获取相似歌手"></a>获取相似歌手</h3><p>说明 : 调用此接口 , 传入歌手 id, 可获得相似歌手</p><p><strong>必选参数 :</strong> <code>id</code>: 歌手 id</p><p><strong>接口地址 :</strong> <code>/simi/artist</code></p><p><strong>调用例子 :</strong> <code>/simi/artist?id=6452</code> ( 对应和周杰伦相似歌手 )</p><h3 id="获取相似歌单"><a href="#获取相似歌单" class="headerlink" title="获取相似歌单"></a>获取相似歌单</h3><p>说明 : 调用此接口 , 传入歌曲 id, 可获得相似歌单</p><p><strong>必选参数 :</strong> <code>id</code>: 歌曲 id</p><p><strong>接口地址 :</strong> <code>/simi/playlist</code></p><p><strong>调用例子 :</strong> <code>/simi/playlist?id=347230</code> ( 对应 ‘ 光辉岁月 ‘ 相似歌单 )</p><h3 id="相似-mv"><a href="#相似-mv" class="headerlink" title="相似 mv"></a>相似 mv</h3><p>说明 : 调用此接口 , 传入 <code>mvid</code> 可获取相似 mv</p><p><strong>必选参数 :</strong> <code>mvid</code>: mv id</p><p><strong>接口地址 :</strong> <code>/simi/mv</code></p><p><strong>调用例子 :</strong> <code>/simi/mv?mvid=5436712</code></p><h3 id="获取相似音乐"><a href="#获取相似音乐" class="headerlink" title="获取相似音乐"></a>获取相似音乐</h3><p>说明 : 调用此接口 , 传入歌曲 id, 可获得相似歌曲</p><p><strong>必选参数 :</strong> <code>id</code>: 歌曲 id</p><p><strong>接口地址 :</strong> <code>/simi/song</code></p><p><strong>调用例子 :</strong> <code>/simi/song?id=347230</code> ( 对应 ‘ 光辉岁月 ‘ 相似歌曲 )</p><h3 id="获取最近-5-个听了这首歌的用户"><a href="#获取最近-5-个听了这首歌的用户" class="headerlink" title="获取最近 5 个听了这首歌的用户"></a>获取最近 5 个听了这首歌的用户</h3><p>说明 : 调用此接口 , 传入歌曲 id, 最近 5 个听了这首歌的用户</p><p><strong>必选参数 :</strong> <code>id</code>: 歌曲 id</p><p><strong>接口地址 :</strong> <code>/simi/user</code></p><p><strong>调用例子 :</strong> <code>/simi/user?id=347230</code> ( 对应 ‘ 光辉岁月 ‘ 相似歌曲 )</p><h3 id="获取每日推荐歌单"><a href="#获取每日推荐歌单" class="headerlink" title="获取每日推荐歌单"></a>获取每日推荐歌单</h3><p>说明 : 调用此接口 , 可获得每日推荐歌单 ( 需要登录 )</p><p><strong>接口地址 :</strong> <code>/recommend/resource</code></p><p><strong>调用例子 :</strong> <code>/recommend/resource</code></p><p>返回数据如下图 :<br><img src="https://raw.githubusercontent.com/Binaryify/NeteaseCloudMusicApi/master/static/%E6%8E%A8%E8%8D%90%E6%AD%8C%E5%8D%95.png" alt="每日推荐歌单"></p><h3 id="获取每日推荐歌曲"><a href="#获取每日推荐歌曲" class="headerlink" title="获取每日推荐歌曲"></a>获取每日推荐歌曲</h3><p>说明 : 调用此接口 , 可获得每日推荐歌曲 ( 需要登录 )</p><p><strong>接口地址 :</strong> <code>/recommend/songs</code></p><p><strong>调用例子 :</strong> <code>/recommend/songs</code></p><p>返回数据如下图 :<br><img src="https://raw.githubusercontent.com/Binaryify/NeteaseCloudMusicApi/master/static/%E6%8E%A8%E8%8D%90%E6%AD%8C%E6%9B%B2.png" alt="每日推荐歌曲"></p><h3 id="私人-FM"><a href="#私人-FM" class="headerlink" title="私人 FM"></a>私人 FM</h3><p>说明 : 私人 FM( 需要登录 )</p><p><strong>接口地址 :</strong> <code>/personal_fm</code></p><p><strong>调用例子 :</strong> <code>/personal_fm</code></p><p>返回数据如下图 :</p><p><img src="https://raw.githubusercontent.com/Binaryify/NeteaseCloudMusicApi/master/static/personal_fm.png" alt="私人 FM"></p><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><p>说明 : 调用此接口 , 传入签到类型 ( 可不传 , 默认安卓端签到 ), 可签到 ( 需要登录<br>), 其中安卓端签到可获得 3 点经验 , web/PC 端签到可获得 2 点经验</p><p><strong>可选参数 :</strong> <code>type</code>: 签到类型 , 默认 0, 其中 0 为安卓端签到 ,1 为 web/PC 签到</p><p><strong>接口地址 :</strong> <code>/daily_signin</code></p><p><strong>调用例子 :</strong> <code>/daily_signin</code></p><p>返回数据如下图 :</p><p><img src="https://raw.githubusercontent.com/Binaryify/NeteaseCloudMusicApi/master/static/signinSuccess.png" alt="签到成功"></p><p><img src="https://raw.githubusercontent.com/Binaryify/NeteaseCloudMusicApi/master/static/signinError.png" alt="签到失败"></p><h3 id="喜欢音乐"><a href="#喜欢音乐" class="headerlink" title="喜欢音乐"></a>喜欢音乐</h3><p>说明 : 调用此接口 , 传入音乐 id, 可喜欢该音乐</p><p><strong>必选参数 :</strong> <code>id</code>: 歌曲 id</p><p><strong>可选参数 :</strong> <code>like</code>: 布尔值 , 默认为 true 即喜欢 , 若传 false, 则取消喜欢</p><p><strong>接口地址 :</strong> <code>/like</code></p><p><strong>调用例子 :</strong> <code>/like?id=347230</code></p><p>返回数据如下图 :</p><p><img src="https://raw.githubusercontent.com/Binaryify/NeteaseCloudMusicApi/master/static/like.png" alt="喜欢成功"></p><p>喜欢成功则返回数据的 code 为 200, 其余为失败</p><p><img src="https://raw.githubusercontent.com/Binaryify/NeteaseCloudMusicApi/master/static/likeSuccess.png" alt="喜欢成功截图"></p><h3 id="喜欢音乐列表"><a href="#喜欢音乐列表" class="headerlink" title="喜欢音乐列表"></a>喜欢音乐列表</h3><p>说明 : 调用此接口 , 传入用户 id, 可获取已喜欢音乐id列表(id数组)</p><p><strong>必选参数 :</strong> <code>uid</code>: 用户 id</p><p><strong>接口地址 :</strong> <code>/likelist</code></p><p><strong>调用例子 :</strong> <code>/likelist?uid=32953014</code></p><h3 id="垃圾桶"><a href="#垃圾桶" class="headerlink" title="垃圾桶"></a>垃圾桶</h3><p>说明 : 调用此接口 , 传入音乐 id, 可把该音乐从私人 FM 中移除至垃圾桶</p><p><strong>必选参数 :</strong> <code>id</code>: 歌曲 id</p><p><strong>接口地址 :</strong> <code>/fm_trash</code></p><p><strong>调用例子 :</strong> <code>/fm_trash?id=347230</code></p><p>返回数据如下图 :</p><p><img src="https://raw.githubusercontent.com/Binaryify/NeteaseCloudMusicApi/master/static/fm_trash.png" alt="移除成功"></p><h3 id="新碟上架"><a href="#新碟上架" class="headerlink" title="新碟上架"></a>新碟上架</h3><p>说明 : 调用此接口 , 可获取新碟上架列表 , 如需具体音乐信息需要调用获取专辑列表接<br>口 <code>/album</code> , 然后传入 id, 如 <code>/album?id=32311&amp;limit=30</code></p><p><strong>可选参数 :</strong> <code>limit</code>: 取出数量 , 默认为 50</p><p><code>offset</code>: 偏移数量 , 用于分页 , 如 :( 页数 -1)*50, 其中 50 为 limit 的值 , 默认<br>为 0</p><p><strong>接口地址 :</strong> <code>/top/album</code></p><p><strong>调用例子 :</strong> <code>/top/album?offset=0&amp;limit=30</code></p><p>返回数据如下图 :</p><p><img src="https://raw.githubusercontent.com/Binaryify/NeteaseCloudMusicApi/master/static/new_albums.png" alt="新碟上架"></p><h3 id="最新专辑"><a href="#最新专辑" class="headerlink" title="最新专辑"></a>最新专辑</h3><p>说明 : 调用此接口 ，获取云音乐首页新碟上架数据</p><p><strong>接口地址 :</strong> <code>/album/newest</code></p><p><strong>调用例子 :</strong> <code>/album/newest</code></p><h3 id="听歌打卡"><a href="#听歌打卡" class="headerlink" title="听歌打卡"></a>听歌打卡</h3><p>说明 : 调用此接口 , 传入音乐 id, 来源 id，歌曲时间 time，更新听歌排行数据</p><p><strong>必选参数 :</strong> <code>id</code>: 歌曲 id, <code>sourceid</code>: 歌单或专辑 id</p><p><strong>可选参数 :</strong> <code>time</code>: 歌曲播放时间,单位为秒</p><p><strong>接口地址 :</strong> <code>/scrobble</code></p><p><strong>调用例子 :</strong> <code>/scrobble?id=518066366&amp;sourceid=36780169&amp;time=291</code></p><h3 id="热门歌手"><a href="#热门歌手" class="headerlink" title="热门歌手"></a>热门歌手</h3><p>说明 : 调用此接口 , 可获取热门歌手数据</p><p><strong>可选参数 :</strong> <code>limit</code>: 取出数量 , 默认为 50</p><p><code>offset</code>: 偏移数量 , 用于分页 , 如 :( 页数 -1)*50, 其中 50 为 limit 的值 , 默认<br>为 0</p><p><strong>接口地址 :</strong> <code>/top/artists</code></p><p><strong>调用例子 :</strong> <code>/top/artists?offset=0&amp;limit=30</code></p><p>返回数据如下图 :</p><p><img src="https://raw.githubusercontent.com/Binaryify/NeteaseCloudMusicApi/master/static/top_artists.png" alt="热门歌手"></p><h3 id="全部-mv"><a href="#全部-mv" class="headerlink" title="全部 mv"></a>全部 mv</h3><p>说明 : 调用此接口 , 可获取全部 mv</p><p><strong>可选参数 :</strong><br><code>area</code>: 地区,可选值为全部,内地,港台,欧美,日本,韩国,不填则为全部<br><code>type</code>: 类型,可选值为全部,官方版,原生,现场版,网易出品,不填则为全部  </p><p><code>order</code>: 排序,可选值为上升最快,最热,最新,不填则为上升最快  </p><p><code>limit</code>: 取出数量 , 默认为 30  </p><p><code>offset</code>: 偏移数量 , 用于分页 , 如 :( 页数 -1)*50, 其中 50 为 limit 的值 , 默认<br>为 0  </p><p><strong>接口地址 :</strong> <code>/mv/all</code></p><p><strong>调用例子 :</strong> <code>/mv/all?area=港台</code></p><h3 id="最新-mv"><a href="#最新-mv" class="headerlink" title="最新 mv"></a>最新 mv</h3><p>说明 : 调用此接口 , 可获取最新 mv</p><p><strong>可选参数 :</strong> <code>area</code>: 地区,可选值为全部,内地,港台,欧美,日本,韩国,不填则为全部</p><p><strong>可选参数 :</strong> <code>limit</code>: 取出数量 , 默认为 30</p><p><strong>接口地址 :</strong> <code>/mv/first</code></p><p><strong>调用例子 :</strong> <code>/mv/first?limit=10</code></p><h3 id="网易出品mv"><a href="#网易出品mv" class="headerlink" title="网易出品mv"></a>网易出品mv</h3><p>说明 : 调用此接口 , 可获取网易出品 mv</p><p><strong>可选参数 :</strong> <code>limit</code>: 取出数量 , 默认为 30</p><p><code>offset</code>: 偏移数量 , 用于分页 , 如 :( 页数 -1)*30, 其中 30 为 limit 的值 , 默认<br>为 0</p><p><strong>接口地址 :</strong> <code>/mv/exclusive/rcmd</code></p><p><strong>调用例子 :</strong> <code>/mv/exclusive/rcmd?limit=10</code></p><h3 id="推荐-mv"><a href="#推荐-mv" class="headerlink" title="推荐 mv"></a>推荐 mv</h3><p>说明 : 调用此接口 , 可获取推荐 mv</p><p><strong>接口地址 :</strong> <code>/personalized/mv</code></p><p><strong>调用例子 :</strong> <code>/personalized/mv</code></p><h3 id="推荐歌单"><a href="#推荐歌单" class="headerlink" title="推荐歌单"></a>推荐歌单</h3><p>说明 : 调用此接口 , 可获取推荐歌单</p><p><strong>接口地址 :</strong> <code>/personalized</code></p><p><strong>调用例子 :</strong> <code>/personalized</code></p><h3 id="推荐新音乐"><a href="#推荐新音乐" class="headerlink" title="推荐新音乐"></a>推荐新音乐</h3><p>说明 : 调用此接口 , 可获取推荐新音乐</p><p><strong>接口地址 :</strong> <code>/personalized/newsong</code></p><p><strong>调用例子 :</strong> <code>/personalized/newsong</code></p><h3 id="推荐电台"><a href="#推荐电台" class="headerlink" title="推荐电台"></a>推荐电台</h3><p>说明 : 调用此接口 , 可获取推荐电台</p><p><strong>接口地址 :</strong> <code>/personalized/djprogram</code></p><p><strong>调用例子 :</strong> <code>/personalized/djprogram</code></p><h3 id="推荐节目"><a href="#推荐节目" class="headerlink" title="推荐节目"></a>推荐节目</h3><p>说明 : 调用此接口 , 可获取推荐电台</p><p><strong>接口地址 :</strong> <code>/program/recommend</code></p><p><strong>调用例子 :</strong> <code>/program/recommend</code></p><h3 id="独家放送"><a href="#独家放送" class="headerlink" title="独家放送"></a>独家放送</h3><p>说明 : 调用此接口 , 可获取独家放送</p><p><strong>接口地址 :</strong> <code>/personalized/privatecontent</code></p><p><strong>调用例子 :</strong> <code>/personalized/privatecontent</code></p><h3 id="mv-排行"><a href="#mv-排行" class="headerlink" title="mv 排行"></a>mv 排行</h3><p>说明 : 调用此接口 , 可获取 mv 排行</p><p><strong>可选参数 :</strong> <code>limit</code>: 取出数量 , 默认为 30  </p><p><code>area</code>: 地区,可选值为内地,港台,欧美,日本,韩国,不填则为全部  </p><p><code>offset</code>: 偏移数量 , 用于分页 , 如 :( 页数 -1)*30, 其中 30 为 limit 的值 , 默认<br>为 0</p><p><strong>接口地址 :</strong> <code>/top/mv</code></p><p><strong>调用例子 :</strong> <code>/top/mv?limit=10</code></p><h3 id="获取-mv-数据"><a href="#获取-mv-数据" class="headerlink" title="获取 mv 数据"></a>获取 mv 数据</h3><p>说明 : 调用此接口 , 传入 mvid ( 在搜索音乐的时候传 type=1004 获得 ) , 可获取对应<br>MV 数据 , 数据包含 mv 名字 , 歌手 , 发布时间 , mv 视频地址等数据 , 其中 mv 视频<br>网易做了防盗链处理 , 可能不能直接播放 , 需要播放的话需要调用 ‘ mv 地址’ 接口</p><p><strong>必选参数 :</strong> <code>mvid</code>: mv 的 id</p><p><strong>接口地址 :</strong> <code>/mv/detail</code></p><p><strong>调用例子 :</strong> <code>/mv/detail?mvid=5436712</code></p><p>返回数据如下图 :</p><p><img src="https://raw.githubusercontent.com/Binaryify/NeteaseCloudMusicApi/master/static/mv.png" alt="热门歌手"></p><h3 id="mv-地址"><a href="#mv-地址" class="headerlink" title="mv 地址"></a>mv 地址</h3><p>说明 : 调用此接口 , 传入 mv id,可获取 mv 播放地址</p><p><strong>可选参数 :</strong> <code>url</code>: mv id</p><p><strong>接口地址 :</strong> <code>/mv/url</code></p><p><strong>调用例子 :</strong></p><p><code>/mv/url?id=5436712</code></p><h3 id="获取视频标签列表"><a href="#获取视频标签列表" class="headerlink" title="获取视频标签列表"></a>获取视频标签列表</h3><p>说明 : 调用此接口 , 可获取视频标签列表  </p><p><strong>接口地址 :</strong> <code>/video/group/list</code></p><p><strong>调用例子 :</strong> <code>/video/group/list</code></p><h3 id="获取视频标签下的视频"><a href="#获取视频标签下的视频" class="headerlink" title="获取视频标签下的视频"></a>获取视频标签下的视频</h3><p>说明 : 调用此接口 , 传入<code>id</code>,可获取到相关的视频。  (ps：无法分页，每次请求返回内容都不一样，官方桌面软件是打开先请求两次，然后每次滚动到底部的时候再请求一次)</p><p><strong>必选参数 :</strong> <code>id</code>: videoGroup 的 id</p><p><strong>接口地址 :</strong> <code>/video/group</code></p><p><strong>调用例子 :</strong> <code>/video/group?id=9104</code></p><h3 id="相关视频"><a href="#相关视频" class="headerlink" title="相关视频"></a>相关视频</h3><p>说明 : 调用此接口 , 可获取相关视频</p><p><strong>必选参数 :</strong> <code>id</code>: 视频 的 id</p><p><strong>接口地址 :</strong> <code>/related/allvideo</code></p><p><strong>调用例子 :</strong> <code>/related/allvideo?id=89ADDE33C0AAE8EC14B99F6750DB954D</code></p><h3 id="视频详情"><a href="#视频详情" class="headerlink" title="视频详情"></a>视频详情</h3><p>说明 : 调用此接口 , 可获取视频详情</p><p><strong>必选参数 :</strong> <code>id</code>: 视频 的 id</p><p><strong>接口地址 :</strong> <code>/video/detail</code></p><p><strong>调用例子 :</strong> <code>/video/detail?id=89ADDE33C0AAE8EC14B99F6750DB954D</code></p><h3 id="获取视频播放地址"><a href="#获取视频播放地址" class="headerlink" title="获取视频播放地址"></a>获取视频播放地址</h3><p>说明 : 调用此接口 , 传入视频 id,可获取视频播放地址</p><p><strong>必选参数 :</strong> <code>id</code>: 视频 的 id</p><p><strong>接口地址 :</strong> <code>/video/url</code></p><p><strong>调用例子 :</strong> <code>/video/url?id=89ADDE33C0AAE8EC14B99F6750DB954D</code></p><p>返回数据如下图 :</p><p><img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fuqdv10p5rj31kw0da76y.jpg" alt="视频数据"></p><h3 id="排行榜"><a href="#排行榜" class="headerlink" title="排行榜"></a>排行榜</h3><p>说明 : 调用此接口 , 传入数字 idx, 可获取不同排行榜</p><p><strong>必选参数 :</strong> <code>idx</code>: 对象 key, 对应以下排行榜</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&quot;0&quot;: 云音乐新歌榜,</span><br><span class="line"></span><br><span class="line">&quot;1&quot;: 云音乐热歌榜,</span><br><span class="line"></span><br><span class="line">&quot;2&quot;: 网易原创歌曲榜,</span><br><span class="line"></span><br><span class="line">&quot;3&quot;: 云音乐飙升榜,</span><br><span class="line"></span><br><span class="line">&quot;4&quot;: 云音乐电音榜,</span><br><span class="line"></span><br><span class="line">&quot;5&quot;: UK排行榜周榜,</span><br><span class="line"></span><br><span class="line">&quot;6&quot;: 美国Billboard周榜</span><br><span class="line"></span><br><span class="line">&quot;7&quot;: KTV嗨榜,</span><br><span class="line"></span><br><span class="line">&quot;8&quot;: iTunes榜,</span><br><span class="line"></span><br><span class="line">&quot;9&quot;: Hit FM Top榜,</span><br><span class="line"></span><br><span class="line">&quot;10&quot;: 日本Oricon周榜</span><br><span class="line"></span><br><span class="line">&quot;11&quot;: 韩国Melon排行榜周榜,</span><br><span class="line"></span><br><span class="line">&quot;12&quot;: 韩国Mnet排行榜周榜,</span><br><span class="line"></span><br><span class="line">&quot;13&quot;: 韩国Melon原声周榜,</span><br><span class="line"></span><br><span class="line">&quot;14&quot;: 中国TOP排行榜(港台榜),</span><br><span class="line"></span><br><span class="line">&quot;15&quot;: 中国TOP排行榜(内地榜)</span><br><span class="line"></span><br><span class="line">&quot;16&quot;: 香港电台中文歌曲龙虎榜,</span><br><span class="line"></span><br><span class="line">&quot;17&quot;: 华语金曲榜,</span><br><span class="line"></span><br><span class="line">&quot;18&quot;: 中国嘻哈榜,</span><br><span class="line"></span><br><span class="line">&quot;19&quot;: 法国 NRJ EuroHot 30周榜,</span><br><span class="line"></span><br><span class="line">&quot;20&quot;: 台湾Hito排行榜,</span><br><span class="line"></span><br><span class="line">&quot;21&quot;: Beatport全球电子舞曲榜,</span><br><span class="line"></span><br><span class="line">&quot;22&quot;: 云音乐ACG音乐榜,</span><br><span class="line"></span><br><span class="line">&quot;23&quot;: 云音乐嘻哈榜</span><br></pre></td></tr></table></figure><p><strong>接口地址 :</strong> <code>/top/list</code></p><p><strong>调用例子 :</strong> <code>/top/list?idx=6</code></p><p>返回数据如下图 :</p><p><img src="https://raw.githubusercontent.com/Binaryify/NeteaseCloudMusicApi/master/static/top_list.png" alt="排行榜"></p><h3 id="所有榜单"><a href="#所有榜单" class="headerlink" title="所有榜单"></a>所有榜单</h3><p>说明 : 调用此接口,可获取所有榜单<br><strong>接口地址 :</strong> <code>/toplist</code></p><p><strong>调用例子 :</strong> <code>/toplist</code></p><h3 id="所有榜单内容摘要"><a href="#所有榜单内容摘要" class="headerlink" title="所有榜单内容摘要"></a>所有榜单内容摘要</h3><p>说明 : 调用此接口,可获取所有榜单内容摘要<br><strong>接口地址 :</strong> <code>/toplist/detail</code></p><p><strong>调用例子 :</strong> <code>/toplist/detail</code></p><h3 id="歌手榜"><a href="#歌手榜" class="headerlink" title="歌手榜"></a>歌手榜</h3><p>说明 : 调用此接口 , 可获取排行榜中的歌手榜</p><p><strong>接口地址 :</strong> <code>/toplist/artist</code></p><p><strong>调用例子 :</strong> <code>/toplist/artist</code></p><h3 id="云盘"><a href="#云盘" class="headerlink" title="云盘"></a>云盘</h3><p>说明 : 登陆后调用此接口 , 可获取云盘数据 , 获取的数据没有对应 url, 需要再调用一<br>次 <code>/song/url</code> 获取 url</p><p><strong>可选参数 :</strong></p><p><code>limit</code> : 返回数量 , 默认为 200</p><p><code>offset</code> : 偏移数量，用于分页 , 如 :( 页数 -1)*200, 其中 200 为 limit 的值 , 默认为 0</p><p><strong>接口地址 :</strong> <code>/user/cloud</code></p><p><strong>调用例子 :</strong> <code>/user/cloud</code></p><h3 id="云盘数据详情"><a href="#云盘数据详情" class="headerlink" title="云盘数据详情"></a>云盘数据详情</h3><p>说明 : 登陆后调用此接口 , 传入云盘歌曲 id，可获取云盘数据详情</p><p><strong>必选参数 :</strong> <code>id</code>: 歌曲id,可多个,用逗号隔开</p><p><strong>接口地址 :</strong> <code>/user/cloud/detail</code></p><p><strong>调用例子 :</strong> <code>/user/cloud/detail?id=5374627</code></p><h3 id="云盘歌曲删除"><a href="#云盘歌曲删除" class="headerlink" title="云盘歌曲删除"></a>云盘歌曲删除</h3><p>说明 : 登陆后调用此接口 , 可删除云盘歌曲</p><p><strong>必选参数 :</strong> <code>id</code>: 歌曲id,可多个,用逗号隔开</p><p><strong>接口地址 :</strong> <code>/user/cloud/del</code></p><p><strong>调用例子 :</strong> <code>/user/cloud/del</code></p><h3 id="电台-推荐"><a href="#电台-推荐" class="headerlink" title="电台 - 推荐"></a>电台 - 推荐</h3><p>说明 : 登陆后调用此接口 , 可获得推荐电台</p><p><strong>接口地址 :</strong> <code>/dj/recommend</code></p><p><strong>调用例子 :</strong> <code>/dj/recommend</code></p><h3 id="电台-分类"><a href="#电台-分类" class="headerlink" title="电台 - 分类"></a>电台 - 分类</h3><p>说明 : 登陆后调用此接口 , 可获得电台类型</p><p><strong>接口地址 :</strong> <code>/dj/catelist</code></p><p><strong>调用例子 :</strong> <code>/dj/catelist</code></p><h3 id="电台-分类推荐"><a href="#电台-分类推荐" class="headerlink" title="电台 - 分类推荐"></a>电台 - 分类推荐</h3><p>说明 : 登陆后调用此接口 , 可获得推荐电台</p><p><strong>必选参数 :</strong> <code>type</code>: 电台类型 , 数字 , 可通过<code>/dj/catelist</code>获取 , 对应关系为<br>id 对应 此接口的 type, name 对应类型意义</p><p><strong>接口地址 :</strong> <code>/dj/recommend/type</code></p><p><strong>调用例子 :</strong> <code>/dj/recommend/type?type=1</code></p><h3 id="电台-订阅"><a href="#电台-订阅" class="headerlink" title="电台 - 订阅"></a>电台 - 订阅</h3><p>说明 : 登陆后调用此接口 , 传入<code>rid</code>, 可订阅 dj,dj 的 <code>rid</code> 可通过搜索指定<br>type=’1009’ 获取其 id, 如<code>/search?keywords= 代码时间 &amp;type=1009</code></p><p><strong>必选参数 :</strong> <code>rid</code>: 电台 的 id</p><p><strong>接口地址 :</strong> <code>/dj/sub</code></p><p><strong>调用例子 :</strong> <code>/dj/sub?rid=336355127&amp;t=1</code> ( 对应关注 ‘ 代码时间 ‘)<br><code>/dj/sub?rid=336355127&amp;t=0</code> ( 对应取消关注 ‘ 代码时间 ‘)</p><h3 id="电台的订阅列表"><a href="#电台的订阅列表" class="headerlink" title="电台的订阅列表"></a>电台的订阅列表</h3><p>说明 : 登陆后调用此接口 , 可获取订阅的电台列表</p><p><strong>接口地址 :</strong> <code>/dj/sublist</code></p><p><strong>调用例子 :</strong> <code>/dj/sublist</code></p><h3 id="电台-付费精选"><a href="#电台-付费精选" class="headerlink" title="电台 - 付费精选"></a>电台 - 付费精选</h3><p>说明 : 可以获取付费精选的电台列表 , 传入 <code>limit</code> 和 <code>offset</code> 可以进行分页</p><p><strong>可选参数 :</strong></p><p><code>limit</code> : 返回数量 , 默认为 30</p><p><code>offset</code> : 偏移数量，用于分页 ,  如 :( 页数 -1)*30, 其中 30 为 limit 的值 , 默认为 0</p><p><strong>接口地址 :</strong> <code>/dj/paygift</code></p><p><strong>调用例子 :</strong> <code>/dj/paygift?limit=10&amp;offset=20</code></p><h3 id="电台-非热门类型"><a href="#电台-非热门类型" class="headerlink" title="电台 - 非热门类型"></a>电台 - 非热门类型</h3><p>说明 : 登陆后调用此接口, 可获得电台非热门类型</p><p><strong>接口地址 :</strong> <code>/dj/category/excludehot</code></p><p><strong>调用例子 :</strong> <code>/dj/category/excludehot</code></p><h3 id="电台-推荐类型"><a href="#电台-推荐类型" class="headerlink" title="电台 - 推荐类型"></a>电台 - 推荐类型</h3><p>说明 : 登陆后调用此接口, 可获得电台推荐类型</p><p><strong>接口地址 :</strong> <code>/dj/category/recommend</code></p><p><strong>调用例子 :</strong> <code>/dj/category/recommend</code></p><h3 id="电台-今日优选"><a href="#电台-今日优选" class="headerlink" title="电台 - 今日优选"></a>电台 - 今日优选</h3><p>说明 : 登陆后调用此接口, 可获得电台今日优选</p><p><strong>接口地址 :</strong> <code>/dj/today/perfered</code></p><p><strong>调用例子 :</strong> <code>/dj/today/perfered</code></p><h3 id="电台-详情"><a href="#电台-详情" class="headerlink" title="电台 - 详情"></a>电台 - 详情</h3><p>说明 : 登陆后调用此接口 , 传入<code>rid</code>, 可获得对应电台的详情介绍</p><p><strong>必选参数 :</strong> <code>rid</code>: 电台 的 id</p><p><strong>接口地址 :</strong> <code>/dj/detail?rid=336355127</code></p><p><strong>调用例子 :</strong> <code>/dj/detail?rid=336355127</code> ( 对应 ‘ 代码时间 ‘ 的详情介绍 )</p><h3 id="电台-节目"><a href="#电台-节目" class="headerlink" title="电台 - 节目"></a>电台 - 节目</h3><p>说明 : 登陆后调用此接口 , 传入<code>rid</code>, 可查看对应电台的电台节目以及对应的 id, 需要<br>注意的是这个接口返回的 mp3Url 已经无效 , 都为 null, 但是通过调用 <code>/song/url</code> 这<br>个接口 , 传入节目 id 仍然能获取到节目音频 , 如 <code>/song/url?id=478446370</code> 获取代<br>码时间的一个节目的音频</p><p><strong>必选参数 :</strong> <code>rid</code>: 电台 的 id</p><p><strong>可选参数 :</strong></p><p><code>limit</code> : 返回数量 , 默认为 30</p><p><code>offset</code> : 偏移数量，用于分页 , 如 :( 页数 -1)*30, 其中 30 为 limit 的值 , 默认为 0</p><p><code>asc</code> : 排序方式,默认为 <code>false</code> (新 =&gt; 老 ) 设置 <code>true</code> 可改为 老 =&gt; 新 </p><p><strong>接口地址 :</strong> <code>/dj/program</code></p><p><strong>调用例子 :</strong> <code>/dj/program?rid=336355127&amp;limit=40</code> ( 对应 ‘ 代码时间 ‘ 的节目列表 )</p><h3 id="通知-私信"><a href="#通知-私信" class="headerlink" title="通知 - 私信"></a>通知 - 私信</h3><p>说明 : 登陆后调用此接口 ,可获取私信</p><p><strong>可选参数 :</strong></p><p><code>limit</code> : 返回数量 , 默认为 30</p><p><code>offset</code> : 偏移数量，用于分页 , 如 :( 页数 -1)*30, 其中 30 为 limit 的值 , 默认为 0</p><p><strong>接口地址 :</strong> <code>/msg/private</code></p><p><strong>调用例子 :</strong> <code>/msg/private?limit=3</code></p><h3 id="发送私信"><a href="#发送私信" class="headerlink" title="发送私信"></a>发送私信</h3><p>说明 : 登陆后调用此接口 , 传入用户 id 和要发送的信息, 可以发送私信,返回内容为历史私信,包含带歌单的私信信息(注:不能发送私信给自己)</p><p><strong>必选参数 :</strong></p><p><code>user_ids</code> : 用户 id,多个需用逗号隔开</p><p><code>msg</code> : 要发送的信息</p><p><strong>接口地址 :</strong> <code>/send/text</code></p><p><strong>调用例子 :</strong> <code>/send/text?user_ids=32953014&amp;msg=test</code>,<code>/send/text?user_ids=32953014,475625142&amp;msg=test</code><br>返回数据如下图:<br><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fr3p3hfeudj31kw1aek2e.jpg" alt="数据"></p><h3 id="私信内容"><a href="#私信内容" class="headerlink" title="私信内容"></a>私信内容</h3><p>说明 : 登陆后调用此接口 , 可获取私信内容</p><p><strong>必选参数 :</strong><br><code>uid</code> : 用户 id</p><p><strong>可选参数 :</strong><br><code>limit</code> : 返回数量 , 默认为 30</p><p><code>offset</code> : 偏移数量，用于分页 , 如 :( 页数 -1)*30, 其中 30 为 limit 的值 , 默认为 0</p><p><strong>接口地址 :</strong><br><code>/msg/private/history</code></p><p><strong>调用例子 :</strong><br><code>/msg/private/history?uid=9003</code> (云音乐小秘书)</p><h3 id="发送私信-带歌单"><a href="#发送私信-带歌单" class="headerlink" title="发送私信(带歌单)"></a>发送私信(带歌单)</h3><p>说明 : 登陆后调用此接口 , 传入用户 id 和要发送的信息和歌单 id, 可以发送带歌单的私信(注:不能发送重复的歌单)</p><p><strong>必选参数 :</strong></p><p><code>user_ids</code> : 用户 id,多个需用逗号隔开</p><p><code>msg</code> : 要发送的信息</p><p><strong>接口地址 :</strong> <code>/send/playlist</code></p><p><strong>调用例子 :</strong> <code>/send/playlist?msg=test&amp;user_ids=475625142&amp;playlist=705123491</code>,<code>/send/playlist?msg=test2&amp;user_ids=475625142,32953014&amp;playlist=705123493</code><br>返回数据如下图:<br><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fr3p1z7qmcj30v409adg5.jpg" alt="数据"></p><h3 id="通知-评论"><a href="#通知-评论" class="headerlink" title="通知 - 评论"></a>通知 - 评论</h3><p>说明 : 登陆后调用此接口 ,可获取评论</p><p><strong>必选参数 :</strong> <code>uid</code>: 用户 的 id，只能和登录账号的 id 一致</p><p><strong>可选参数 :</strong></p><p><code>limit</code> : 返回数量 , 默认为 30</p><p><code>before</code> : 分页参数,取上一页最后一个歌单的 <code>updateTime</code> 获取下一页数据</p><p><strong>接口地址 :</strong> <code>/msg/comments</code></p><p><strong>调用例子 :</strong> <code>/msg/comments?uid=32953014</code></p><h3 id="通知-我"><a href="#通知-我" class="headerlink" title="通知 - @我"></a>通知 - @我</h3><p>说明 : 登陆后调用此接口 ,可获取@我数据</p><p><strong>可选参数 :</strong></p><p><code>limit</code> : 返回数量 , 默认为 30</p><p><code>offset</code> : 偏移数量，用于分页 , 如 :( 页数 -1)*30, 其中 30 为 limit 的值 , 默认为 0</p><p><strong>接口地址 :</strong> <code>/msg/forwards</code></p><p><strong>调用例子 :</strong> <code>/msg/forwards?limit=3</code></p><h3 id="通知-通知"><a href="#通知-通知" class="headerlink" title="通知 - 通知"></a>通知 - 通知</h3><p>说明 : 登陆后调用此接口 ,可获取通知</p><p><strong>可选参数 :</strong></p><p><code>limit</code> : 返回数量 , 默认为 30</p><p><code>offset</code> : 偏移数量，用于分页 , 如 :( 页数 -1)*30, 其中 30 为 limit 的值 , 默认为 0</p><p><strong>接口地址 :</strong> <code>/msg/notices</code></p><p><strong>调用例子 :</strong> <code>/msg/notices?limit=3</code></p><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><p>说明 : 登陆后调用此接口 ,可获取用户设置</p><p><strong>接口地址 :</strong> <code>/setting</code></p><p><strong>调用例子 :</strong> <code>/setting</code></p><h3 id="我的数字专辑"><a href="#我的数字专辑" class="headerlink" title="我的数字专辑"></a>我的数字专辑</h3><p>说明 : 登陆后调用此接口 ,可获取我的数字专辑</p><p><strong>接口地址 :</strong> <code>/digitalAlbum/purchased</code></p><p><strong>调用例子 :</strong> <code>/digitalAlbum/purchased?limit=10</code></p><h3 id="batch批量请求接口"><a href="#batch批量请求接口" class="headerlink" title="batch批量请求接口"></a>batch批量请求接口</h3><p>说明 : 登陆后调用此接口 ,传入接口和对应原始参数(原始参数非文档里写的参数,需参考源码),可批量请求接口</p><p><strong>接口地址 :</strong> <code>/batch</code></p><p><strong>调用例子 :</strong> 使用GET方式:<code>/batch?/api/v2/banner/get={&quot;clientType&quot;:&quot;pc&quot;}</code> 使用POST方式传入参数:<code>{ &quot;/api/v2/banner/get&quot;: {&quot;clientType&quot;:&quot;pc&quot;} }</code></p><h2 id="离线访问此文档"><a href="#离线访问此文档" class="headerlink" title="离线访问此文档"></a>离线访问此文档</h2><p>此文档同时也是 Progressive Web Apps(PWA), 加入了 serviceWorker, 可离线访问</p><h2 id="关于此文档"><a href="#关于此文档" class="headerlink" title="关于此文档"></a>关于此文档</h2><p>此文档由 <a href="https://github.com/QingWei-Li/docsify/" target="_blank" rel="noopener">docsify</a> 生成 docsify 是一个动<br>态生成文档网站的工具。不同于 GitBook、Hexo 的地方是它不会生成将 .md 转成 .html<br>文件，所有转换工作都是在运行时进行。</p><h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p><a href="https://github.com/Binaryify/NeteaseCloudMusicApi/blob/master/LICENSE" target="_blank" rel="noopener">The MIT License (MIT)</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> api </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react hooks 使用实例</title>
      <link href="/2019/09/09/React%20Hooks%E4%BD%BF%E7%94%A8%E5%AE%9E%E4%BE%8B2/"/>
      <url>/2019/09/09/React%20Hooks%E4%BD%BF%E7%94%A8%E5%AE%9E%E4%BE%8B2/</url>
      
        <content type="html"><![CDATA[<p>react hooks 使用实例<br><a id="more"></a></p><h2 id="通过reducer来处理dispatch出来的各种action"><a href="#通过reducer来处理dispatch出来的各种action" class="headerlink" title="通过reducer来处理dispatch出来的各种action"></a>通过reducer来处理dispatch出来的各种action</h2><p>reducer.ts<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> dataFetchReducer = <span class="function">(<span class="params">state: <span class="built_in">any</span>, action: &#123;[<span class="keyword">type</span>: <span class="built_in">string</span>]: <span class="built_in">any</span>&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span>(action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'FETCH_INIT'</span>:</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          ...state,</span><br><span class="line">          isLoading: <span class="literal">true</span>,</span><br><span class="line">          isError: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'FETCH_SUCCESS'</span>:</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          ...state,</span><br><span class="line">          isLoading: <span class="literal">false</span>,</span><br><span class="line">          isError: <span class="literal">false</span></span><br><span class="line">          data: action.payload</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'FETCH_ERROR'</span>:</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          ...state,</span><br><span class="line">          isLoading: <span class="literal">false</span>,</span><br><span class="line">          isError: <span class="literal">true</span>,</span><br><span class="line">          msg: action.payload</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Unsupport action type:<span class="subst">$&#123;action.<span class="keyword">type</span>&#125;</span>`</span>);           </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="自定义一个获取数据的React-Hooks"><a href="#自定义一个获取数据的React-Hooks" class="headerlink" title="自定义一个获取数据的React Hooks"></a>自定义一个获取数据的React Hooks</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> RequestConfig <span class="keyword">extends</span> AxiosRequestConfig&#123;</span><br><span class="line">  url: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports <span class="keyword">const</span> useDataApi = (initData: <span class="built_in">Array</span>&lt;<span class="built_in">any</span>&gt; | <span class="built_in">any</span>, initRequestConfig: RequestConfig) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!initRequstConfog.method) &#123;</span><br><span class="line">    initRequstConfog.method = <span class="string">"get"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> [requestConfig, setRequestConfig] = useState(initRequestConfig);</span><br><span class="line">  <span class="keyword">const</span> [state, dispatch] = useReducer(dataFetchReducer, &#123;</span><br><span class="line">    data: initData,</span><br><span class="line">    isLoading: <span class="literal">false</span>,</span><br><span class="line">    isError: <span class="literal">false</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> fetchData = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        dispatch(&#123;</span><br><span class="line">          <span class="keyword">type</span>: <span class="string">'FETCH_INIT'</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">if</span> (!requestConfig.url) &#123;</span><br><span class="line">          dispatch(&#123;</span><br><span class="line">            <span class="keyword">type</span>: <span class="string">'FETCH_SUCCESS'</span>,</span><br><span class="line">            payload: []</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> response = <span class="keyword">await</span> axios(requestConfig).catch(<span class="function"><span class="params">e</span> =&gt;</span> <span class="keyword">return</span> e.response);</span><br><span class="line">          <span class="keyword">if</span> (response.data) &#123;</span><br><span class="line">            <span class="keyword">const</span> data = response.data;</span><br><span class="line">            <span class="keyword">const</span> &#123; success, result, message &#125; = data;</span><br><span class="line">            <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">              dispatch(&#123;</span><br><span class="line">                <span class="keyword">type</span>: <span class="string">'FETCH_ERROR'</span>,</span><br><span class="line">                payload: message</span><br><span class="line">              &#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              dispatch(&#123;</span><br><span class="line">                <span class="keyword">type</span>: <span class="string">'FETCH_SUCCESS'</span>,</span><br><span class="line">                payload: result</span><br><span class="line">              &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            dispatch(&#123;</span><br><span class="line">              <span class="keyword">type</span>: <span class="string">'FETCH_ERROR'</span>,</span><br><span class="line">              payload: <span class="string">'加载数据失败'</span></span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span>(error) &#123;</span><br><span class="line">        dispatch(&#123;</span><br><span class="line">          <span class="keyword">type</span>: <span class="string">'FETCH_ERROR'</span></span><br><span class="line">          msg: <span class="string">'加载数据失败'</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [requestConfig]);</span><br><span class="line">  <span class="keyword">return</span> [state, setRequestConfig]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用自定义的Hooks来加载数据"><a href="#使用自定义的Hooks来加载数据" class="headerlink" title="使用自定义的Hooks来加载数据"></a>使用自定义的Hooks来加载数据</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [&#123;isLoading, isError, msg, data&#125;, setRequestConfig] = useDataApi([], &#123;url: apiPath&#125;);</span><br><span class="line"><span class="keyword">if</span> (isError) &#123;</span><br><span class="line">  message.error(msg);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;div className=<span class="string">"toolbar"</span>&gt;</span><br><span class="line">        &lt;Link to=&#123;<span class="built_in">window</span>.location.pathname+ <span class="string">'/detail'</span>&#125; &gt;</span><br><span class="line">          &lt;Button <span class="keyword">type</span>=<span class="string">"primary"</span> icon=<span class="string">"plus"</span> &gt;</span><br><span class="line">            添加</span><br><span class="line">          &lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>Link&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;CustomModal /</span>&gt;</span><br><span class="line">      &lt;Table columns=&#123;columns&#125;</span><br><span class="line">        dataSource=&#123;data&#125;</span><br><span class="line">        loading=&#123;isLoading&#125;</span><br><span class="line">        rowKey=&#123;<span class="string">'id'</span>&#125; /&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;  </span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react hooks 使用实例</title>
      <link href="/2019/09/09/React%20Hooks%E4%BD%BF%E7%94%A8%E5%AE%9E%E4%BE%8B/"/>
      <url>/2019/09/09/React%20Hooks%E4%BD%BF%E7%94%A8%E5%AE%9E%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p>react hooks 使用实例<br><a id="more"></a></p><h2 id="使用Suspense-和lazy实现模块懒加载功能"><a href="#使用Suspense-和lazy实现模块懒加载功能" class="headerlink" title="使用Suspense 和lazy实现模块懒加载功能"></a>使用Suspense 和lazy实现模块懒加载功能</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;Suspense, lazy&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">const</span> HomePage = lazy(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">import</span>(<span class="string">'./modeles/home'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;Suspense fallback=&#123;&lt;div&gt;加载中...&lt;<span class="regexp">/div&gt;&#125;&gt;</span></span><br><span class="line"><span class="regexp">  &lt;Switch&gt;</span></span><br><span class="line"><span class="regexp">      Route path="/</span>home<span class="string">" component=&#123;HomePage&#125; /&gt;</span></span><br><span class="line"><span class="string">  &lt;/Switch&gt;</span></span><br><span class="line"><span class="string">&lt;/Suspense&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用React-Hooks-实现一个自定义的组件"><a href="#使用React-Hooks-实现一个自定义的组件" class="headerlink" title="使用React Hooks 实现一个自定义的组件"></a>使用React Hooks 实现一个自定义的组件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useModal = <span class="function">(<span class="params">initTitle: string, initContent: string | React.Element</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [visible, setVisible] = useState(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">const</span> [title, setTitle] = useState(initTitle);</span><br><span class="line">  <span class="keyword">const</span> [content, setContent] = useState(initContent);</span><br><span class="line">  <span class="keyword">const</span> CustomModal = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Modal</span><br><span class="line">        visible=&#123;visible&#125;</span><br><span class="line">        title=&#123;title&#125;</span><br><span class="line">        closable=&#123;<span class="literal">false</span>&#125;</span><br><span class="line">        footer=&#123;<span class="literal">null</span>&#125;&gt;</span><br><span class="line">        &#123;content&#125;</span><br><span class="line">      &lt;<span class="regexp">/Modal&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">  const show = (content?: string | React.ReactElement) =&gt; &#123;</span></span><br><span class="line"><span class="regexp">    content &amp;&amp; setContent(content);</span></span><br><span class="line"><span class="regexp">    setVisible(true);</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">  const hide = (delay?: number) =&gt; &#123;</span></span><br><span class="line"><span class="regexp">    if(delay) &#123;</span></span><br><span class="line"><span class="regexp">      setTimeout(() =&gt; setVisible(false), delay);</span></span><br><span class="line"><span class="regexp">    &#125; else &#123;</span></span><br><span class="line"><span class="regexp">      setVisible(false)</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">  return &#123;</span></span><br><span class="line"><span class="regexp">    show, hide, CustomModal, setTitle, setContent</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>使用：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;hide, show, CustomModal&#125; = useModal(<span class="string">'系统提示'</span>， <span class="string">'正在初始化...'</span>);</span><br><span class="line">render() &#123;</span><br><span class="line">  &lt;div&gt;<span class="xml"><span class="tag">&lt;<span class="name">CusomModal</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react组件开发实践</title>
      <link href="/2019/09/09/React%E7%BB%84%E4%BB%B6%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/"/>
      <url>/2019/09/09/React%E7%BB%84%E4%BB%B6%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<p>6 种类型分别为结构型组件、样式型组件、组合型组件、配置型组件、受控型组件、非受控组件<br><a id="more"></a></p><ol><li><p>结构性组件和样式性组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 样式性组件**/</span></span><br><span class="line">interface ModalProps &#123;</span><br><span class="line">  tilte: string;</span><br><span class="line">  content: string;</span><br><span class="line">&#125;</span><br><span class="line">&lt;Model title=<span class="string">"title"</span> content=<span class="string">"content"</span> /&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 结构性组件 **/</span></span><br><span class="line">interface ModalProps &#123;</span><br><span class="line">  title: React.ReactNode;</span><br><span class="line">  content: React.ReactNode;</span><br><span class="line">&#125;</span><br><span class="line">&lt;Modal title=&#123;&lt;h2&gt;Title&lt;<span class="regexp">/h2&gt;&#125; content=&#123;&lt;input type="text" /</span>&gt;&#125;&gt;</span><br></pre></td></tr></table></figure></li><li><p>组合型组件和配置型组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 组合型组件 **/</span></span><br><span class="line">&lt;Select defaultValue=<span class="string">"luck"</span>&gt;</span><br><span class="line">  &lt;Seclect.Option value=<span class="string">"jack"</span>&gt;jack&lt;<span class="regexp">/Seclect.Option&gt;</span></span><br><span class="line"><span class="regexp">  &lt;Seclect.Option value="lucy"&gt;lucy&lt;/</span>Seclect.Option&gt;</span><br><span class="line">&lt;<span class="regexp">/Select&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span>** 配置型组件 **<span class="regexp">/</span></span><br><span class="line"><span class="regexp">&lt;Select defaultValue="lucy" options=&#123;['lucy', 'jack']&#125; /</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>受控型组件和非受控性组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">interface Controlled &#123;</span><br><span class="line">  value: string;</span><br><span class="line">  onChange: <span class="built_in">Function</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface UnControlled &#123;</span><br><span class="line">  defaultValue?:<span class="built_in">String</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type inputProps =  Controlled | UnControlled;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 受控性组件 **/</span></span><br><span class="line">&lt;Input value=&#123;value&#125; onChange=&#123;onChange&#125;/&gt;</span><br><span class="line"><span class="comment">/** 非受控性组件 **/</span></span><br><span class="line">&lt;Input defaultValue=&#123;value&#125; /&gt;;</span><br><span class="line">&lt;Input /&gt;;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>window下安装redis的教程和基本配置</title>
      <link href="/2019/09/09/windows%E4%B8%8B%E5%AE%89%E8%A3%85redis%E7%9A%84%E6%95%99%E7%A8%8B%E5%92%8C%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/09/09/windows%E4%B8%8B%E5%AE%89%E8%A3%85redis%E7%9A%84%E6%95%99%E7%A8%8B%E5%92%8C%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>Redis 是完全开源免费的，遵守BSD协议，是一个高性能的key-value数据库。</p><a id="more"></a><ol><li>去官网下载安装包（详细教程可以去菜鸟教程）<blockquote><p><a href="https://github.com/dmajkic/redis/downloads" target="_blank" rel="noopener">redis安装包下载地址</a></p></blockquote></li><li>将解压缩文件的目录<code>D:\\servers\\Redis-x64-3.2.100</code>添加到环境变量（dos下可以直接操作）</li><li><p>开启服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> D:\\servers\\Redis-x64-3.2.100（必须进入到该目录下）</span><br><span class="line">D:\\servers\\Redis-x64-3.2.100&gt; redis-server.exe</span><br></pre></td></tr></table></figure></li><li><p>再打开一个dos,运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> D:\\servers\\Redis-x64-3.2.100&gt;</span><br><span class="line">D:\\servers\\Redis-x64-3.2.100&gt;redis-cli.exe</span><br></pre></td></tr></table></figure></li><li><p>配值权限（默认不具有权限）<br>在上述客户端命令行下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CONFIG SET requirepass <span class="string">"123456"</span> <span class="comment"># 设置密码为 ‘123456’</span></span><br><span class="line">auth <span class="string">"123456"</span> <span class="comment"># 使用密码登录</span></span><br><span class="line">CONFIG GET requirepass  <span class="comment"># 查看密码</span></span><br></pre></td></tr></table></figure></li><li><p>如何存储数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> myKey <span class="string">"abc"</span></span><br><span class="line">get myKey  <span class="comment"># "abc"</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> redis, db </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 系统下配置远程jdk、mysql服务</title>
      <link href="/2019/09/09/Ubuntu%2014.04.3%20LTS%20%E7%B3%BB%E7%BB%9F%E4%B9%8B%E6%8C%87%E4%BB%A4%E9%9B%86/"/>
      <url>/2019/09/09/Ubuntu%2014.04.3%20LTS%20%E7%B3%BB%E7%BB%9F%E4%B9%8B%E6%8C%87%E4%BB%A4%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<p>Ubuntu 14.04.3 LTS 系统 &gt;&gt;&gt; 基本指令集合</p><a id="more"></a><h2 id="linux-指令集"><a href="#linux-指令集" class="headerlink" title="linux 指令集"></a>linux 指令集</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line">======================操作系统信息=====================</span><br><span class="line">uname -a                      <span class="comment"># 查看内核 操作系统 CPU</span></span><br><span class="line">cat /proc/version             <span class="comment"># 查看系统内核</span></span><br><span class="line">head -n 1 /etc/issue          <span class="comment"># 查看操作系统版本</span></span><br><span class="line">cat /proc/cpuinfo             <span class="comment"># cat /proc/cpuinfo</span></span><br><span class="line">cat /proc/meminfo             <span class="comment"># 查看存储信息</span></span><br><span class="line">free -m                       <span class="comment"># 查看内存使用量和交换区使用量 </span></span><br><span class="line">grep MemTotal /proc/meminfo   <span class="comment"># 查看内存总量 </span></span><br><span class="line">grep MemFree /proc/meminfo    <span class="comment"># 查看空闲内存量 </span></span><br><span class="line">uptime                        <span class="comment"># 查看系统运行时间、用户数、负载</span></span><br><span class="line">df                            <span class="comment"># 查看硬盘信息</span></span><br><span class="line">ps -ef                        <span class="comment"># 查看所有进程 </span></span><br><span class="line">top                           <span class="comment"># 实时显示进程状态</span></span><br><span class="line">lspci |grep VGA               <span class="comment"># 查看显卡</span></span><br><span class="line">ps -e                         <span class="comment"># 查看进程</span></span><br><span class="line">jps                           <span class="comment"># 查看用户启动的进程</span></span><br><span class="line">sudo <span class="built_in">kill</span> 7082                <span class="comment"># 杀死进程</span></span><br><span class="line">top                           <span class="comment"># 看进程的PID，例如查看eclipse程序所在的目录</span></span><br><span class="line"><span class="built_in">cd</span> /proc/3093                 <span class="comment"># 查看该进程的文件夹信息</span></span><br><span class="line">ls -l exe                     <span class="comment"># 查看程序所在的目录</span></span><br><span class="line">nginx -v                      <span class="comment"># 查看ubuntu系统自带的nginx服务器的版本号</span></span><br><span class="line">cwd符号链接的就是进程3093的运行目录；</span><br><span class="line">exe符号连接就是执行程序的绝对路径；</span><br><span class="line">cmdline就是程序运行时输入的命令行命令；本例为：。/cbs</span><br><span class="line">cpu记录了进程可能运行在其上的cpu；显示虚拟的cpu信息</span><br><span class="line">environ记录了进程运行时的环境变量</span><br><span class="line">fd目录下是进程打开或使用的文件的符号连接</span><br><span class="line">。。。</span><br><span class="line">--------------------- </span><br><span class="line">命令格式：命令 [-选项] [参数]</span><br><span class="line">例如：ls -la /etc</span><br><span class="line"></span><br><span class="line">======================文件处理命令=====================</span><br><span class="line">ls -a -l -d -h -i             <span class="comment"># 列出当前目录下的子目录及其文件</span></span><br><span class="line"><span class="built_in">pwd</span>                           <span class="comment"># 打印当前工作目录</span></span><br><span class="line">mkidr old                     <span class="comment"># 创建名为old的目录</span></span><br><span class="line">mkdir -p /home/wind/mei       <span class="comment"># 递归创建目录</span></span><br><span class="line">rmdir old                     <span class="comment"># 只能删除空目录</span></span><br><span class="line">rm -r old                     <span class="comment"># 删除old目录</span></span><br><span class="line">rm -rf old                    <span class="comment"># 强制删除非空目录</span></span><br><span class="line">cp test.java /home            <span class="comment"># 将test.java文件拷贝到/home目录下</span></span><br><span class="line">cp -r old /home               <span class="comment"># 将old目录复制到/home路径下</span></span><br><span class="line">mv old new                    <span class="comment"># 将old目录命名为new</span></span><br><span class="line">mv jdk1.8.0_171 /usr/lib/xxx  <span class="comment"># 将文件从当前目录移动到 /usr/lib/xxx目录下</span></span><br><span class="line">cat                           <span class="comment"># 由第一行开始显示文件内容</span></span><br><span class="line">tac                           <span class="comment"># 文件内容从最后一行开始显示</span></span><br><span class="line">head  -n 20   test.sh                <span class="comment"># 取出文件前面几行</span></span><br><span class="line">tail  -n 20   test.sh                  <span class="comment"># 取出文件后面几行</span></span><br><span class="line">more -f /enter                         <span class="comment"># 一页一页翻动</span></span><br><span class="line">less                          <span class="comment"># </span></span><br><span class="line">nl                            <span class="comment"># 显示行号</span></span><br><span class="line">ln                            <span class="comment"># 创建索引文件</span></span><br><span class="line">vi/vim    xxx.txt             <span class="comment"># 若xxx.txt存在则开启编辑模式  反之，则新建该文件并开启编辑模式</span></span><br><span class="line">docker run  -d hub.c.163.com/library/nginx</span><br><span class="line">winpty docker run -it 68 bash</span><br><span class="line"></span><br><span class="line">======================权限管理命令=====================</span><br><span class="line">sudo</span><br><span class="line">sudo su                                          <span class="comment"># 进入root权限</span></span><br><span class="line">chmod [&#123;ugoa&#125; &#123;+-=&#125; &#123;rwx&#125;]   [文件或目录]         <span class="comment"># 修改文件或目录的权限</span></span><br><span class="line">chmod [mode = 421] [文件或目录]</span><br><span class="line">      - R 递归修改</span><br><span class="line">注意：</span><br><span class="line">    文件： r 权限代表可以 cat/tac/more/less/head/tail</span><br><span class="line">          w 权限代表可以  vim</span><br><span class="line">          x 权限代表 可执行 文件类型一般为 script <span class="built_in">command</span></span><br><span class="line">    目录： r 权限代表可以 ls</span><br><span class="line">          w 权限代表可以  touch mkdir rmdir rm</span><br><span class="line">          x 权限代表 <span class="built_in">cd</span> </span><br><span class="line">chown [用户] [文件或目录]                          <span class="comment"># 改变文件或者目录的所有者</span></span><br><span class="line">chgrp [用户组] [文件或目录]                        <span class="comment"># 改变文件或者目录的所有者</span></span><br><span class="line">unmask -S                                         <span class="comment"># 显示、设置文件的缺省权限       </span></span><br><span class="line"></span><br><span class="line">======================文件搜索命令=====================</span><br><span class="line">find -name .bashrc            <span class="comment"># 查找文件在什么地方</span></span><br><span class="line">find /ect -name linux         <span class="comment"># 在etc目录下查找名称linux的文件</span></span><br><span class="line">======================帮助命令========================</span><br><span class="line">======================用户管理命令=====================</span><br><span class="line"><span class="comment"># 用户的管理</span></span><br><span class="line">  <span class="comment">## 增加用户</span></span><br><span class="line">  <span class="comment">## 创建了一个用户sam，其中-d和-m选项用来为登录名sam产生一个主目录/usr/sam</span></span><br><span class="line">  useradd –d /usr/sam -m sam</span><br><span class="line">  <span class="comment">## 删除用户 </span></span><br><span class="line">  <span class="comment">## 删除用户sam在系统文件中（主要是/etc/passwd, /etc/shadow, /etc/group等）的记录，同时删除用户的主目录 </span></span><br><span class="line">  userdel -r sam </span><br><span class="line">  <span class="comment">## 修改账号</span></span><br><span class="line">  <span class="comment">## 将用户sam的登录Shell修改为ksh，主目录改为/home/z，用户组改为developer               </span></span><br><span class="line">  usermod -s /bin/ksh -d /home/z –g developer sam </span><br><span class="line"><span class="comment"># 用户口令的管理</span></span><br><span class="line">passwd  <span class="comment"># 普通用此命令修改自己的口令</span></span><br><span class="line">passwd sam  <span class="comment"># 超级用户为sam用户修改口令</span></span><br><span class="line"><span class="comment"># 用户组的管理</span></span><br><span class="line">  <span class="comment">## 增加一个新的用户组</span></span><br><span class="line">  <span class="comment">## 向系统中增加了一个新组group2，同时指定新组的组标识号是101</span></span><br><span class="line">  groupadd -g 101 group2</span><br><span class="line">  <span class="comment">## 删除一个已经存在用户组</span></span><br><span class="line">  <span class="comment">## 删除用户组group2</span></span><br><span class="line">  groupdel group2</span><br><span class="line">  <span class="comment">## 修改用户组的属性</span></span><br><span class="line">  <span class="comment">## groupmod –g 10000 -n group3 group2</span></span><br><span class="line">  groupmod –g 10000 -n group3 group2</span><br><span class="line"><span class="comment"># 用户可以在他所属的多个用户组之间切换</span></span><br><span class="line">newgrp root <span class="comment"># 切换到根用户组</span></span><br><span class="line"><span class="comment"># 与用户账号有关的文件</span></span><br><span class="line"><span class="comment"># 每行的含义：（用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录Shell）</span></span><br><span class="line">cat /etc/passwd</span><br><span class="line">======================磁盘命令========================</span><br><span class="line">df    <span class="comment"># 检查文件系统的磁盘空间占用情况</span></span><br><span class="line">du    <span class="comment"># u命令也是查看使用空间的，但是与df命令不同的是Linux du命令是对文件和目录磁盘使用的空间的查看</span></span><br><span class="line">fdisk <span class="comment"># fdisk 是 Linux 的磁盘分区表操作工具</span></span><br><span class="line">mkfs -t ext3 /dev/hdc6 <span class="comment"># mkfs -t ext3 /dev/hdc6</span></span><br><span class="line">fsck -C -f -t ext3 /dev/hdc6  <span class="comment"># 强制检测 /dev/hdc6 分区:</span></span><br><span class="line">mkdir /mnt/hdc6</span><br><span class="line">mount /dev/hdc6 /mnt/hdc6  <span class="comment"># mount /dev/hdc6 /mnt/hdc6</span></span><br><span class="line">umount /dev/hdc6  <span class="comment"># 卸载/dev/hdc6</span></span><br><span class="line">======================压缩解压命令=====================</span><br><span class="line">touch old                     <span class="comment"># 创建old文件，其他的过程都和目录的操作方法是一样的</span></span><br><span class="line">tar -zxvf jdk-8u171-linux-x64.tar.gz        <span class="comment"># 解压缩文件</span></span><br><span class="line">======================网络命令========================</span><br><span class="line">curl http://www.yahoo.com  <span class="comment"># www.yahoo.com 的html就稀里哗啦地显示在屏幕上了</span></span><br><span class="line"> rz，sz       <span class="comment"># 先安装 install lrzsz 是Linux/Unix同Windows进行ZModem文件传输的命令行工具。</span></span><br><span class="line">curl -o page.html http://www.yahoo.com  <span class="comment"># 你就可以看到屏幕上出现一个下载页面进度指示。等进展到100%，自然就OK咯</span></span><br><span class="line">======================关机重启命令=====================</span><br><span class="line">sync                          <span class="comment"># 将数据由内存同步到硬盘中。</span></span><br><span class="line">shutdown                      <span class="comment"># 关机指令</span></span><br><span class="line">shutdown –h 10                <span class="comment"># 计算机将在10分钟后关机，并且会显示在登陆用户的当前屏幕中。</span></span><br><span class="line">shutdown –h now               <span class="comment"># 立马关机</span></span><br><span class="line">shutdown –h 20:25             <span class="comment"># 系统会在今天20:25关机</span></span><br><span class="line">shutdown –h +10               <span class="comment"># 十分钟后关机</span></span><br><span class="line">shutdown –r now               <span class="comment"># 系统立马重启</span></span><br><span class="line">shutdown –r +10               <span class="comment"># 系统十分钟后重启</span></span><br><span class="line">reboot                        <span class="comment"># 就是重启，等同于 shutdown –r now</span></span><br><span class="line">halt                          <span class="comment"># 关闭系统，等同于shutdown –h now 和 poweroff</span></span><br><span class="line">halt -p                       <span class="comment"># 关闭机器</span></span><br><span class="line">halp --reboot                 <span class="comment"># 重启机器</span></span><br><span class="line">poweroff                      <span class="comment"># 关闭机器</span></span><br><span class="line">poweroff --halt               <span class="comment"># 停止机器</span></span><br><span class="line">poweroff --reboot             <span class="comment"># 重启机器</span></span><br><span class="line">reboot                        <span class="comment"># 重启机器</span></span><br><span class="line">reboot --halt                 <span class="comment"># 停止机器</span></span><br><span class="line">reboot -p                     <span class="comment"># 关闭机器</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker 基本指令</title>
      <link href="/2019/09/09/docker%E5%9F%BA%E6%9C%AC%E6%8C%87%E4%BB%A4/"/>
      <url>/2019/09/09/docker%E5%9F%BA%E6%9C%AC%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>docker 基本指令<br><a id="more"></a></p><ol><li>安装docker 客户端好服务端 <a href="https://www.docker.com/" target="_blank" rel="noopener">官网</a></li><li><p>查看镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> docker images;</span><br><span class="line">``` </span><br><span class="line">2. 拉取镜像。[网易蜂巢](https://www.163yun.com/)，注册-&gt;进入控制台-&gt;产品-&gt;镜像中心</span><br><span class="line"></span><br><span class="line">以拉取tomcat为例，在docker客户端执行：</span><br><span class="line">```bash</span><br><span class="line">docker pull hub.c.163.com/library/tomcat:latest</span><br></pre></td></tr></table></figure></li><li><p>创建tomcat容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -ti --name docker-tomcat -p 8088:80 -d hub.c.163.com/library/tomcat:latest</span><br></pre></td></tr></table></figure></li></ol><p>以上参数可以使用 docker run –help 命令查看<br>以上容器创建成功后，会返回进程唯一标识 </p><ol start="4"><li><p>容器创建成功后，相信你会使用到以下指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br><span class="line">docker logs -f bf08b7f2cd89         <span class="comment"># 查看应用程序日志</span></span><br><span class="line">docker <span class="built_in">exec</span> -ti bf08b7f2cd89 bash   <span class="comment"># 进入容器终端</span></span><br><span class="line">docker stop docker-tomcat           <span class="comment"># 停止docker-tomcat容器</span></span><br><span class="line">docker <span class="built_in">kill</span> docker-tomcat           <span class="comment"># 杀死docker-tomcat容器</span></span><br><span class="line">docker restart docker-tomcat        <span class="comment"># 重启docker-tomcat容器</span></span><br><span class="line">docker rm docker-tomcat             <span class="comment"># 移除docker-tomcat容器</span></span><br><span class="line">docker port docker-tomcat           <span class="comment"># 查看网络端口</span></span><br><span class="line">docker inspect docker-tomcat        <span class="comment"># 检查 WEB 应用程序</span></span><br></pre></td></tr></table></figure></li><li><p>构建镜像(在 tomcat中 运行一个jpress.war 文件)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cat Dockerfile                               <span class="comment"># 编写指令</span></span><br><span class="line"></span><br><span class="line">===================内容如下======================</span><br><span class="line">FROM 72d2be374029</span><br><span class="line">MAINTAINER 978189365@qq.com</span><br><span class="line">COPY /home/wind/apps/jpress.war /usr/<span class="built_in">local</span>/tomcat/webapps</span><br><span class="line">================================================</span><br><span class="line">docker build -t tomcat-wind-jpress .          <span class="comment"># 编译</span></span><br><span class="line">docker tag 860c279d2fec runoob/centos:dev    <span class="comment"># 设置镜像标签</span></span><br></pre></td></tr></table></figure></li></ol><p>-t ：指定要创建的目标镜像名</p><p>. ：Dockerfile 文件所在目录，可以指定Dockerfile 的绝对路径</p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>window 操作系统下在本机安装mongodb数据库的简单教程</title>
      <link href="/2019/09/09/windows%20OS%20%E5%AE%89%E8%A3%85mongodb%E6%95%99%E7%A8%8B/"/>
      <url>/2019/09/09/windows%20OS%20%E5%AE%89%E8%A3%85mongodb%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>请先知：window 操作系统下在本机安装mongodb数据库的简单教程</p><a id="more"></a><p>跟往常一样，先上官网</p><blockquote><p><a href="https://www.mongodb.com/" target="_blank" rel="noopener">mongodb官网</a></p></blockquote><ol><li><p>在官网下载安装包(.zip包或.msi),笔者是安装的压缩包）(v-4.0.7)</p></li><li><p>解压缩包在某个目录下（如：<code>D:\servers\mongodb-win32-x86_64-2008plus-ssl-4.0.7</code>）</p></li><li><p>新建必要目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> D:\servers\mongodb-win32-x86_64-2008plus-ssl-4.0.7\</span><br><span class="line">mkdir data</span><br><span class="line"><span class="built_in">cd</span> data</span><br><span class="line">mkdir db</span><br><span class="line">mkdir <span class="built_in">log</span></span><br></pre></td></tr></table></figure></li><li><p>创建配置文件 <code>mongod.cfg</code>，文件内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">systemLog:</span></span><br><span class="line"><span class="attr">  destination:</span> <span class="string">file</span></span><br><span class="line"><span class="attr">  path:</span> <span class="attr">D:\\servers\\mongodb-win32-x86_64-2008plus-ssl-4.0.7\\data\\log\\mongodb.log</span></span><br><span class="line"><span class="attr">storage:</span></span><br><span class="line"><span class="attr">  dbPath:</span> <span class="attr">D:\\servers\\mongodb-win32-x86_64-2008plus-ssl-4.0.7\\data\db</span></span><br></pre></td></tr></table></figure></li><li><p>安装<code>MongoDB</code>服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> D:\servers\mongodb-win32-x86_64-2008plus-ssl-4.0.7\bin\</span><br><span class="line">D:\servers\mongodb-win32-x86_64-2008plus-ssl-4.0.7\bin\ mongod.exe --config <span class="string">"D:\servers\mongodb-win32-x86_64-2008plus-ssl-4.0.7\mongod.cfg"</span> --install --auth </span><br><span class="line">其中，参数 `auth` 意味着开启权限认证，即连接数据库时需要用户名和密码（用命令行创建即可，后面会提到，怎么创建和修改等）;</span><br></pre></td></tr></table></figure></li><li><p>启动、关闭和移除MongoDB服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">net start MongoDB （启动成功后，可以在资源管理器中查看`MonDB`服务）</span><br><span class="line">net stop MongoDB</span><br><span class="line">D:\servers\mongodb-win32-x86_64-2008plus-ssl-4.0.7\bin\mongod.exe --remove</span><br></pre></td></tr></table></figure></li><li><p>创建用户<br>定位到<code>D:\servers\mongodb-win32-x86_64-2008plus-ssl-4.0.7\bin\</code>，使用mongo.exe进入mongodb的命令行管理。<br>键入命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;use admin</span><br><span class="line">&gt;db.createUser(&#123;user: <span class="string">"root"</span>, <span class="built_in">pwd</span>: <span class="string">"123456"</span>, roles:[<span class="string">"userAdminAnyDatabase"</span>]&#125;) （新版的 3.0+）</span><br><span class="line">好了，现在我们已经为mongodb设置了一个全局用户root（因为使用了表admin），接下来先重启mongodb，使创建的用户生效。</span><br></pre></td></tr></table></figure></li><li><p>用户登录<br>用命令行进入管理端（同上）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use admin</span><br><span class="line">db.auth(<span class="string">'root'</span>, <span class="string">'123456'</span>); <span class="comment"># 使用root身份登录</span></span><br></pre></td></tr></table></figure></li><li><p>如何创建数据库用户<br>首先保证你已经以用户管理员的身份登录 admin 数据库。然后用 use 命令切换到目标数据库，同样用 db.createUser() 命令来创建用户，其中角色名为 “readWrite”。<br>普通的数据库用户角色有两种，read 和 readWrite。顾名思义，前者只能读取数据不能修改，后者可以读取和修改。<br>下面是一个例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; use <span class="built_in">test</span> <span class="comment"># 创建数据库test</span></span><br><span class="line">&gt; show dbs <span class="comment"># 显示数据库</span></span><br><span class="line">switched to db <span class="built_in">test</span></span><br><span class="line">&gt; db.createUser(&#123;user:<span class="string">"wind"</span>,<span class="built_in">pwd</span>:<span class="string">"123456"</span>,roles:[<span class="string">"readWrite"</span>]&#125;)</span><br><span class="line">Successfully added user: &#123; <span class="string">"user"</span> : <span class="string">"testuser"</span>, <span class="string">"roles"</span> : [ <span class="string">"readWrite"</span> ] &#125;</span><br><span class="line">&gt; db.auth(<span class="string">"wind"</span>,<span class="string">"123456"</span>)</span><br><span class="line">1</span><br><span class="line"><span class="comment"># 这样 MongoDB 的数据安全性就得到保障了，没有登录的客户端将无法执行任何命令。</span></span><br></pre></td></tr></table></figure></li></ol><p>最后，推荐一个牛逼的客户端<a href="https://studio3t.com/" target="_blank" rel="noopener">Studio 3T</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> mongodb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识Java_Spring 之要点记忆</title>
      <link href="/2019/09/09/%E5%88%9D%E8%AF%86java_Spring%E4%B9%8B%E8%A6%81%E7%82%B9%E8%AE%B0%E5%BF%86/"/>
      <url>/2019/09/09/%E5%88%9D%E8%AF%86java_Spring%E4%B9%8B%E8%A6%81%E7%82%B9%E8%AE%B0%E5%BF%86/</url>
      
        <content type="html"><![CDATA[<p>Spring 是最受欢迎的企业级 Java 应用程序开发框架，数以百万的来自世界各地的开发人员使用 Spring 框架来创建性能好、易于测试、可重用的代码。<br><a id="more"></a></p><h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><ul><li>Spring 最认同的技术是控制反转的依赖注入（DI）模式。</li><li>控制反转（IoC）是一个通用的概念，它可以用许多不同的方式去表达，依赖注入仅仅是控制反转的一个具体的例子。</li><li>IOC 容器具有依赖注入功能的容器，它可以创建对象，IOC 容器负责实例化、定位、配置应用程序中的对象及建立这些对象间的依赖。通常new一个实例，控制权由程序员控制，而”控制反转”是指new实例工作不由程序员来做而是交给Spring容器来做。</li><li>Spring 提供了以下两种不同类型的容器<ol><li>Spring BeanFactory 容器（org.springframework.beans.factory.BeanFactory）</li><li>Spring ApplicationContext 容器 （org.springframework.context.ApplicationContext）</li></ol></li></ul><p>spring 框架:</p><p><img src="http://pqcpelaly.bkt.clouddn.com/arch1.png" alt="spring"><br>（注：JDBC=Java Data Base Connectivity，ORM=Object Relational Mapping，OXM=Object XML Mapping，JMS=Java Message Service）</p><h2 id="Spring-Bean"><a href="#Spring-Bean" class="headerlink" title="Spring Bean"></a>Spring Bean</h2><ul><li>如何创建一个 bean</li><li>bean 的生命周期的详细信息</li><li>bean 的依赖关系</li></ul><ol><li>定义： bean 是一个被实例化，组装，并通过 Spring IoC 容器所管理的对象（定义一个类，在配置好元数据，然后交给容器去实例这就是bean的定义过程）<br>Bean 与 Spring 容器的关系<br><img src="http://pqcpelaly.bkt.clouddn.com/1540796406991057.jpg" alt="bean"></li><li>作用域：singleton、prototype、request、session和global session</li><li>生命周期<br>Bean的生命周期可以表达为：</li></ol><p>Bean的定义——Bean的初始化——Bean的使用——Bean的销毁</p><p>在基于 XML 的配置元数据的情况下，你可以使用 init-method 属性来指定带有 void 无参数方法的名称。例如：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"exampleBean"</span> <span class="attr">class</span>=<span class="string">"examples.ExampleBean"</span> <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"destroy"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p>下面是类的定义：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleBean</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">// do some initialization work</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleBean</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">// do some destruction work</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol start="4"><li><p>后置处理器<br>Bean 后置处理器允许在调用初始化方法前后对 Bean 进行额外的处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wind;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.BeanPostProcessor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InitHelloWorld</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"BeforeInitialization : "</span> + beanName);</span><br><span class="line">        <span class="keyword">return</span> bean;  <span class="comment">// you can return any other object as well</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"AfterInitialization : "</span> + beanName);</span><br><span class="line">        <span class="keyword">return</span> bean;  <span class="comment">// you can return any other object as well</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义继承</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloWorld"</span> <span class="attr">class</span>=<span class="string">"com.wind.HelloWorld"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"message1"</span> <span class="attr">value</span>=<span class="string">"Hello World!"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"message2"</span> <span class="attr">value</span>=<span class="string">"Hello Second World!"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloIndia"</span> <span class="attr">class</span>=<span class="string">"com.wind.HelloIndia"</span> <span class="attr">parent</span>=<span class="string">"helloWorld"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"message1"</span> <span class="attr">value</span>=<span class="string">"Hello India!"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"message3"</span> <span class="attr">value</span>=<span class="string">"Namaste India!"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.wind.InitHelloWorld"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="Spring-依赖注入"><a href="#Spring-依赖注入" class="headerlink" title="Spring 依赖注入"></a>Spring 依赖注入</h2><ol><li>通过构造函数注入<br>假设你有一个包含文本编辑器组件的应用程序，并且你想要提供拼写检查。标准代码看起来是这样的：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextEditor</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> SpellChecker spellChecker;  </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">TextEditor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      spellChecker = <span class="keyword">new</span> SpellChecker(); <span class="comment">// 相当于写死啦</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>在控制反转的场景中，我们反而会做这样的事情：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextEditor</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> SpellChecker spellChecker;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">TextEditor</span><span class="params">(SpellChecker spellChecker)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.spellChecker = spellChecker;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for textEditor bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"textEditor"</span> <span class="attr">class</span>=<span class="string">"com.tutorialspoint.TextEditor"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"spellChecker"</span> <span class="attr">ref</span>=<span class="string">"spellChecker"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for spellChecker bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"spellChecker"</span> <span class="attr">class</span>=<span class="string">"com.tutorialspoint.SpellChecker"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>通过设置函数注入<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">```java</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextEditor</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> SpellChecker spellChecker;  </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSpellChecker</span><span class="params">(SpellChecker spellChecker)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.spellChecker = spellChecker;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for textEditor bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"textEditor"</span> <span class="attr">class</span>=<span class="string">"com.tutorialspoint.TextEditor"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"spellChecker"</span> <span class="attr">ref</span>=<span class="string">"spellChecker"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for spellChecker bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"spellChecker"</span> <span class="attr">class</span>=<span class="string">"com.tutorialspoint.SpellChecker"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>两者唯一区别：就是在基于构造函数注入中，我们使用的是〈bean〉标签中的〈constructor-arg〉元素，而在基于设值函数的注入中，我们使用的是〈bean〉标签中的〈property〉元素。</p>]]></content>
      
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java_SpringMVC框架的实现原理及案例分析</title>
      <link href="/2019/09/09/Java_SpringMVC%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E5%8F%8A%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
      <url>/2019/09/09/Java_SpringMVC%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E5%8F%8A%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>java_SpringMVC框架的实现原理及案例分析<br><a id="more"></a></p><h2 id="应用程序的流程"><a href="#应用程序的流程" class="headerlink" title="应用程序的流程"></a>应用程序的流程</h2><p><img src="http://pqcpelaly.bkt.clouddn.com/springmvc5.png" alt="tushi"></p><hr><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><code>web.xml</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring入口 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 项目启动时，就加载并实例化 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 拦截所有不包括jsp的请求 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><code>springmvc-servlet.xml</code> (${servlet-name}-servlet.xml) location=”/WEB-INF/“<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- springmvc注解驱动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 开启注解扫描 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 配置试图解析器</span></span><br><span class="line"><span class="comment">            prefix:指定试图所在目录</span></span><br><span class="line"><span class="comment">            suffix:指定视图的后缀名</span></span><br><span class="line"><span class="comment">            例如：prifex="/WEB-INF/jsp/",suffix=".jsp",当viewname="test"时，跳转到/WEB-INF/jsp/test.jsp页面</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><code>UserControll.java</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"findAllUsers"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">findAllUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        ArrayList&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;User&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            User user = <span class="keyword">new</span> User();</span><br><span class="line">            user.setUsername(<span class="string">"zs"</span> + i);</span><br><span class="line">            user.setAge(<span class="number">20</span> + i);</span><br><span class="line">            user.setIncome(<span class="number">16000.0</span>+i*<span class="number">100</span>);</span><br><span class="line">            user.setIsMarry(<span class="keyword">false</span>);</span><br><span class="line">            user.setHobby(<span class="keyword">new</span> String[] &#123; <span class="string">"篮球"</span>+i, <span class="string">"足球"</span>+i &#125;);</span><br><span class="line">            users.add(user);</span><br><span class="line">        &#125;</span><br><span class="line">        mv.addObject(<span class="string">"users"</span>, users);</span><br><span class="line">        mv.setViewName(<span class="string">"users"</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>User.java</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Boolean isMarry;</span><br><span class="line">    <span class="keyword">private</span> Double income;</span><br><span class="line">    <span class="keyword">private</span> String[] hobby;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">getIsMarry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> isMarry;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIsMarry</span><span class="params">(Boolean isMarry)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.isMarry = isMarry;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">getIncome</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> income;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIncome</span><span class="params">(Double income)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.income = income;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] getHobby() &#123;</span><br><span class="line">        <span class="keyword">return</span> hobby;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHobby</span><span class="params">(String[] hobby)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hobby = hobby;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User [username="</span> + username + <span class="string">", age="</span> + age + <span class="string">", isMarry="</span> + isMarry + <span class="string">", income="</span> + income</span><br><span class="line">                + <span class="string">", hobby="</span> + Arrays.toString(hobby) + <span class="string">"]"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>JSP页面</code><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> type=<span class="string">"text/css"</span> href=<span class="string">"/css/user.css"</span> /&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;table id=<span class="string">"customers"</span>&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;用户名&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;年龄&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;收入&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;婚姻状态&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;兴趣爱好&lt;/th&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;!-- 遍历后台传递的集合数据 --&gt;</span><br><span class="line">        &lt;c:forEach items=<span class="string">"$&#123;users&#125;"</span> <span class="keyword">var</span>=<span class="string">"user"</span>&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;$&#123;user.username&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;user.age&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;user.income&#125;&lt;/td&gt;</span><br><span class="line">                &lt;!-- 判婚姻状态 --&gt;</span><br><span class="line">                &lt;td&gt;&lt;c:choose&gt;</span><br><span class="line">                        &lt;c:when test="$&#123;user.isMarry&#125;"&gt;已婚&lt;/c:when&gt;</span><br><span class="line">                        &lt;c:otherwise&gt;未婚&lt;/c:otherwise&gt;</span><br><span class="line">                    &lt;/c:choose&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line"></span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                &lt;!-- 再次遍历用户爱好 --&gt;</span><br><span class="line">                &lt;c:forEach items=<span class="string">"$&#123;user.hobby&#125;"</span> <span class="keyword">var</span>=<span class="string">"hobby"</span> varStatus=<span class="string">"status"</span>&gt;</span><br><span class="line">                    $&#123;hobby&#125; </span><br><span class="line">                    &lt;!-- 如果不是最后一个爱好，则加上逗号，否则就不加 --&gt;</span><br><span class="line">                    &lt;c:if test="$&#123;!status.last&#125;"&gt;,&lt;/c:if&gt;</span><br><span class="line">                &lt;/c:forEach&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/c:forEach&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> springMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java_SpringMVC框架的实现原理及其详解</title>
      <link href="/2019/09/09/Java_SpringMVC%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E5%8F%8A%E8%AF%A6%E8%A7%A3(%E4%B8%8A)/"/>
      <url>/2019/09/09/Java_SpringMVC%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E5%8F%8A%E8%AF%A6%E8%A7%A3(%E4%B8%8A)/</url>
      
        <content type="html"><![CDATA[<p>java_SpringMVC框架的实现原理及其详解<br><a id="more"></a></p><h2 id="1-Spring-mvc介绍"><a href="#1-Spring-mvc介绍" class="headerlink" title="1. Spring mvc介绍"></a>1. Spring mvc介绍</h2><p>SpringMVC框架是以请求为驱动，围绕Servlet设计，将请求发给控制器，然后通过模型对象，分派器来展示请求结果视图。其中核心类是DispatcherServlet，它是一个Servlet，顶层是实现的Servlet接口。</p><h2 id="2-SpringMVC使用"><a href="#2-SpringMVC使用" class="headerlink" title="2. SpringMVC使用"></a>2. SpringMVC使用</h2><p>需要在web.xml中配置DispatcherServlet。并且需要配置spring监听器ContextLoaderListener</p><p><code>web.xml</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span>        </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 如果不设置init-param标签，则必须在/WEB-INF/下创建xxx-servlet.xml文件，其中xxx是servlet-name中配置的名称。  --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="3-SpringMVC运行原理"><a href="#3-SpringMVC运行原理" class="headerlink" title="3. SpringMVC运行原理"></a>3. SpringMVC运行原理</h2><p>  流程图：<br>  <img src="http://pqcpelaly.bkt.clouddn.com/springmvc.png" alt="图示"></p><p>   流程说明：</p><ol><li>客户端（浏览器）发送请求，直接请求到DispatcherServlet。</li><li>DispatcherServlet根据请求信息调用HandlerMapping，解析请求对应的Handler。</li><li>解析到对应的Handler后，开始由HandlerAdapter适配器处理。</li><li>HandlerAdapter会根据Handler来调用真正的处理器开处理请求，并处理相应的业务逻辑。</li><li>处理器处理完业务后，会返回一个ModelAndView对象，Model是返回的数据对象，View是个逻辑上的View。</li><li>ViewResolver会根据逻辑View查找实际的View。</li><li>DispaterServlet把返回的Model传给View。 </li><li>通过View返回给请求者（浏览器）<h2 id="4-DispatcherServlet详细解析"><a href="#4-DispatcherServlet详细解析" class="headerlink" title="4. DispatcherServlet详细解析"></a>4. DispatcherServlet详细解析</h2>首先看下源码：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.springframework.web.servlet;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"serial"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DispatcherServlet</span> <span class="keyword">extends</span> <span class="title">FrameworkServlet</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String MULTIPART_RESOLVER_BEAN_NAME = <span class="string">"multipartResolver"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String LOCALE_RESOLVER_BEAN_NAME = <span class="string">"localeResolver"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String THEME_RESOLVER_BEAN_NAME = <span class="string">"themeResolver"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String HANDLER_MAPPING_BEAN_NAME = <span class="string">"handlerMapping"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String HANDLER_ADAPTER_BEAN_NAME = <span class="string">"handlerAdapter"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String HANDLER_EXCEPTION_RESOLVER_BEAN_NAME = <span class="string">"handlerExceptionResolver"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String REQUEST_TO_VIEW_NAME_TRANSLATOR_BEAN_NAME = <span class="string">"viewNameTranslator"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String VIEW_RESOLVER_BEAN_NAME = <span class="string">"viewResolver"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FLASH_MAP_MANAGER_BEAN_NAME = <span class="string">"flashMapManager"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String WEB_APPLICATION_CONTEXT_ATTRIBUTE = DispatcherServlet.class.getName() + <span class="string">".CONTEXT"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String LOCALE_RESOLVER_ATTRIBUTE = DispatcherServlet.class.getName() + <span class="string">".LOCALE_RESOLVER"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String THEME_RESOLVER_ATTRIBUTE = DispatcherServlet.class.getName() + <span class="string">".THEME_RESOLVER"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String THEME_SOURCE_ATTRIBUTE = DispatcherServlet.class.getName() + <span class="string">".THEME_SOURCE"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String INPUT_FLASH_MAP_ATTRIBUTE = DispatcherServlet.class.getName() + <span class="string">".INPUT_FLASH_MAP"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String OUTPUT_FLASH_MAP_ATTRIBUTE = DispatcherServlet.class.getName() + <span class="string">".OUTPUT_FLASH_MAP"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FLASH_MAP_MANAGER_ATTRIBUTE = DispatcherServlet.class.getName() + <span class="string">".FLASH_MAP_MANAGER"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCEPTION_ATTRIBUTE = DispatcherServlet.class.getName() + <span class="string">".EXCEPTION"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PAGE_NOT_FOUND_LOG_CATEGORY = <span class="string">"org.springframework.web.servlet.PageNotFound"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_STRATEGIES_PATH = <span class="string">"DispatcherServlet.properties"</span>;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> Log pageNotFoundLogger = LogFactory.getLog(PAGE_NOT_FOUND_LOG_CATEGORY);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Properties defaultStrategies;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">ClassPathResource resource = <span class="keyword">new</span> ClassPathResource(DEFAULT_STRATEGIES_PATH, DispatcherServlet.class);</span><br><span class="line">defaultStrategies = PropertiesLoaderUtils.loadProperties(resource);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Could not load 'DispatcherServlet.properties': "</span> + ex.getMessage());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/** Detect all HandlerMappings or just expect "handlerMapping" bean? */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> detectAllHandlerMappings = <span class="keyword">true</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/** Detect all HandlerAdapters or just expect "handlerAdapter" bean? */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> detectAllHandlerAdapters = <span class="keyword">true</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/** Detect all HandlerExceptionResolvers or just expect "handlerExceptionResolver" bean? */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> detectAllHandlerExceptionResolvers = <span class="keyword">true</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/** Detect all ViewResolvers or just expect "viewResolver" bean? */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> detectAllViewResolvers = <span class="keyword">true</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/** Throw a NoHandlerFoundException if no Handler was found to process this request? **/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> throwExceptionIfNoHandlerFound = <span class="keyword">false</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/** Perform cleanup of request attributes after include request? */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> cleanupAfterInclude = <span class="keyword">true</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/** MultipartResolver used by this servlet */</span></span><br><span class="line"><span class="keyword">private</span> MultipartResolver multipartResolver;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/** LocaleResolver used by this servlet */</span></span><br><span class="line"><span class="keyword">private</span> LocaleResolver localeResolver;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/** ThemeResolver used by this servlet */</span></span><br><span class="line"><span class="keyword">private</span> ThemeResolver themeResolver;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/** List of HandlerMappings used by this servlet */</span></span><br><span class="line"><span class="keyword">private</span> List&lt;HandlerMapping&gt; handlerMappings;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/** List of HandlerAdapters used by this servlet */</span></span><br><span class="line"><span class="keyword">private</span> List&lt;HandlerAdapter&gt; handlerAdapters;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/** List of HandlerExceptionResolvers used by this servlet */</span></span><br><span class="line"><span class="keyword">private</span> List&lt;HandlerExceptionResolver&gt; handlerExceptionResolvers;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/** RequestToViewNameTranslator used by this servlet */</span></span><br><span class="line"><span class="keyword">private</span> RequestToViewNameTranslator viewNameTranslator;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> FlashMapManager flashMapManager;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/** List of ViewResolvers used by this servlet */</span></span><br><span class="line"><span class="keyword">private</span> List&lt;ViewResolver&gt; viewResolvers;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DispatcherServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DispatcherServlet</span><span class="params">(WebApplicationContext webApplicationContext)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(webApplicationContext);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onRefresh</span><span class="params">(ApplicationContext context)</span> </span>&#123;</span><br><span class="line">initStrategies(context);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initStrategies</span><span class="params">(ApplicationContext context)</span> </span>&#123;</span><br><span class="line">initMultipartResolver(context);</span><br><span class="line">initLocaleResolver(context);</span><br><span class="line">initThemeResolver(context);</span><br><span class="line">initHandlerMappings(context);</span><br><span class="line">initHandlerAdapters(context);</span><br><span class="line">initHandlerExceptionResolvers(context);</span><br><span class="line">initRequestToViewNameTranslator(context);</span><br><span class="line">initViewResolvers(context);</span><br><span class="line">initFlashMapManager(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>DispatcherServlet类中的属性beans：</p><ul><li>HandlerMapping：用于handlers映射请求和一系列的对于拦截器的前处理和后处理，大部分用@Controller注解。<ol><li>HandlerMapping接口处理请求的映射</li><li>HandlerMapping接口的实现类：</li><li>SimpleUrlHandlerMapping类通过配置文件把URL映射到Controller类。</li><li>DefaultAnnotationHandlerMapping类通过注解把URL映射到Controller类。</li></ol></li><li>HandlerAdapter：帮助DispatcherServlet处理映射请求处理程序的适配器，而不用考虑实际调用的是 哪个处理程序。</li><li>HandlerExceptionResolver：处理映射异常。</li><li>ViewResolver：根据实际配置解析实际的View类型。<ol><li>ViewResolver接口解析View视图。</li><li>UrlBasedViewResolver类 通过配置文件，把一个视图名交给到一个View来处理。</li></ol></li><li>LocaleResolver：解决客户正在使用的区域设置以及可能的时区，以便能够提供国际化视野。</li><li>ThemeResolver：解决Web应用程序可以使用的主题，例如提供个性化布局。</li><li>MultipartResolver：解析多部分请求，以支持从HTML表单上传文件。</li><li>FlashMapManager：存储并检索可用于将一个请求属性传递到另一个请求的input和output的FlashMap，通常用于重定向。</li></ul><p>在Web MVC框架中，每个DispatcherServlet都拥自己的WebApplicationContext，它继承了ApplicationContext。WebApplicationContext包含了其上下文和Servlet实例之间共享的所有的基础框架beans。</p>]]></content>
      
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring的工作原理</title>
      <link href="/2019/09/09/java_spring%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"/>
      <url>/2019/09/09/java_spring%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>spring的工作原理<br><a id="more"></a><br>spring的工作原理</p><h2 id="一、-IoC-Inversion-of-control-控制反转"><a href="#一、-IoC-Inversion-of-control-控制反转" class="headerlink" title="一、 IoC(Inversion of control): 控制反转"></a>一、 IoC(Inversion of control): 控制反转</h2><h3 id="1、IoC："><a href="#1、IoC：" class="headerlink" title="1、IoC："></a>1、IoC：</h3><p>概念：控制权由对象本身转向容器；由容器根据配置文件去创建实例并创建各个实例之间的依赖关系<br>核心：bean工厂；在Spring中，bean工厂创建的各个实例称作bean </p><h2 id="二、AOP-Aspect-Oriented-Programming-面向方面编程-其实我的理解是，通过配置文件来实现模块和模块，对象和对象的分离。"><a href="#二、AOP-Aspect-Oriented-Programming-面向方面编程-其实我的理解是，通过配置文件来实现模块和模块，对象和对象的分离。" class="headerlink" title="二、AOP(Aspect-Oriented Programming): 面向方面编程 (其实我的理解是，通过配置文件来实现模块和模块，对象和对象的分离。)"></a>二、AOP(Aspect-Oriented Programming): 面向方面编程 (其实我的理解是，通过配置文件来实现模块和模块，对象和对象的分离。)</h2><ol><li>代理的两种方式：<br>静态代理： </li></ol><ul><li>针对每个具体类分别编写代理类； </li><li>针对一个接口编写一个代理类；<br>动态代理： </li><li>针对一个方面编写一个InvocationHandler，然后借用JDK反射包中的Proxy类为各种接口动态生成相应的代理类 </li></ul><ol start="2"><li>AOP的主要原理：动态代理 </li></ol><h2 id="三、Spring工作原理"><a href="#三、Spring工作原理" class="headerlink" title="三、Spring工作原理"></a>三、Spring工作原理</h2><ul><li>Spring 已经用过一段时间了，感觉Spring是个很不错的框架。内部最核心的就是IOC了，<br>动态注入，让一个对象的创建不用new了，可以自动的生产，这其实就是利用java里的反射<br>反射其实就是在运行时动态的去创建、调用对象</li><li>Spring就是在运行时，跟xml  Spring的配置文件来动态的创建对象，和调用对象里的方法的 。 </li><li>Spring还有一个核心就是AOP这个就是面向切面编程，可以为某一类对象 进行监督和控制（也就是 在调用这类对象的具体方法的前后去调用你指定的 模块）从而达到对一个模块扩充的功能。这些都是通过 配置类达到的。</li><li>Spring目的：就是让对象与对象（模块与模块）之间的关系没有通过代码来关联，都是通过配置类说明管理的（Spring根据这些配置 内部通过反射去动态的组装对象） </li><li>要记住：Spring是一个容器，凡是在容器里的对象才会有Spring所提供的这些服务和功能。 </li><li>Spring里用的最经典的一个设计模式就是：模板方法模式。（这里我都不介绍了，是一个很常用的设计模式） </li><li>Spring里的配置是很多的，很难都记住，但是Spring里的精华也无非就是以上的两点，把以上两点跟理解了也就基本上掌握了Spring. </li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅析java web开发架构之MVC</title>
      <link href="/2019/09/09/%E6%B5%85%E6%9E%90java%20web%E5%BC%80%E5%8F%91%E6%9E%B6%E6%9E%84%E4%B9%8BMVC/"/>
      <url>/2019/09/09/%E6%B5%85%E6%9E%90java%20web%E5%BC%80%E5%8F%91%E6%9E%B6%E6%9E%84%E4%B9%8BMVC/</url>
      
        <content type="html"><![CDATA[<p>浅析java web开发架构之MVC</p><a id="more"></a><p>Java Web增强：过滤器、监听器、国际化、文件上传和下载、JavaMail邮件开发</p><h3 id="项目开发设计之mvc模式："><a href="#项目开发设计之mvc模式：" class="headerlink" title="项目开发设计之mvc模式："></a>项目开发设计之mvc模式：</h3><ul><li><p>M  （model）<br>模型层  【entity（javabean,bean,pojo,domain）/dao/service】</p></li><li><p>V  (view)<br>视图层  【jsp/html】</p></li><li><p>C  (control)<br>控制器 【serlet】</p></li></ul><h3 id="优缺点："><a href="#优缺点：" class="headerlink" title="优缺点："></a>优缺点：</h3><p>每一层各司其职，更容易更换具体的实现，而对其它层代码的影响较小！</p><p><img src="http://pqcpelaly.bkt.clouddn.com/java_mvc.jpg" alt="图示"> </p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript开发者应懂的33个概念</title>
      <link href="/2019/09/09/JavaScript%E5%BC%80%E5%8F%91%E8%80%85%E5%BA%94%E6%87%82%E7%9A%8433%E4%B8%AA%E6%A6%82%E5%BF%B5/"/>
      <url>/2019/09/09/JavaScript%E5%BC%80%E5%8F%91%E8%80%85%E5%BA%94%E6%87%82%E7%9A%8433%E4%B8%AA%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<p>JavaScript开发者应懂的33个概念</p><a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>这个项目是为了帮助开发者掌握 JavaScript 概念而创立的。它不是必备，但在未来学习（JavaScript）中，可以作为一篇指南。</p><blockquote><p>本篇文章是参照 @leonardomso 创立，英文版项目地址在<a href="https://github.com/leonardomso/33-js-concepts" target="_blank" rel="noopener">这里</a>。<br>由于原版资源都要翻墙，所以本人创立一个中文版，附上关于这些概念在国内的一些文章和视频。<br>若有觉得更好的文章或者视频，可以贡献出来，觉得有误的，请联系我删除。</p></blockquote><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>若有觉得更好的文章或者视频，可以贡献出来，觉得有误的，请联系我删除。</p><ul><li>文章的排序优化，前面的文章是介绍概念，后面的文章是深入解读。</li><li>将原文的 “高阶函数” 和 “map, reduce, filter” 合并为 “map, reduce, filter 等高阶函数”</li><li>增加 “promise” 概念(替换删除的 “高阶函数”)</li><li>2018-10-24 更新：@BuptStEve 贡献的三篇关于“函数式编程”方面的文章</li></ul><hr><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li><strong><a href="#1-调用堆栈">调用堆栈</a></strong></li><li><strong><a href="#2-原始类型">原始类型</a></strong></li><li><strong><a href="#3-值类型和引用类型">值类型和引用类型</a></strong></li><li><strong><a href="#4-隐式-显式-名义和鸭子类型">隐式, 显式, 名义和鸭子类型</a></strong></li><li><strong><a href="#5--vs--typeof-vs-instanceof">== 与 ===, typeof 与 instanceof</a></strong></li><li><strong><a href="#6-this-call-apply-和-bind">this, call, apply 和 bind</a></strong></li><li><strong><a href="#7-函数作用域-块级作用域和词法作用域">函数作用域, 块级作用域和词法作用域</a></strong></li><li><strong><a href="#8-闭包">闭包</a></strong></li><li><strong><a href="#9-map-reduce-filter-等高阶函数">map, reduce, filter 等高阶函数</a></strong></li><li><strong><a href="#10-表达式和语句">表达式和语句</a></strong></li><li><strong><a href="#11-变量提升">变量提升</a></strong></li><li><strong><a href="#12-promise">Promise</a></strong></li><li><strong><a href="#13-立即执行函数-模块化-命名空间">立即执行函数, 模块化, 命名空间</a></strong></li><li><strong><a href="#14-递归">递归</a></strong></li><li><strong><a href="#15-算法">算法</a></strong></li><li><strong><a href="#16-数据结构">数据结构</a></strong></li><li><strong><a href="#17-消息队列和事件循环">消息队列和事件循环</a></strong></li><li><strong><a href="#18-settimeout-setinterval-和-requestanimationframe">setTimeout, setInterval 和 requestAnimationFrame</a></strong></li><li><strong><a href="#19-继承-多态和代码复用">继承, 多态和代码复用</a></strong></li><li><strong><a href="#20-按位操作符-类数组对象和类型化数组">按位操作符, 类数组对象和类型化数组</a></strong></li><li><strong><a href="#21-dom-树和渲染过程">DOM 树和渲染过程</a></strong></li><li><strong><a href="#22-new-与构造函数-instanceof-与实例">new 与构造函数, instanceof 与实例</a></strong></li><li><strong><a href="#23-原型继承与原型链">原型继承与原型链</a></strong></li><li><strong><a href="#24-objectcreate-和-objectassign">Object.create 和 Object.assign</a></strong></li><li><strong><a href="#25-工厂函数和类">工厂函数和类</a></strong></li><li><strong><a href="#26-设计模式">设计模式</a></strong></li><li><strong><a href="#27-memoization">Memoization</a></strong></li><li><strong><a href="#28-纯函数-函数副作用和状态变化">纯函数, 函数副作用和状态变化</a></strong></li><li><strong><a href="#29-耗性能操作和时间复杂度">耗性能操作和时间复杂度</a></strong></li><li><strong><a href="#30-javascript-引擎">JavaScript 引擎</a></strong></li><li><strong><a href="#31-二进制-十六进制-十进制-科学记数法">二进制, 十进制, 十六进制, 科学记数法</a></strong></li><li><strong><a href="#32-偏函数-柯里化-compose-和-pipe">偏函数, 柯里化, Compose 和 Pipe</a></strong></li><li><strong><a href="#33-代码整洁之道">代码整洁之道</a></strong></li></ol><hr><h2 id="1-调用堆栈"><a href="#1-调用堆栈" class="headerlink" title="1. 调用堆栈"></a>1. 调用堆栈</h2><h3 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h3><ul><li>:book: <a href="https://developer.mozilla.org/en-US/docs/Glossary/Call_stack" target="_blank" rel="noopener">Call Stack — MDN</a></li><li>:book: <a href="https://juejin.im/post/5a05b4576fb9a04519690d42#comment" target="_blank" rel="noopener">[译] JavaScript 如何工作：对引擎、运行时、调用堆栈的概述 —— 掘金</a></li><li>:book: <a href="https://juejin.im/post/5ba32171f265da0ab719a6d7" target="_blank" rel="noopener">[译] 理解 JavaScript 中的执行上下文和执行栈 —— 掘金</a></li><li>:book: <a href="https://juejin.im/post/59e85eebf265da430d571f89" target="_blank" rel="noopener">这一次，彻底弄懂 JavaScript 执行机制 —— 掘金</a></li><li>:book: <a href="https://www.oschina.net/translate/how-does-javascript-actually-work-part-1" target="_blank" rel="noopener">解读 JavaScript 之引擎、运行时和堆栈调用 —— 开源中国</a></li><li>:book: <a href="https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/" target="_blank" rel="noopener">Tasks, microtasks, queues and schedules —— Jake Archibald</a></li></ul><h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><ul><li>:tv: <a href="https://v.qq.com/x/page/h0372bld8re.html?ptag=qqbrowser" target="_blank" rel="noopener">What is the event loop anyway? —— 腾讯视频(英文字幕)</a></li><li>:tv: <a href="https://www.bilibili.com/video/av33824933/" target="_blank" rel="noopener">Understanding The JavaScript Call Stack, Event Queue, Event Table, &amp; Event Loop —— Bilibili</a></li><li>:tv: <a href="http://www.acfun.cn/v/ac4495641" target="_blank" rel="noopener">JS 中的变量提升、堆栈内存及闭包详解 —— Acfun</a></li><li>:tv: <a href="http://www.php.cn/code/21194.html" target="_blank" rel="noopener">事件循环模型 —— PHP 中文网</a></li></ul><p><strong><a href="#目录">:arrow_up: 返回目录</a></strong></p><hr><h2 id="2-原始类型"><a href="#2-原始类型" class="headerlink" title="2. 原始类型"></a>2. 原始类型</h2><h3 id="文章-1"><a href="#文章-1" class="headerlink" title="文章"></a>文章</h3><ul><li>:book: <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Primitive" target="_blank" rel="noopener">原始数据 —— MDN</a></li><li>:book: <a href="http://www.w3school.com.cn/js/pro_js_primitivetypes.asp" target="_blank" rel="noopener">ECMAScript 原始类型 —— W3school</a></li><li>:book: <a href="http://2ality.com/2012/04/number-encoding.html" target="_blank" rel="noopener">How numbers are encoded in JavaScript —— Dr. Axe</a></li><li>:book: <a href="https://yanhaijing.com/javascript/2014/03/14/what-every-javascript-developer-should-know-about-floating-points/" target="_blank" rel="noopener">每一个 JavaScript 开发者应该了解的浮点知识 —— 颜海镜</a></li><li>:book: <a href="https://wangdoc.com/javascript/types/number.html" target="_blank" rel="noopener">JavaScript 标准参考教程(基本语法之数值) —— 阮一峰</a></li><li>:book: <a href="https://javascriptweblog.wordpress.com/2010/09/27/the-secret-life-of-javascript-primitives/" target="_blank" rel="noopener">The Secret Life of JavaScript Primitives —— Angus Croll</a></li></ul><h3 id="视频-1"><a href="#视频-1" class="headerlink" title="视频"></a>视频</h3><ul><li>:tv: <a href="https://www.imooc.com/video/5674" target="_blank" rel="noopener">javascript 六种数据类型 —— 慕课网</a></li><li>:tv: <a href="http://www.php.cn/code/5808.html" target="_blank" rel="noopener">javascript 视频教程(数据类型) —— PHP 中文网</a></li></ul><p><strong><a href="#目录">:arrow_up: 返回目录</a></strong></p><hr><h2 id="3-值类型和引用类型"><a href="#3-值类型和引用类型" class="headerlink" title="3. 值类型和引用类型"></a>3. 值类型和引用类型</h2><h3 id="文章-2"><a href="#文章-2" class="headerlink" title="文章"></a>文章</h3><ul><li>:book: <a href="http://www.w3school.com.cn/js/pro_js_referencetypes.asp" target="_blank" rel="noopener">ECMAScript 引用类型 —— W3school</a></li><li>:book: <a href="https://www.cnblogs.com/leiting/p/8081413.html" target="_blank" rel="noopener">js 中的值类型和引用类型的区别 —— 博客园</a></li><li>:book: <a href="https://blog.fundebug.com/2017/08/09/explain_value_reference_in_js/" target="_blank" rel="noopener">JavaScript 的值传递和引用传递 —— FunDebug</a></li><li>:book: <a href="https://docstore.mik.ua/orelly/webprog/jscript/ch04_04.htm" target="_blank" rel="noopener">Primitive Types &amp; Reference Types in JavaScript —— Bran van der Meer</a></li><li>:book: <a href="https://blog.csdn.net/xiaojia_boke/article/details/54906509" target="_blank" rel="noopener">JavaScript: Passing by Value or by Reference —— CSDN</a></li><li>:book: <a href="https://segmentfault.com/a/1190000015411195" target="_blank" rel="noopener">js 值引用和值复制 —— SegmentFault</a></li><li>:book: <a href="https://blog.csdn.net/zzzaquarius/article/details/4902235" target="_blank" rel="noopener">js- 引用和复制(传值和传址) —— CSDN</a></li></ul><p><strong><a href="#目录">:arrow_up: 返回目录</a></strong></p><hr><h2 id="4-隐式-显式-名义和鸭子类型"><a href="#4-隐式-显式-名义和鸭子类型" class="headerlink" title="4. 隐式, 显式, 名义和鸭子类型"></a>4. 隐式, 显式, 名义和鸭子类型</h2><h3 id="文章-3"><a href="#文章-3" class="headerlink" title="文章"></a>文章</h3><ul><li>:book: <a href="http://www.w3school.com.cn/js/pro_js_typeconversion.asp" target="_blank" rel="noopener">ECMAScript 类型转换 —— W3school</a></li><li>:book: <a href="http://justjavac.com/javascript/2013/04/08/javascript-quirk-1-implicit-conversion-of-values.html" target="_blank" rel="noopener">JavaScript 的怪癖 1：隐式类型转换 —— justjavac</a></li><li>:book: <a href="https://juejin.im/post/59ad2585f265da246a20e026" target="_blank" rel="noopener">JavaScript 运算符规则与隐式类型转换详解 —— 掘金</a></li><li>:book: <a href="https://segmentfault.com/a/1190000004482388" target="_blank" rel="noopener">聊一聊 JS 中的隐式类型转换 —— SegmentFault</a></li><li>:book: <a href="https://www.cnblogs.com/yugege/p/5277883.html" target="_blank" rel="noopener">有趣的 JavaScript 隐式类型转换 —— 博客园</a></li><li>:book: <a href="https://blog.csdn.net/yangjvn/article/details/48284163" target="_blank" rel="noopener">JavaScript 显式类型转换与隐式类型转换 —— CSDN</a></li><li>:book: <a href="https://www.jianshu.com/p/777a89b4ed9a" target="_blank" rel="noopener">你不知道的 JavaScript（中卷）强制类型转换 —— 简书</a></li><li>:book: <a href="https://ithelp.ithome.com.tw/articles/10201512" target="_blank" rel="noopener">你懂 JavaScript 嗎？#8 強制轉型 —— cythilya</a></li><li>:book: <a href="http://book.51cto.com/art/201505/475153.htm" target="_blank" rel="noopener">动态类型语言和鸭子类型 —— 曾探</a></li><li>:book: <a href="https://flow.org/en/docs/lang/nominal-structural/" target="_blank" rel="noopener">Nominal &amp; Structural Typing —— flow</a></li><li>:book: <a href="https://stackoverflow.com/questions/19915688/what-exactly-is-type-coercion-in-javascript" target="_blank" rel="noopener">What exactly is Type Coercion in Javascript? —— stackoverflow</a></li><li>:book: <a href="https://github.com/getify/You-Dont-Know-JS/blob/master/types%20&amp;%20grammar/ch4.md" target="_blank" rel="noopener">You Don’t Know JS: Types &amp; Grammar —— github</a></li></ul><h3 id="视频-2"><a href="#视频-2" class="headerlink" title="视频"></a>视频</h3><ul><li>:tv: <a href="https://www.imooc.com/video/5675" target="_blank" rel="noopener">javascript 隐式转换 —— 慕课网</a></li><li>:tv: <a href="http://www.le.com/ptv/vplay/27767009.html" target="_blank" rel="noopener">Javascript 基础加强-类型转换 —— 黑马程序员</a></li></ul><p><strong><a href="#目录">:arrow_up: 返回目录</a></strong></p><hr><div id="5--vs--typeof-vs-instanceof"></div><h2 id="5-vs-typeof-vs-instanceof"><a href="#5-vs-typeof-vs-instanceof" class="headerlink" title="5. == vs ===, typeof vs instanceof"></a>5. == vs ===, typeof vs instanceof</h2><h3 id="文章-4"><a href="#文章-4" class="headerlink" title="文章"></a>文章</h3><ul><li>:book: <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Equality_comparisons_and_sameness" target="_blank" rel="noopener">JavaScript 中的相等性判断 —— MDN</a></li><li>:book: <a href="https://juejin.im/entry/584918612f301e005716add6" target="_blank" rel="noopener">js 中 == 和 === 的区别 —— 掘金</a></li><li>:book: <a href="https://blog.csdn.net/w97531/article/details/82255225" target="_blank" rel="noopener">== vs === in Javascript —— CSDN</a></li><li>:book: <a href="https://blog.csdn.net/mevicky/article/details/50353881" target="_blank" rel="noopener">深入理解 javascript 之 typeof 和 instanceof —— CSDN</a></li><li>:book: <a href="http://justjavac.com/javascript/2012/12/23/what-is-javascripts-typeof-operator-used-for.html" target="_blank" rel="noopener">JavaScript 的 typeof 的用途 —— justjavac</a></li><li>:book: <a href="https://juejin.im/post/58358606570c35005e4142bd" target="_blank" rel="noopener">一张图看懂 Function 和 Object 的关系及简述 instanceof 运算符 —— 掘金</a></li><li>:book: <a href="https://juejin.im/post/5b0b9b9051882515773ae714" target="_blank" rel="noopener">浅谈 instanceof 和 typeof 的实现原理 —— 掘金</a></li><li>:book: <a href="https://www.cnblogs.com/double405/p/5326311.html" target="_blank" rel="noopener">js 中 typeof 与 instanceof 用法 —— 博客园</a></li></ul><p><strong><a href="#目录">:arrow_up: 返回目录</a></strong></p><hr><h2 id="6-this-call-apply-和-bind"><a href="#6-this-call-apply-和-bind" class="headerlink" title="6. this, call, apply 和 bind"></a>6. this, call, apply 和 bind</h2><h3 id="文章-5"><a href="#文章-5" class="headerlink" title="文章"></a>文章</h3><ul><li>:book: <a href="http://www.ruanyifeng.com/blog/2010/04/using_this_keyword_in_javascript.html" target="_blank" rel="noopener">Javascript 的 this 用法 —— 阮一峰</a></li><li>:book: <a href="https://www.jianshu.com/p/6b4333e78bf5" target="_blank" rel="noopener">学会 JS 的 this 这一篇就够了，根本不用记 —— 简书</a></li><li>:book: <a href="https://juejin.im/post/5b9f176b6fb9a05d3827d03f" target="_blank" rel="noopener">[译] this（他喵的）到底是什么 — 理解 JavaScript 中的 this、call、apply 和 bind —— 掘金</a></li><li>:book: <a href="https://juejin.im/post/59bfe84351882531b730bac2" target="_blank" rel="noopener">this、apply、call、bind —— 掘金</a></li><li>:book: <a href="https://www.cnblogs.com/tingyu-blog/p/6212392.html" target="_blank" rel="noopener">使用 call、apply 和 bind 解决 js 中烦人的 this，事件绑定时的 this 和传参问题 —— 博客园</a></li><li>:book: <a href="https://github.com/Abiel1024/blog/issues/16" target="_blank" rel="noopener">call、apply 和 bind 的原生实现 —— github</a></li><li>:book: <a href="https://www.jb51.net/article/124024.htm" target="_blank" rel="noopener">详解 JS 中的 this、apply、call、bind(经典面试题) —— 脚本之家</a></li></ul><h3 id="视频-3"><a href="#视频-3" class="headerlink" title="视频"></a>视频</h3><ul><li>:tv: <a href="https://www.iqiyi.com/w_19rr1augsd.html" target="_blank" rel="noopener">JavaScript 关于 this 关键字解释 —— 爱奇艺</a></li><li>:tv: <a href="http://baidu.iqiyi.com/watch/845335533383874688.html?page=videoMultiNeed" target="_blank" rel="noopener">JS 关于作用域闭包和 this 的综合面试题 —— 百度视频</a></li><li>:tv: <a href="http://www.le.com/ptv/vplay/27478413.html?ch=baidu_s" target="_blank" rel="noopener">js 面向对象闭包数组 12.函数中的 this —— 乐视视频</a></li><li>:tv: <a href="http://www.le.com/ptv/vplay/24835911.html?ch=baidu_s" target="_blank" rel="noopener">1.3.10-this 指向及 this 应用 —— 乐视视频</a></li><li>:tv: <a href="https://study.163.com/course/introduction/590005.htm" target="_blank" rel="noopener">珠峰培训 JavaScript 开发课程：关于 this 关键字、闭包作用域 —— 网易云课堂</a></li></ul><p><strong><a href="#目录">:arrow_up: 返回目录</a></strong></p><hr><h2 id="7-函数作用域-块级作用域和词法作用域"><a href="#7-函数作用域-块级作用域和词法作用域" class="headerlink" title="7. 函数作用域, 块级作用域和词法作用域"></a>7. 函数作用域, 块级作用域和词法作用域</h2><h3 id="文章-6"><a href="#文章-6" class="headerlink" title="文章"></a>文章</h3><ul><li>:book: <a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014344993159773a464f34e1724700a6d5dd9e235ceb7c000" target="_blank" rel="noopener">变量作用域与解构赋值 —— 廖雪峰</a></li><li>:book: <a href="http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html" target="_blank" rel="noopener">学习 Javascript 闭包（Closure） —— 阮一峰</a></li><li>:book: <a href="https://segmentfault.com/a/1190000006671020" target="_blank" rel="noopener">JavaScript 中词法作用域、闭包与跳出闭包 —— SegmentFault</a></li><li>:book: <a href="https://juejin.im/entry/58e70077b123db15eb88dc7e" target="_blank" rel="noopener">JavaScript 深入之词法作用域和动态作用域 —— 掘金</a></li><li>:book: <a href="https://juejin.im/post/5afb0ae56fb9a07aa2138425" target="_blank" rel="noopener">深入理解闭包之前置知识 → 作用域与词法作用域 —— 掘金</a></li><li>:book: <a href="https://stackoverflow.com/questions/1047454/what-is-lexical-scope" target="_blank" rel="noopener">What is lexical scope? —— stackoverflow</a></li><li>:book: <a href="https://github.com/fishenal/You-Dont-Know-JS/blob/master/scope%20&amp;%20closures/ch2.md" target="_blank" rel="noopener">You Don’t Know JS: Scope &amp; Closures —— Kyle Simpson</a></li></ul><p><strong><a href="#目录">:arrow_up: 返回目录</a></strong></p><hr><h2 id="8-闭包"><a href="#8-闭包" class="headerlink" title="8. 闭包"></a>8. 闭包</h2><h3 id="文章-7"><a href="#文章-7" class="headerlink" title="文章"></a>文章</h3><ul><li>:book: <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures" target="_blank" rel="noopener">闭包 —— MDN</a></li><li>:book: <a href="http://www.w3school.com.cn/js/pro_js_functions_closures.asp" target="_blank" rel="noopener">ECMAScript 闭包（closure）—— w3school</a></li><li>:book: <a href="http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html" target="_blank" rel="noopener">学习 Javascript 闭包（Closure） —— 阮一峰</a></li><li>:book: <a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/00143449934543461c9d5dfeeb848f5b72bd012e1113d15000" target="_blank" rel="noopener">闭包 —— 廖雪峰</a></li><li>:book: <a href="https://www.jianshu.com/p/796e903754f1" target="_blank" rel="noopener">一次性搞懂 JavaScript 闭包 —— 简书</a></li><li>:book: <a href="https://segmentfault.com/a/1190000006875662" target="_blank" rel="noopener">JavaScript 闭包 —— SegmentFault</a></li><li>:book: <a href="https://juejin.im/entry/5800eb7da22b9d005b36156e" target="_blank" rel="noopener">js 匿名自执行函数中闭包的高级使用 —— 掘金</a></li><li>:book: <a href="https://juejin.im/entry/59df405251882551bf7e58c6#comment" target="_blank" rel="noopener">高效使用 JavaScript 闭包 —— 掘金</a></li></ul><h3 id="视频-4"><a href="#视频-4" class="headerlink" title="视频"></a>视频</h3><ul><li>:tv: <a href="http://www.iqiyi.com/w_19rr1amael.html" target="_blank" rel="noopener">JavaScript 闭包和闭包面试题 —— 爱奇艺</a></li><li>:tv: <a href="http://www.le.com/ptv/vplay/27478410.html" target="_blank" rel="noopener">js 面向对象闭包数组 11.闭包 —— 乐视</a></li><li>:tv: <a href="http://www.le.com/ptv/vplay/30505852.html" target="_blank" rel="noopener">白贺翔_函数(闭包) —— 乐视</a></li></ul><p><strong><a href="#目录">:arrow_up: 返回目录</a></strong></p><hr><h2 id="9-map-reduce-filter-等高阶函数"><a href="#9-map-reduce-filter-等高阶函数" class="headerlink" title="9. map, reduce, filter 等高阶函数"></a>9. map, reduce, filter 等高阶函数</h2><h3 id="文章-8"><a href="#文章-8" class="headerlink" title="文章"></a>文章</h3><ul><li>:book: <a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001434499355829ead974e550644e2ebd9fd8bb1b0dd721000" target="_blank" rel="noopener">高阶函数 —— 廖雪峰</a></li><li>:book: <a href="https://www.zhangxinxu.com/wordpress/2013/04/es5%e6%96%b0%e5%a2%9e%e6%95%b0%e7%bb%84%e6%96%b9%e6%b3%95/" target="_blank" rel="noopener">ES5 中新增的 Array 方法详细说明 —— 张鑫旭</a></li><li>:book: <a href="https://juejin.im/post/5835808067f3560065ed4ab2" target="_blank" rel="noopener">一张图看懂 JavaScript 中数组的迭代方法：forEach、map、filter、reduce、every、some —— 掘金</a></li><li>:book: <a href="https://segmentfault.com/a/1190000012127329" target="_blank" rel="noopener">Transducing（上）－《JavaScript 轻量级函数式编程》 —— SegmentFault</a></li><li>:book: <a href="https://github.com/BuptStEve/blog/issues/15" target="_blank" rel="noopener">JavaScript 函数式编程（三） —— @BuptStEve</a></li></ul><p><strong><a href="#目录">:arrow_up: 返回目录</a></strong></p><hr><h2 id="10-表达式和语句"><a href="#10-表达式和语句" class="headerlink" title="10. 表达式和语句"></a>10. 表达式和语句</h2><h3 id="文章-9"><a href="#文章-9" class="headerlink" title="文章"></a>文章</h3><ul><li>:book: <a href="https://www.cnblogs.com/xianshenglu/p/8386918.html" target="_blank" rel="noopener">js 表达式与语句 —— 博客园</a></li><li>:book: <a href="https://segmentfault.com/q/1010000004102804" target="_blank" rel="noopener">JS 表达式和语句的区别 —— SegmentFault</a></li><li>:book: <a href="https://blog.csdn.net/mett_smith/article/details/78761247" target="_blank" rel="noopener">JavaScript 中的表达式（expression）和语句/声明（statement） —— CSDN</a></li><li>:book: <a href="https://segmentfault.com/a/1190000004565693" target="_blank" rel="noopener">重讀 Axel 的 Javascript 中的 Expression vs Statement 一文 —— SegmentFault</a></li><li>:book: <a href="http://2ality.com/2012/09/expressions-vs-statements.html" target="_blank" rel="noopener">Expressions versus statements in JavaScript —— Dr. Axel</a></li></ul><p><strong><a href="#目录">:arrow_up: 返回目录</a></strong></p><hr><h2 id="11-变量提升"><a href="#11-变量提升" class="headerlink" title="11. 变量提升"></a>11. 变量提升</h2><h3 id="文章-10"><a href="#文章-10" class="headerlink" title="文章"></a>文章</h3><ul><li>:book: <a href="http://www.runoob.com/js/js-hoisting.html" target="_blank" rel="noopener">JavaScript 变量提升 —— 菜鸟教程</a></li><li>:book: <a href="https://juejin.im/post/59905bea6fb9a03c34192c51" target="_blank" rel="noopener">ES6 变量作用域与提升：变量的生命周期详解 —— 掘金</a></li><li>:book: <a href="https://segmentfault.com/a/1190000004345355#articleHeader5" target="_blank" rel="noopener">[翻译] JavaScript Scoping and Hoisting —— SegmentFault</a></li><li>:book: <a href="http://www.adequatelygood.com/JavaScript-Scoping-and-Hoisting.html" target="_blank" rel="noopener">JavaScript Scoping and Hoisting —— Ben Cherry</a></li></ul><p><strong><a href="#目录">:arrow_up: 返回目录</a></strong></p><hr><h2 id="12-Promise"><a href="#12-Promise" class="headerlink" title="12. Promise"></a>12. Promise</h2><h3 id="文章-11"><a href="#文章-11" class="headerlink" title="文章"></a>文章</h3><ul><li>:book: <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Using_promises" target="_blank" rel="noopener">使用 promises —— MDN</a></li><li>:book: <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener">Promise —— MDN</a></li><li>:book: <a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014345008539155e93fc16046d4bb7854943814c4f9dc2000" target="_blank" rel="noopener">Promie — 廖雪峰</a></li><li>:book: <a href="https://www.cnblogs.com/rubylouvre/p/3495286.html" target="_blank" rel="noopener">JavaScript Promise：去而复返 —— 司徒正美</a></li><li>:book: <a href="https://developers.google.com/web/fundamentals/primers/promises#_1" target="_blank" rel="noopener">(上面的原文)JavaScript Promise：简介 —— Web Fundamentals</a></li><li>:book: <a href="https://segmentfault.com/a/1190000011813934" target="_blank" rel="noopener">1 分钟读完《10 分钟学会 JavaScript 的 Async/Await》 —— justjavac</a></li><li>:book: <a href="https://juejin.im/entry/56499ae160b2d1404c4f8834" target="_blank" rel="noopener">JavaScript Promise 迷你书（中文版）</a></li><li>:book: <a href="https://www.cnblogs.com/yunfeifei/p/4453690.html" target="_blank" rel="noopener">JavaScript 进阶之路——认识和使用 Promise，重构你的 Js 代码 —— 博客园</a></li></ul><h3 id="视频-5"><a href="#视频-5" class="headerlink" title="视频"></a>视频</h3><ul><li>:tv: <a href="https://www.imooc.com/learn/949" target="_blank" rel="noopener">Promise 入门 —— 慕课网</a></li></ul><p><strong><a href="#目录">:arrow_up: 返回目录</a></strong></p><hr><h2 id="13-立即执行函数-模块化-命名空间"><a href="#13-立即执行函数-模块化-命名空间" class="headerlink" title="13. 立即执行函数, 模块化, 命名空间"></a>13. 立即执行函数, 模块化, 命名空间</h2><h3 id="文章-12"><a href="#文章-12" class="headerlink" title="文章"></a>文章</h3><ul><li>:book: <a href="http://www.ruanyifeng.com/blog/2012/10/javascript_module.html" target="_blank" rel="noopener">Javascript 模块化编程（一）：模块的写法 —— 阮一峰</a></li><li>:book: <a href="https://www.jianshu.com/p/4dbf4a4c8ebb" target="_blank" rel="noopener">javascript 模块化编程-详解立即执行函数表达式 —— 简书</a></li><li>:book: <a href="https://juejin.im/entry/57fee360a22b9d005b1d9ae3" target="_blank" rel="noopener">Javascript 的匿名函数与自执行 —— 掘金</a></li><li>:book: <a href="https://segmentfault.com/a/1190000006966358" target="_blank" rel="noopener">前端模块化——技术选型 —— SegmentFault</a></li><li>:book: <a href="https://segmentfault.com/a/1190000015991869#articleHeader8" target="_blank" rel="noopener">谈谈 Js 前端模块化规范 —— SegmentFault</a></li></ul><p><strong><a href="#目录">:arrow_up: 返回目录</a></strong></p><hr><h2 id="14-递归"><a href="#14-递归" class="headerlink" title="14. 递归"></a>14. 递归</h2><h3 id="文章-13"><a href="#文章-13" class="headerlink" title="文章"></a>文章</h3><ul><li>:book: <a href="https://segmentfault.com/q/1010000003942347" target="_blank" rel="noopener">求解释 js 递归 —— SegmentFault</a></li><li>:book: <a href="https://juejin.im/post/5948c0d8fe88c2006a939e2a" target="_blank" rel="noopener">JavaScript 中的递归 —— 掘金</a></li><li>:book: <a href="https://juejin.im/post/59c1d91d6fb9a00a53275f79" target="_blank" rel="noopener">递归（上）－《JavaScript 轻量级函数式编程》 —— 掘金</a></li><li>:book: <a href="https://juejin.im/post/59c87fb46fb9a00a437b1a2e" target="_blank" rel="noopener">递归（下）－《JavaScript 轻量级函数式编程》 —— 掘金</a></li><li>:book: <a href="https://juejin.im/post/5acdd7486fb9a028ca53547c" target="_blank" rel="noopener">尾调用和尾递归 —— 掘金</a></li><li>:book: <a href="https://blog.csdn.net/qianqianstd/article/details/75807462" target="_blank" rel="noopener">几个经典递归问题用 js 实现 —— CSDN</a></li><li>:book: <a href="https://blog.csdn.net/x_i_xw/article/details/72026868" target="_blank" rel="noopener">递归函数的几个例子 —— CSDN</a></li></ul><p><strong><a href="#目录">:arrow_up: 返回目录</a></strong></p><hr><h2 id="15-算法"><a href="#15-算法" class="headerlink" title="15. 算法"></a>15. 算法</h2><h3 id="文章-14"><a href="#文章-14" class="headerlink" title="文章"></a>文章</h3><ul><li>:book: <a href="https://juejin.im/post/57dcd394a22b9d00610c5ec8" target="_blank" rel="noopener">十大经典排序算法总结（JavaScript 描述） —— 掘金</a></li><li>:book: <a href="https://juejin.im/post/594dfe795188250d725a220a#comment" target="_blank" rel="noopener">在 JavaScript 中学习数据结构与算法 —— 掘金</a></li><li>:book: <a href="https://juejin.im/post/58c9d5fb1b69e6006b686bce" target="_blank" rel="noopener">JS 中可能用得到的全部的排序算法 —— 掘金</a></li><li>:book: <a href="https://www.jianshu.com/p/1b4068ccd505" target="_blank" rel="noopener">JS 家的排序算法 —— 简书</a></li><li>:book: <a href="https://segmentfault.com/a/1190000008593715" target="_blank" rel="noopener">前端常见算法的 JS 实现 —— SegmentFault</a></li><li>:book: <a href="https://www.jackpu.com/qian-duan-mian-shi-zhong-de-chang-jian-de-suan-fa-wen-ti/" target="_blank" rel="noopener">前端面试中的常见的算法问题 ——蒲小花的博客</a></li></ul><h3 id="视频-6"><a href="#视频-6" class="headerlink" title="视频"></a>视频</h3><ul><li>:tv: <a href="https://www.imooc.com/learn/888" target="_blank" rel="noopener">Javascript 实现二叉树算法 —— 慕课网</a></li></ul><p><strong><a href="#目录">:arrow_up: 返回目录</a></strong></p><hr><h2 id="16-数据结构"><a href="#16-数据结构" class="headerlink" title="16. 数据结构"></a>16. 数据结构</h2><h3 id="文章-15"><a href="#文章-15" class="headerlink" title="文章"></a>文章</h3><ul><li>:book: <a href="https://www.jianshu.com/p/5e0e8d183102" target="_blank" rel="noopener">来我们浅谈一下 js 的数据结构 —— 简书</a></li><li>:book: <a href="https://www.jianshu.com/nb/16835496" target="_blank" rel="noopener">JavaScript 中的算法与数据结构 —— 简书</a></li><li>:book: <a href="http://blog.sina.com.cn/s/blog_7b9c5e4101017mjt.html" target="_blank" rel="noopener">学 JS 必看-JavaScript 数据结构深度剖析 —— 大道至简的博客</a></li><li>:book: <a href="https://juejin.im/entry/586effe0da2f600053d85a9a" target="_blank" rel="noopener">js 中基础数据结构数组去重问题 —— 掘金</a></li></ul><h3 id="视频-7"><a href="#视频-7" class="headerlink" title="视频"></a>视频</h3><ul><li>:tv: :tv: <a href="http://www.le.com/ptv/vplay/27606964.html" target="_blank" rel="noopener">JavaScript 数据结构-运算符 —— 乐视</a></li></ul><p><strong><a href="#目录">:arrow_up: 返回目录</a></strong></p><hr><h2 id="17-消息队列和事件循环"><a href="#17-消息队列和事件循环" class="headerlink" title="17. 消息队列和事件循环"></a>17. 消息队列和事件循环</h2><h3 id="文章-16"><a href="#文章-16" class="headerlink" title="文章"></a>文章</h3><ul><li>:book: <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop" target="_blank" rel="noopener">并发模型与事件循环 —— MDN</a></li><li>:book: <a href="http://www.ruanyifeng.com/blog/2014/10/event-loop.html" target="_blank" rel="noopener">JavaScript 运行机制详解：再谈 Event Loop —— 阮一峰</a></li><li>:book: <a href="https://www.cnblogs.com/dong-xu/p/7000163.html" target="_blank" rel="noopener">深入理解 JavaScript 事件循环 —— 博客园</a></li><li>:book: <a href="https://zhuanlan.zhihu.com/p/26229293" target="_blank" rel="noopener">深入浅出 Javascript 事件循环机制 —— 知乎</a></li><li>:book: <a href="https://segmentfault.com/a/1190000014940904#articleHeader7" target="_blank" rel="noopener">JS 事件循环机制（event loop）之宏任务、微任务 —— SegmentFault</a></li><li>:book: <a href="https://segmentfault.com/a/1190000004322358" target="_blank" rel="noopener">JavaScript：彻底理解同步、异步和事件循环 —— SegmentFault</a></li></ul><p><strong><a href="#目录">:arrow_up: 返回目录</a></strong></p><hr><h2 id="18-setTimeout-setInterval-和-requestAnimationFrame"><a href="#18-setTimeout-setInterval-和-requestAnimationFrame" class="headerlink" title="18. setTimeout, setInterval 和 requestAnimationFrame"></a>18. setTimeout, setInterval 和 requestAnimationFrame</h2><h3 id="文章-17"><a href="#文章-17" class="headerlink" title="文章"></a>文章</h3><ul><li>:book: <a href="http://www.runoob.com/jsref/met-win-settimeout.html" target="_blank" rel="noopener">Window setTimeout() 方法 —— 菜鸟教程</a></li><li>:book: <a href="http://www.runoob.com/jsref/met-win-setinterval.html" target="_blank" rel="noopener">Window setInterval() 方法 —— 菜鸟教程</a></li><li>:book: <a href="https://juejin.im/post/5aa4c47af265da239866e236" target="_blank" rel="noopener">关于 setTimeout —— 掘金</a></li><li>:book: <a href="https://juejin.im/post/5a77f8ce5188257a6d635d76" target="_blank" rel="noopener">你不知道的 Javascript：有趣的 setTimeout —— 掘金</a></li><li>:book: <a href="https://juejin.im/entry/5861ebf01b69e6006ce61d38" target="_blank" rel="noopener">原来你是这样的 setTimeout —— 掘金</a></li><li>:book: <a href="https://segmentfault.com/q/1010000005989491" target="_blank" rel="noopener">setTimeout() 和 setInterval() 本质区别在哪里？ —— SegmentFault</a></li><li>book: <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame" target="_blank" rel="noopener">window.requestAnimationFrame —— MDN</a></li><li>:book: <a href="http://www.cnblogs.com/onepixel/p/7078617.html" target="_blank" rel="noopener">requestAnimationFrame 知多少？ —— 博客园</a></li><li>:book: <a href="https://www.zhangxinxu.com/wordpress/2013/09/css3-animation-requestanimationframe-tween-%e5%8a%a8%e7%94%bb%e7%ae%97%e6%b3%95/" target="_blank" rel="noopener">CSS3 动画那么强，requestAnimationFrame 还有毛线用？ —— 张鑫旭</a></li><li>:book: <a href="https://segmentfault.com/a/1190000014661035" target="_blank" rel="noopener">「JavaScript 定时器」setInterval、setTimeout 和 requestAnimationFrame 浅析 —— SegmentFault</a></li><li>:book: <a href="https://segmentfault.com/a/1190000000386368" target="_blank" rel="noopener">翻译：setInterval 与 requestAnimationFrame 的时间间隔测试 —— SegmentFault</a></li><li>:book: <a href="https://segmentfault.com/q/1010000013909430" target="_blank" rel="noopener">阿里前端面试题：requestAnimationFrame 实现类似 setInterval 的计时器 —— SegmentFault</a></li></ul><h3 id="视频-8"><a href="#视频-8" class="headerlink" title="视频"></a>视频</h3><ul><li>:tv: <a href="http://v.youku.com/v_show/id_XNTA4OTQ0NzA0.html" target="_blank" rel="noopener">setTimeout 和 setInterval —— 优酷</a></li></ul><p><strong><a href="#目录">:arrow_up: 返回目录</a></strong></p><hr><h2 id="19-继承-多态和代码复用"><a href="#19-继承-多态和代码复用" class="headerlink" title="19. 继承, 多态和代码复用"></a>19. 继承, 多态和代码复用</h2><h3 id="文章-18"><a href="#文章-18" class="headerlink" title="文章"></a>文章</h3><ul><li>:book: <a href="https://www.cnblogs.com/Leo_wl/p/5734794.html" target="_blank" rel="noopener">JS 面向对象编程之：封装、继承、多态 —— 博客园</a></li><li>:book: <a href="https://www.jianshu.com/p/5cb692658704" target="_blank" rel="noopener">Javascript 的继承与多态 —— 简书</a></li><li>:book: <a href="https://juejin.im/post/59396c96fe88c2006afc2707" target="_blank" rel="noopener">js:面向对象编程，带你认识封装、继承和多态 —— 掘金</a></li><li>:book: <a href="https://zhuanlan.zhihu.com/p/34693209" target="_blank" rel="noopener">JavaScript 中的“多继承” —— 掘金</a></li><li>:book: <a href="https://github.com/TooBug/javascript.patterns/blob/master/chapter6.markdown" target="_blank" rel="noopener">代码复用模式 —— github</a></li><li>:book: <a href="http://www.cnblogs.com/TomXu/archive/2012/04/24/2438050.html" target="_blank" rel="noopener">深入理解 JavaScript：代码复用模式(推荐篇) —— 汤姆大叔</a></li><li>:book: <a href="https://www.cnblogs.com/TomXu/archive/2012/04/23/2438005.html" target="_blank" rel="noopener">深入理解 JavaScript：代码复用模式(避免篇) —— 汤姆大叔</a></li></ul><p><strong><a href="#目录">:arrow_up: 返回目录</a></strong></p><hr><h2 id="20-按位操作符-类数组对象和类型化数组"><a href="#20-按位操作符-类数组对象和类型化数组" class="headerlink" title="20. 按位操作符, 类数组对象和类型化数组"></a>20. 按位操作符, 类数组对象和类型化数组</h2><h3 id="文章-19"><a href="#文章-19" class="headerlink" title="文章"></a>文章</h3><ul><li>:book: <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators" target="_blank" rel="noopener">按位操作符 —— MDN</a></li><li>:book: <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Typed_arrays" target="_blank" rel="noopener">类数组对象 —— MDN</a></li><li>:book: <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" target="_blank" rel="noopener">类型化数组 —— MDN</a></li><li>:book: <a href="https://www.cnblogs.com/gradolabs/p/4762134.html" target="_blank" rel="noopener">JavaScript ArrayBuffer 浅析 —— 博客园</a></li></ul><p><strong><a href="#目录">:arrow_up: 返回目录</a></strong></p><hr><h2 id="21-DOM-树和渲染过程"><a href="#21-DOM-树和渲染过程" class="headerlink" title="21. DOM 树和渲染过程"></a>21. DOM 树和渲染过程</h2><h3 id="文章-20"><a href="#文章-20" class="headerlink" title="文章"></a>文章</h3><ul><li>:book: <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model/How_to_create_a_DOM_tree" target="_blank" rel="noopener">如何创建一个 DOM 树 —— MDN</a></li><li>:book: <a href="http://www.w3school.com.cn/htmldom/dom_nodes.asp" target="_blank" rel="noopener">HTML DOM 节点 —— W3school</a></li><li>:book: <a href="http://javascript.ruanyifeng.com/dom/node.html" target="_blank" rel="noopener">DOM 概述 —— 阮一峰</a></li><li>:book: <a href="https://juejin.im/post/583cbbfa61ff4b006ccc41fe" target="_blank" rel="noopener">《JavaScript 闯关记》之 DOM（上）—— 掘金</a></li><li>:book: <a href="https://juejin.im/post/583cbc4961ff4b006ccc44fb" target="_blank" rel="noopener">《JavaScript 闯关记》之 DOM（下）—— 掘金</a></li><li>:book: <a href="https://juejin.im/entry/58314efd8ac2470061bb30fd" target="_blank" rel="noopener">掌握 DOM 操作 —— 掘金</a></li><li>:book: <a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001434500494451273e6b3dec9d411d9ba841dee8caec45000" target="_blank" rel="noopener">操作 DOM —— 廖雪峰</a></li><li>:book: <a href="https://juejin.im/post/59c60691518825396f4f71a1" target="_blank" rel="noopener">原来 CSS 与 JS 是这样阻塞 DOM 解析和渲染的 —— 掘金</a></li></ul><h3 id="视频-9"><a href="#视频-9" class="headerlink" title="视频"></a>视频</h3><ul><li>:tv: <a href="https://www.imooc.com/learn/488" target="_blank" rel="noopener">DOM 探索之基础详解篇 —— 慕课网</a></li><li>:tv: <a href="https://www.imooc.com/learn/138" target="_blank" rel="noopener">DOM 事件探秘 —— 慕课网</a></li><li>:tv: <a href="https://www.imooc.com/learn/530" target="_blank" rel="noopener">jQuery 基础(二)DOM 篇 —— 慕课网</a></li><li>:tv: <a href="http://www.iqiyi.com/w_19rr19s08l.html" target="_blank" rel="noopener">JS 操作 DOM 对象属性和方法 —— 爱奇艺</a></li></ul><p><strong><a href="#目录">:arrow_up: 返回目录</a></strong></p><hr><h2 id="22-new-与构造函数-instanceof-与实例"><a href="#22-new-与构造函数-instanceof-与实例" class="headerlink" title="22. new 与构造函数, instanceof 与实例"></a>22. new 与构造函数, instanceof 与实例</h2><h3 id="文章-21"><a href="#文章-21" class="headerlink" title="文章"></a>文章</h3><ul><li>:book: <a href="http://javascript.ruanyifeng.com/oop/basic.html" target="_blank" rel="noopener">构造函数与 new 命令 —— 阮一峰</a></li><li>:book: <a href="http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance.html" target="_blank" rel="noopener">Javascript 面向对象编程（二）：构造函数的继承 —— 阮一峰</a></li><li>:book: <a href="https://blog.csdn.net/SpicyBoiledFish/article/details/71123162" target="_blank" rel="noopener">完整原型链详细图解(构造函数、原型、实例化对象) —— CSDN</a></li><li>:book: <a href="http://www.php.cn/js-tutorial-376246.html" target="_blank" rel="noopener">JavaScript 中构造函数与 new 操作符的实例详解 —— PHP 中文网</a></li><li>:book: <a href="https://blog.csdn.net/yin_991/article/details/80954453" target="_blank" rel="noopener">构造函数、实例、原型、原型链之间的关系 —— CSDN</a></li><li>:book: <a href="https://blog.csdn.net/cecilia620/article/details/71158048" target="_blank" rel="noopener">深入理解 JS—instanceof 和原型链 —— CSDN</a></li><li>:book: <a href="https://www.jianshu.com/p/15ac7393bc1f" target="_blank" rel="noopener">前端基础进阶（九）：详解面向对象、构造函数、原型与原型链 —— 简书</a></li><li>:book: <a href="https://www.jianshu.com/p/60ffc4831bff" target="_blank" rel="noopener">js 用 new 实例化对象与直接调用的 this 的区别 —— 简书</a></li><li>:book: <a href="http://justjavac.com/javascript/2012/12/22/javascript-values-not-everything-is-an-object.html" target="_blank" rel="noopener">JavaScript 并非所有的东西都是对象 —— justjavac</a></li><li>:book: <a href="https://www.ibm.com/developerworks/cn/web/1306_jiangjj_jsinstanceof/" target="_blank" rel="noopener">JavaScript instanceof 运算符深入剖析 —— IBM</a></li></ul><h3 id="视频-10"><a href="#视频-10" class="headerlink" title="视频"></a>视频</h3><ul><li>:tv: <a href="http://www.le.com/ptv/vplay/27766889.html" target="_blank" rel="noopener">改良版的构造函数 —— 乐视</a></li></ul><p><strong><a href="#目录">:arrow_up: 返回目录</a></strong></p><hr><h2 id="23-原型继承与原型链"><a href="#23-原型继承与原型链" class="headerlink" title="23. 原型继承与原型链"></a>23. 原型继承与原型链</h2><h3 id="文章-22"><a href="#文章-22" class="headerlink" title="文章"></a>文章</h3><ul><li>:book: <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain" target="_blank" rel="noopener">继承与原型链 —— MDN</a></li><li>:book: <a href="https://github.com/bigdots/blog/issues/1" target="_blank" rel="noopener">构造函数、原型与原型链 —— github</a></li><li>:book: <a href="https://github.com/stone0090/javascript-lessons/tree/master/2.5-Prototype" target="_blank" rel="noopener">原型及原型链 —— github(1269 Star)</a></li><li>:book: <a href="https://segmentfault.com/a/1190000004282206" target="_blank" rel="noopener">理清 javascript 中的面向对象(一) 原型继承 —— SegmentFault</a></li><li>:book: <a href="http://justjavac.com/2015/12/09/inheritance-and-the-prototype-chain.html" target="_blank" rel="noopener">JavaScript：继承和原型链(译) —— justjavac</a></li><li>:book: <a href="http://www.cnblogs.com/shuiyi/p/5305435.html" target="_blank" rel="noopener">三张图搞懂 JavaScript 的原型对象与原型链 —— 博客园</a></li><li>:book: <a href="https://blog.csdn.net/the__apollo/article/details/76774698" target="_blank" rel="noopener">一张图让你搞懂 JavaScript 的继承与原型链 —— CSDN</a></li><li>:book: <a href="https://blog.csdn.net/xiaotao_css/article/details/72782416" target="_blank" rel="noopener">JS 高级–原型链(一看就懂，但 18 岁以下请绕道) —— CSDN</a></li><li>:book: <a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014344997013405abfb7f0e1904a04ba6898a384b1e925000" target="_blank" rel="noopener">原型继承 —— 廖雪峰</a></li><li>:book: <a href="https://juejin.im/post/58f94c9bb123db411953691b" target="_blank" rel="noopener">JS 原型链与继承别再被问倒了 —— 掘金</a></li><li>:book: <a href="https://juejin.im/entry/5885db221b69e600592253e7" target="_blank" rel="noopener">征服 JavaScript 面试系列：类继承和原型继承的区别 —— 掘金</a></li></ul><h3 id="视频-11"><a href="#视频-11" class="headerlink" title="视频"></a>视频</h3><ul><li>:tv: <a href="http://www.le.com/ptv/vplay/27552753.html" target="_blank" rel="noopener">JS 高级-07-原型链继承 —— 乐视</a></li><li>:tv: <a href="https://v.qq.com/x/page/b0511nwa7d3.html" target="_blank" rel="noopener">JS 原型对象和原型链简介 —— 腾讯视频</a></li></ul><p><strong><a href="#目录">:arrow_up: 返回目录</a></strong></p><hr><h2 id="24-Object-create-和-Object-assign"><a href="#24-Object-create-和-Object-assign" class="headerlink" title="24. Object.create 和 Object.assign"></a>24. Object.create 和 Object.assign</h2><h3 id="文章-23"><a href="#文章-23" class="headerlink" title="文章"></a>文章</h3><ul><li>:book: <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create" target="_blank" rel="noopener">Object.create —— MDN</a></li><li>:book: <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign" target="_blank" rel="noopener">Object.assign —— MDN</a></li><li>:book: <a href="https://www.imooc.com/article/17591" target="_blank" rel="noopener">Object.create vs Object.assign —— 慕课网手记</a></li><li>:book: <a href="https://blog.csdn.net/DeepLies/article/details/52915143" target="_blank" rel="noopener">JS 中的 Object.assign()、Object.create()、Object.defineProperty() —— CSDN</a></li><li>:book: <a href="http://www.onlyfordream.cn/2018/03/19/es6%E4%B8%ADobject-create%E5%92%8Cobject-assign/" target="_blank" rel="noopener">es6 中 object.create()和 object.assign() —— 风信子博客</a></li><li>:book: <a href="https://github.com/saikojosh/Object-Assign-Deep" target="_blank" rel="noopener">Object-Assign-Deep —— github</a></li></ul><p><strong><a href="#目录">:arrow_up: 返回目录</a></strong></p><hr><h2 id="25-工厂函数和类"><a href="#25-工厂函数和类" class="headerlink" title="25. 工厂函数和类"></a>25. 工厂函数和类</h2><h3 id="文章-24"><a href="#文章-24" class="headerlink" title="文章"></a>文章</h3><ul><li>:book: <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes" target="_blank" rel="noopener">类 —— MDN</a></li><li>:book: <a href="https://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/00138682004077376d2d7f8cc8a4e2c9982f92788588322000" target="_blank" rel="noopener">类和实例 —— 廖雪峰</a></li><li>:book: <a href="http://www.ruanyifeng.com/blog/2012/07/three_ways_to_define_a_javascript_class.html" target="_blank" rel="noopener">Javascript 定义类（class）的三种方法 —— 阮一峰</a></li><li>:book: <a href="https://juejin.im/post/59c8c8756fb9a00a681ae5bd" target="_blank" rel="noopener">【译】ES6 的工厂函数 —— 掘金</a></li><li>:book: <a href="https://juejin.im/entry/587992c961ff4b0065edf1ff" target="_blank" rel="noopener">JavaScript 创建对象之单例、工厂、构造函数模式 —— 掘金</a></li></ul><p><strong><a href="#目录">:arrow_up: 返回目录</a></strong></p><hr><h2 id="26-设计模式"><a href="#26-设计模式" class="headerlink" title="26. 设计模式"></a>26. 设计模式</h2><h3 id="文章-25"><a href="#文章-25" class="headerlink" title="文章"></a>文章</h3><ul><li>:book: <a href="http://javascript.ruanyifeng.com/library/designpattern.html" target="_blank" rel="noopener">设计模式 —— 阮一峰</a></li><li>:book: <a href="https://juejin.im/post/59df4f74f265da430f311909" target="_blank" rel="noopener">JavaScript 设计模式 —— 掘金</a></li><li>:book: <a href="http://wiki.jikexueyuan.com/project/javascript-design-patterns/" target="_blank" rel="noopener">学用 JavaScript 设计模式 —— 极客学院</a></li><li>:book: <a href="https://segmentfault.com/a/1190000010914032" target="_blank" rel="noopener">[面试专题]JS 设计模式 —— SegmentFault</a></li><li>:book: <a href="https://github.com/lxj/javascript.patterns" target="_blank" rel="noopener">JavaScript Patterns 中译本 —— github</a></li></ul><h3 id="视频-12"><a href="#视频-12" class="headerlink" title="视频"></a>视频</h3><ul><li>:tv: <a href="https://tv.sohu.com/v/dXMvMjQwNzYwNzQ4Lzg5NzM2MDA3LnNodG1s.html" target="_blank" rel="noopener">HTML5 课程大纲 2-11JS 设计模式</a></li></ul><p><strong><a href="#目录">:arrow_up: 返回目录</a></strong></p><hr><h2 id="27-Memoization"><a href="#27-Memoization" class="headerlink" title="27. Memoization"></a>27. Memoization</h2><h3 id="文章-26"><a href="#文章-26" class="headerlink" title="文章"></a>文章</h3><ul><li>:book: <a href="https://www.cnblogs.com/rubylouvre/archive/2009/08/06/1540678.html" target="_blank" rel="noopener">JavaScript Memoization —— 司徒正美</a></li><li>:book: <a href="https://www.cnblogs.com/yingshuizy/p/4517102.html" target="_blank" rel="noopener">memoization 提升递归效率 —— 博客园</a></li><li>:book: <a href="http://developer.51cto.com/art/201010/231513.htm" target="_blank" rel="noopener">如何提升 JavaScript 的递归效率 —— 51CTO</a></li><li>:book: <a href="https://segmentfault.com/a/1190000016703106" target="_blank" rel="noopener">JavaScript 高级技巧 Memoization —— SegmentFaut</a></li></ul><p><strong><a href="#目录">:arrow_up: 返回目录</a></strong></p><hr><h2 id="28-纯函数-函数副作用和状态变化"><a href="#28-纯函数-函数副作用和状态变化" class="headerlink" title="28. 纯函数, 函数副作用和状态变化"></a>28. 纯函数, 函数副作用和状态变化</h2><h3 id="文章-27"><a href="#文章-27" class="headerlink" title="文章"></a>文章</h3><ul><li>:book: <a href="http://huziketang.mangojuice.top/books/react/lesson32" target="_blank" rel="noopener">纯函数(Pure Function) —— React.js 小书</a></li><li>:book: <a href="https://ninghao.net/blog/4634" target="_blank" rel="noopener">JavaScript Functional Programming：纯函数 —— 宁皓网</a></li><li>:book: <a href="https://www.jb51.net/article/28079.htm" target="_blank" rel="noopener">js 函数的副作用分析 —— 脚本之家</a></li><li>:book: <a href="https://juejin.im/post/5b82bdb351882542e241ed32?utm_medium=hao.caibaojian.com&amp;utm_source=hao.caibaojian.com" target="_blank" rel="noopener">如何使用纯函数式 JavaScript 处理脏副作用 —— 掘金</a></li><li>:book: <a href="http://www.cnblogs.com/zhangycun/p/9403335.html" target="_blank" rel="noopener">原生 JavaScript 实现 state 状态管理系统 —— 博客园</a></li><li>:book: <a href="https://github.com/BuptStEve/blog/issues/10" target="_blank" rel="noopener">JavaScript 函数式编程 —— @BuptStEve</a></li></ul><p><strong><a href="#目录">:arrow_up: 返回目录</a></strong></p><hr><h2 id="29-耗性能操作和时间复杂度"><a href="#29-耗性能操作和时间复杂度" class="headerlink" title="29. 耗性能操作和时间复杂度"></a>29. 耗性能操作和时间复杂度</h2><h3 id="文章-28"><a href="#文章-28" class="headerlink" title="文章"></a>文章</h3><ul><li>:book: <a href="https://juejin.im/entry/593f56528d6d810058a355f4" target="_blank" rel="noopener">时间复杂度 O(log n) 意味着什么？ —— 掘金</a></li><li>:book: <a href="https://juejin.im/entry/5a49f7d36fb9a0450a67b269" target="_blank" rel="noopener">算法的时间复杂度和空间复杂度 —— 掘金</a></li><li>:book: <a href="https://juejin.im/post/58d15f1044d90400691834d4" target="_blank" rel="noopener">算法（一）时间复杂度 —— 掘金</a></li><li>:book: <a href="http://www.bradoncode.com/blog/2012/04/big-o-algorithm-examples-in-javascript.html" target="_blank" rel="noopener">Big O Search Algorithms in JavaScript —— Bradley Braithwaite</a></li><li>:book: <a href="https://www.jenniferbland.com/time-complexity-analysis-in-javascript/" target="_blank" rel="noopener">Time Complexity Analysis in JavaScript — Jennifer Bland</a><br>-</li></ul><p><strong><a href="#目录">:arrow_up: 返回目录</a></strong></p><hr><h2 id="30-JavaScript-引擎"><a href="#30-JavaScript-引擎" class="headerlink" title="30. JavaScript 引擎"></a>30. JavaScript 引擎</h2><h3 id="文章-29"><a href="#文章-29" class="headerlink" title="文章"></a>文章</h3><ul><li>:book: <a href="https://baike.baidu.com/item/javascript引擎/5356108" target="_blank" rel="noopener">javascript 引擎 —— 百度百科</a></li><li>:book: <a href="https://baike.baidu.com/item/V8/6178125" target="_blank" rel="noopener">V8(JavaScript 引擎) —— 百度百科</a></li><li>:book: <a href="https://juejin.im/post/5a6309f76fb9a01cab2858b1" target="_blank" rel="noopener">图解搞懂 JavaScript 引擎 Event Loop —— 掘金</a>3</li><li>:book: <a href="https://segmentfault.com/a/1190000010819020" target="_blank" rel="noopener">V8 JavaScript 引擎：高性能的 ES2015+ —— justjavac</a></li><li>:book: <a href="https://segmentfault.com/a/1190000012806637" target="_blank" rel="noopener">10 分钟理解 JS 引擎的执行机制 —— SegmentFaut</a></li><li>:book: <a href="https://www.cnblogs.com/weirdoQi/p/6609811.html" target="_blank" rel="noopener">V8 javascript 引擎 —— 博客园</a></li></ul><p><strong><a href="#目录">:arrow_up: 返回目录</a></strong></p><hr><h2 id="31-二进制-十六进制-十进制-科学记数法"><a href="#31-二进制-十六进制-十进制-科学记数法" class="headerlink" title="31. 二进制, 十六进制, 十进制, 科学记数法"></a>31. 二进制, 十六进制, 十进制, 科学记数法</h2><h3 id="文章-30"><a href="#文章-30" class="headerlink" title="文章"></a>文章</h3><ul><li>:book: <a href="http://www.cnblogs.com/gaizai/p/4233780.html" target="_blank" rel="noopener">二、八、十、十六进制转换(图解篇) —— 博客园</a></li><li>:book: <a href="https://juejin.im/post/5b93dadaf265da0a857a58a3" target="_blank" rel="noopener">JavaScript 读写二进制数据 —— 掘金</a></li></ul><h3 id="视频-13"><a href="#视频-13" class="headerlink" title="视频"></a>视频</h3><ul><li>:tv: <a href="http://baishi.baidu.com/watch/7873060963471478456.html" target="_blank" rel="noopener">二进制、十进制、十六进制互相转化很难吗？ —— 百度视频</a></li></ul><p><strong><a href="#目录">:arrow_up: 返回目录</a></strong></p><hr><h2 id="32-偏函数-柯里化-Compose-和-Pipe"><a href="#32-偏函数-柯里化-Compose-和-Pipe" class="headerlink" title="32. 偏函数, 柯里化, Compose 和 Pipe"></a>32. 偏函数, 柯里化, Compose 和 Pipe</h2><h3 id="文章-31"><a href="#文章-31" class="headerlink" title="文章."></a>文章.</h3><ul><li>:book: <a href="https://blog.csdn.net/qq_42129063/article/details/81874314" target="_blank" rel="noopener">Javascript 函数式编程之偏函数 —— CSDN</a></li><li>:book: <a href="https://segmentfault.com/a/1190000010686144" target="_blank" rel="noopener">JavaScript 专题之偏函数 —— SegmentFault</a></li><li>:book: <a href="https://segmentfault.com/q/1010000008626058" target="_blank" rel="noopener">柯里化和偏函数有什么区别？ —— SegmentFault</a></li><li>:book: <a href="https://blog.csdn.net/neweastsun/article/details/75947785" target="_blank" rel="noopener">Javascript 偏函数与柯里化 —— CSDN</a></li><li>:book: <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch4.html" target="_blank" rel="noopener">柯里化(curry) —— JS 函数式编程指南</a></li><li>:book: <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch5.html" target="_blank" rel="noopener">代码组合(compose) —— JS 函数式编程指南</a></li><li>:book: <a href="https://segmentfault.com/a/1190000008394749" target="_blank" rel="noopener">关于 javascript 函数式编程中 compose 的实现 —— SegmentFault</a></li><li>:book: <a href="https://segmentfault.com/a/1190000011447164" target="_blank" rel="noopener">实现 compose 的五种思路 —— SegmentFault</a></li><li>:book: <a href="https://segmentfault.com/a/1190000015102804" target="_blank" rel="noopener">JavaScript 函数式编程之函数组合函数 compose 和 pipe 的实现 —— SegmentFault</a></li><li>:book: <a href="https://juejin.im/post/59a62f3d6fb9a0248363fd9d#comment" target="_blank" rel="noopener">JavaScript 轻量级函数式编程-第 4 章:组合函数 ——掘金</a></li><li>:book: <a href="https://github.com/BuptStEve/blog/issues/11" target="_blank" rel="noopener">JavaScript 函数式编程（二） —— @BuptStEve</a></li></ul><p><strong><a href="#目录">:arrow_up: 返回目录</a></strong></p><hr><h2 id="33-代码整洁之道"><a href="#33-代码整洁之道" class="headerlink" title="33. 代码整洁之道"></a>33. 代码整洁之道</h2><h3 id="文章-32"><a href="#文章-32" class="headerlink" title="文章"></a>文章</h3><ul><li>:book: <a href="https://www.zcfy.cc/article/clean-code-javascript-readme-md-at-master-ryanmcdermott-clean-code-javascript-github-2273.html" target="_blank" rel="noopener">[译] JavaScript 代码整洁之道 —— 边城</a></li><li>:book: <a href="http://www.ruanyifeng.com/blog/2012/04/javascript_programming_style.html" target="_blank" rel="noopener">Javascript 编程风格 —— 阮一峰</a></li><li>:book: <a href="https://juejin.im/post/5a5b2a5c6fb9a01cbc6e59f9" target="_blank" rel="noopener">重构 - 代码整洁之道 —— 掘金</a></li><li>:book: <a href="https://juejin.im/post/5a7d71836fb9a063435ecf51" target="_blank" rel="noopener">让你的代码更简短，更整洁，更易读的 ES6 小技巧 —— 掘金</a></li><li>:book: <a href="http://blog.jobbole.com/23617/" target="_blank" rel="noopener">Web 前端：11 个让你代码整洁的原则 —— 伯乐在线</a></li></ul><p><br></p><p><strong><a href="#目录">:arrow_up: 返回目录</a></strong></p><hr>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>求职季节之你必须要懂的原生js(上)</title>
      <link href="/2019/09/09/%E6%B1%82%E8%81%8C%E5%AD%A3%E4%B9%8B%E4%BD%A0%E5%BF%85%E9%A1%BB%E8%A6%81%E6%87%82%E7%9A%84%E5%8E%9F%E7%94%9FJS(%E4%B8%8A)/"/>
      <url>/2019/09/09/%E6%B1%82%E8%81%8C%E5%AD%A3%E4%B9%8B%E4%BD%A0%E5%BF%85%E9%A1%BB%E8%A6%81%E6%87%82%E7%9A%84%E5%8E%9F%E7%94%9FJS(%E4%B8%8A)/</url>
      
        <content type="html"><![CDATA[<p>(来自掘金) 寒冬求职之季你必须要懂的原生JS(上)</p><a id="more"></a><h3 id="1-基本类型有哪几种？null是对象吗？基本数据类型和复杂数据类型存储有啥区别？"><a href="#1-基本类型有哪几种？null是对象吗？基本数据类型和复杂数据类型存储有啥区别？" class="headerlink" title="1. 基本类型有哪几种？null是对象吗？基本数据类型和复杂数据类型存储有啥区别？"></a>1. 基本类型有哪几种？null是对象吗？基本数据类型和复杂数据类型存储有啥区别？</h3><ul><li>基本数据类型有6种：undefined、boolean、null、number、string、symbol（es6新增类型）。</li><li>虽然 typeof null 返回的是对象，但是null不是对象，而是基本类型种的一种。</li><li>基本数据类型存储在栈内存，存储的是值。</li><li>复杂数据类型存储的在堆内存，存储的是地址。当我们把对象赋值给另一个变量的时候，复制的是地址，指向同一块内存空间，当其中一个对象改变时，另一个对象也会改变。</li></ul><hr><h3 id="2-typeof是否正确判断类型？instanceof呢？instanceof的实现原理是什么？"><a href="#2-typeof是否正确判断类型？instanceof呢？instanceof的实现原理是什么？" class="headerlink" title="2. typeof是否正确判断类型？instanceof呢？instanceof的实现原理是什么？"></a>2. typeof是否正确判断类型？instanceof呢？instanceof的实现原理是什么？</h3><ul><li>typeof 能正确判断基本数据类型，但除了null之外， typeof null返回的是对象</li><li>但是对于对象，typeof不能正确的判断其类型，type 一个函数 输出的是 <code>function</code>，其余的对象都返回<code>object</code>  </li><li>instanceof 能正确判断复杂类型但不能判断基本类型</li><li>instanceof是通过原型链判断的，A instanceof B , 在A的原型链中层层查找，是否有原型等于B.prototype,如果一直站到A的原型链的顶端（null即 Object.prototype.<em>proto</em>），仍然不等于B.prototype,那么返回false,否则返回true</li><li>instanceof 的实现代码：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// L instanceof R</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">instance_of</span>(<span class="params">L, R</span>) </span>&#123; <span class="comment">// L 为左边表达式 R 为右表达式</span></span><br><span class="line">  <span class="keyword">var</span> O = R.prototype; <span class="comment">// 取R的显示原型</span></span><br><span class="line">  L = L._proto_;       <span class="comment">// 取L的隐式原型</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;       <span class="comment">// 遇到return 语句则跳出循环</span></span><br><span class="line">    <span class="keyword">if</span> (L === <span class="literal">null</span>)    <span class="comment">// 已经找到顶层</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (L === O)       <span class="comment">// 当 O 严格等于 L 时，返回true</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    L = L._proto_;     <span class="comment">// 继续向上一层原型链查找</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="3-for-of，for-in-和forEach-map的区别"><a href="#3-for-of，for-in-和forEach-map的区别" class="headerlink" title="3. for of，for in 和forEach,map的区别"></a>3. for of，for in 和forEach,map的区别</h3><ul><li>for…of循环：具有iterator接口，就可以使用for…of循环遍历他的成员（属性值）。for…of 循环可以使用的范围包括数组、Set和Map结构、某些类似数组的对象、generator对象，以及字符串。for…of 循环调用遍历器接口，数组的遍历器只返回具有数字索引的属性。对于普通的对象，for…of 结构不能直接使用，会报错，必须部署了Iterator接口后才能使用。可以中断循环。</li><li>for…in 循环：遍历对象自身和继承的可枚举的属性，不能直接获取属性值。可以中断循环。</li><li>forEach只能遍历数组，不能中断，没有返回值（或认为是undefined）。</li><li>map:只能遍历数组，不能中断，返回值修改后的数组。<br>PS:Object.keys():返回给定对象的所有可枚举属性的字符串数组。</li><li>关于forEach是否会改变原数组的问题：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arry = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">arry.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  item*=<span class="number">10</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arry);<span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line">arry.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  arry[<span class="number">1</span>] = <span class="number">10</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arry); <span class="comment">// [1, 10, 3, 4]</span></span><br><span class="line"><span class="keyword">let</span> arry2 = [</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">'Vue'</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">age</span>: <span class="number">10</span>&#125;</span><br><span class="line">];</span><br><span class="line">arry2.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  item.name = <span class="number">20</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arrr2); <span class="comment">// [&#123;name: 20&#125;, &#123;age: 10, name: 20&#125;</span></span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="4-如何判断一个变量是不是数组"><a href="#4-如何判断一个变量是不是数组" class="headerlink" title="4.如何判断一个变量是不是数组?"></a>4.如何判断一个变量是不是数组?</h3><ul><li>使用<code>Arrar.isArray()</code>判断，如果返回<code>true</code>，说明是数组</li><li>使用<code>instanceof Array</code> 判断，如果返回<code>true</code>，说明是数组</li><li>使用Object.prototype.toString.call判断，如果值是[objec Array]，说明是数组</li><li>通过constructor来判断，如果是数组，那么arr.constructor ==== Array，（不准确，因为我们可指定 obj.constructor = Array）<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(<span class="built_in">arguments</span>)); <span class="comment">// false, 因为arguments是类数组</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])); <span class="comment">// true</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span> <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">// false</span></span><br><span class="line">  <span class="built_in">console</span>.log([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">// true</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="built_in">arguments</span>)); <span class="comment">// [object arguments]</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.constructor === <span class="built_in">Array</span>); <span class="comment">// false</span></span><br><span class="line">  fn(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="5-类数组和数组的区别"><a href="#5-类数组和数组的区别" class="headerlink" title="5.类数组和数组的区别?"></a>5.类数组和数组的区别?</h3><p>类数组：是一个普通的对象，而真实的数组是Array类型。</p><ul><li>拥有length属性，其他属性（索引）为非负整数（对象中的索引会被当做字符串来处理)；</li><li>不具有数组的方法；<br>常见的类数组有：函数的参数arguments,DOM对象列表（比如通过document.querySelectorAll得到的列表），jQuery对象￥(“div”)<br>类数组可以转换为数组：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种转换方法</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.slice.call(arrayLike, start);</span><br><span class="line"><span class="comment">// 第二种方法</span></span><br><span class="line">[...arrayLike]</span><br><span class="line"><span class="comment">// 第三种方法</span></span><br><span class="line"><span class="built_in">Array</span>.from(arrayLike);</span><br></pre></td></tr></table></figure></li></ul><p>PS:任何定义了遍历器（Irerator）接口的对象，都可以用扩展运算符转为真正的数组<br>Array.from方法用于将两类对象转为真正的数组：类似数组的对象（array-like-object）和可遍历（iterator）对象。</p><hr><h3 id="6-和-有什么区别？"><a href="#6-和-有什么区别？" class="headerlink" title="6.== 和 === 有什么区别？"></a>6.== 和 === 有什么区别？</h3><p>=== 不需要类型转换，只有类型相等并且值相等时才返回true</p><p>== 如果两者类型不同，首先进行类型转换，具体流程如下：</p><ol><li>首先判断两者类型是否相同，如果相等，判断值是否相等。</li><li>如果类型不同进行类型转换</li><li>判断比较的是否是null 或undefined，如果是，返回true</li><li>判断两者类型事是否为string和number,如果是，将字符串转换成number</li><li>判断其中一方是否是boolean,如果是，将boolean转为number再进行判断</li><li>判断其中一方是否是object且另一方为string、number或者symbol，如果是，将object转换为原始类型再判断<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person1 = &#123;</span><br><span class="line">  age：<span class="number">25</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person2 = person1;</span><br><span class="line">person2.age = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person1 === person2);</span><br></pre></td></tr></table></figure></li></ol><p>思考：[] == ![];<br>我们来分析一下：[] == ![] 是true还是false?</p><ol><li>首先我们需要知道!运算符优先级高于 ==</li><li>![] 引用类型转换成布尔值都是true,因此，![] 是false</li><li>根据上面的第5条，false转换为number是0，因此右边表达式的计算结果是0</li><li>再根据上面的第6条，有一方是number，那么将object也转换为Number(空数组转换为number是0，如果数组中只有一个数字，转换为number就是这个数字，其他情况均为NaN)</li><li>0 == 0;为true</li></ol><hr><h3 id="7-ES6中的class和ES5的类有什么区别？"><a href="#7-ES6中的class和ES5的类有什么区别？" class="headerlink" title="7. ES6中的class和ES5的类有什么区别？"></a>7. ES6中的class和ES5的类有什么区别？</h3><ol><li>ES6 class 内部所有定义的方法都是不可枚举的</li><li>ES6 class 必须使用new调用</li><li>ES6 class 不存在变量提升</li><li>ES6 class 即默认为严格模式</li><li>ES6 class 子类必须在父类的构造器函数中调用super(),这样才有this对象;ES5中类的继承关系是相反的，现有子类的this，然后用父类的方法应用在this上。</li></ol><hr><h3 id="8-数组中的哪下API会改变原数组？"><a href="#8-数组中的哪下API会改变原数组？" class="headerlink" title="8.数组中的哪下API会改变原数组？"></a>8.数组中的哪下API会改变原数组？</h3><p>修改原数组的API有：<br>splice/reverse/fill/copyWithin/sort/push/pop/unshift/shift</p><p>不修改原数组的API有：<br>slice/map/forEach/every/filter/reduce/entries/find/some</p><hr><h3 id="9-let-const以及var的区别是什么？"><a href="#9-let-const以及var的区别是什么？" class="headerlink" title="9.let,const以及var的区别是什么？"></a>9.let,const以及var的区别是什么？</h3><ul><li>let 和 const 定义的变量不会出现变量提升，而var 定义的变量会提升</li><li>let 和 const 是JS中的块级作用域</li><li>let 和 const 不允许重复声明（会抛出错误）</li><li>let 和 const 定义的变量，如果在定义语句之前使用会抛出错误（形成了暂时性死区），而var 不会</li><li>const 声明一个只读的常量。一旦声明，常量的值就不能改变（如果声明是一个对象，那么不能改变的是对象的引用地址）</li></ul><hr><h3 id="10-在JS中什么是变量提升，什么是暂时性四区？"><a href="#10-在JS中什么是变量提升，什么是暂时性四区？" class="headerlink" title="10.在JS中什么是变量提升，什么是暂时性四区？"></a>10.在JS中什么是变量提升，什么是暂时性四区？</h3><p>变量提升就是在变量声明之前就可以使用，值为undefined<br>在代码块中，使用let/const 命令声明变量之前，该变量都是不可用的。这在语法上称为“暂时性死区”。暂时性死区也意味着typeof不再是一个百分之百安全的操作<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> x; <span class="comment">// referenceError(暂时性死区)</span></span><br><span class="line"><span class="keyword">let</span> x;</span><br><span class="line"><span class="keyword">typeof</span> y; <span class="comment">// 值是undefined，不会抛错</span></span><br></pre></td></tr></table></figure></p><p>暂时性死区的本质就是，只要一进入当前作用域，所要使用的变量就已经存在了，但是不可获取，只有等到声明变量的那一行代码出现，才可以获取和使用该变量。</p><hr><h3 id="11-如何正确的判断this-箭头函数的this是什么？"><a href="#11-如何正确的判断this-箭头函数的this是什么？" class="headerlink" title="11.如何正确的判断this?箭头函数的this是什么？"></a>11.如何正确的判断this?箭头函数的this是什么？</h3><p>this的绑定有四种规则：默认绑定、隐式绑定、显式绑定，new绑定</p><ol><li>函数是否在new中调用（new绑定），如果是，那么this绑定的是新创建的对象。</li><li>函数使用通过call,apply调用，或者使用了bind（即硬绑定），如果是，那么this绑定的就是指定的对象</li><li>函数是否在某个上下文对象中调用（隐式绑定），如果是的话，this绑定的就是那个上线文对象。一般是obj.foo()</li><li>如果以上都不是，那么使用默认绑定。如果在严格模式下，则绑定到undefined，否则绑定到全局对象。</li><li>如果把null或者undefined作为this的绑定对象传入call、appley或者bind,这些值在调用时会被忽略，实际应用的是默认绑定规则。</li><li>箭头函数没有this,她的this继承于上一层代码块的this</li></ol><p>测试下你已经get的知识点（浏览器执行环境）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> number = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  number: <span class="number">3</span>,</span><br><span class="line">  fn1: (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> number;</span><br><span class="line">    <span class="keyword">this</span>.number *= <span class="number">2</span></span><br><span class="line">    number = number * <span class="number">2</span>;</span><br><span class="line">    number = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> num = <span class="keyword">this</span>.number;</span><br><span class="line">      <span class="keyword">this</span>.number *= <span class="number">2</span>;</span><br><span class="line">      <span class="built_in">console</span>.log(num);</span><br><span class="line">      number *= <span class="number">3</span>;</span><br><span class="line">      <span class="built_in">console</span>.log(number); </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fn1 = obj.fn1;</span><br><span class="line">fn1.call(<span class="literal">null</span>);</span><br><span class="line">obj.fn1();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.number);</span><br></pre></td></tr></table></figure></p><hr><h3 id="12-词法作用域和this的区别"><a href="#12-词法作用域和this的区别" class="headerlink" title="12.词法作用域和this的区别"></a>12.词法作用域和this的区别</h3><ul><li>词法作用域是由你写代码时将变量和块作用域写在哪里来决定的</li><li>this是在被调用的时候被绑定的，this指向什么？完全取决于函数的调用位置</li></ul><hr><h3 id="13-谈谈你对JS执行上下文栈和作用域链的理解"><a href="#13-谈谈你对JS执行上下文栈和作用域链的理解" class="headerlink" title="13.谈谈你对JS执行上下文栈和作用域链的理解"></a>13.谈谈你对JS执行上下文栈和作用域链的理解</h3><p>执行上下文就是当前JS代码被解析和执行时所在的环境，JS执行上下文栈可以认为是一个存储函数调用的栈结构，遵循先进后出的原则。</p><ul><li>Javascript 执行在单线程上，所有的代码都是排队执行</li><li>一开始浏览器执行全局的代码时，首先创建全局的执行上下文，压入执行栈的顶部。</li><li>每当进入一个函数的执行就会创建函数的执行上下文，并且把它压入执行栈的顶部。当前函数执行完成后，当前函数的执行上下文出栈，并等待垃圾回收。</li><li>浏览器的JS执行引擎总是访问栈顶的执行上下文</li><li>全局上下文只有唯一的一个，它在浏览器关闭时出栈。<br>作用域链：无论是LHS还是RHS查询，都会在当前的作用域开始查找，如果没有找到，就会继续向上级作用域链查找目标标识符，每次上升一个作用域，一直到全局作用域为止。</li></ul><hr><h3 id="14-什么是闭包？闭包的作用是什么-闭包有哪些使用场景？"><a href="#14-什么是闭包？闭包的作用是什么-闭包有哪些使用场景？" class="headerlink" title="14.什么是闭包？闭包的作用是什么?闭包有哪些使用场景？"></a>14.什么是闭包？闭包的作用是什么?闭包有哪些使用场景？</h3><p>闭包是指有权访问另一个函数作用域中的变量的函数，创建闭包最常用的方式就是在一个函数内部创建另一个函数。<br>闭包的作用有：</p><ol><li>封装私有变量</li><li>模仿块级作用域（es5中没有块就作用域）</li><li>实现JS的模块</li></ol><hr><h3 id="15-call、apply有什么区别？call，apply和bind的内部是如何实现的？"><a href="#15-call、apply有什么区别？call，apply和bind的内部是如何实现的？" class="headerlink" title="15.call、apply有什么区别？call，apply和bind的内部是如何实现的？"></a>15.call、apply有什么区别？call，apply和bind的内部是如何实现的？</h3><p>call和apply的功能相同，区别在于传参的方式不一样：</p><ul><li>fn.call(obj,arg1,arg2,…)调用一个函数，具有一个指定的this值和分别提供的指定的参数（参数的列表）</li><li>fn.apply(obj, [argsArray])调用一个函数，具有一个指定的this值，一个作为一个数组（或类数组对象）提供的参数。<blockquote><p>call核心：</p></blockquote></li><li>将函数设为传入参数的属性</li><li>指定this到函数并传入给定参数执行函数</li><li>如果不传入参数或者参数为null，默认指向为window/global</li><li>删除参数上的函数<br>call方法的实现：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prootype.call = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!context) &#123;</span><br><span class="line">    context = <span class="keyword">typeof</span> <span class="built_in">window</span> === <span class="string">'undefined'</span> : global ? <span class="built_in">window</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  contex.fn = <span class="keyword">this</span>; <span class="comment">// this的指向是当前函数function的实例</span></span><br><span class="line">  <span class="keyword">let</span> rest = [...argument].slice(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">let</span> result = context.fn(...rest);</span><br><span class="line">  <span class="keyword">delete</span> context.fn;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试代码</span></span><br><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">  name: <span class="string">'Selina'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'Chirs'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">job, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  <span class="built_in">console</span>.log(job, age);</span><br><span class="line">&#125;</span><br><span class="line">bar.call(foo, <span class="string">'programmer'</span>, <span class="number">20</span>);</span><br><span class="line"><span class="comment">// Selina programmer 20</span></span><br><span class="line">bar.call(<span class="literal">null</span>, <span class="string">'teacher'</span>, <span class="number">25</span>);</span><br><span class="line"><span class="comment">// 浏览器环境：Chirs teacher 25  // node 环境：undefined teacher 25</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>apply</p></blockquote><p>apply的实现和call很类似，但是需要注意他们的参数是不一样的，apply的第二个参数是数组或类数组<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.apply = <span class="function"><span class="keyword">function</span> (<span class="params">context, rest</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!context) &#123;</span><br><span class="line">    context = <span class="keyword">typeof</span> <span class="built_in">window</span> === <span class="string">'undefined'</span> ?  global : <span class="built_in">window</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  constext.fn = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">let</span> result;</span><br><span class="line">  <span class="keyword">if</span> (rest === <span class="literal">undefined</span> || rest === <span class="literal">null</span>) &#123;</span><br><span class="line">    result = context.fn(rest);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type rest === <span class="string">'object'</span>) &#123;</span><br><span class="line">    result = context.fn(...rest)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">delete</span> context.fn;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试代码</span></span><br><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">  name: <span class="string">'Selina'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'Chirs'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">job, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  <span class="built_in">console</span>.log(job, age);</span><br><span class="line">&#125;</span><br><span class="line">bar.apply(foo, [<span class="string">'programmer'</span>, <span class="number">20</span>]);</span><br><span class="line"><span class="comment">// Selina programmer 20</span></span><br><span class="line">bar.call(<span class="literal">null</span>, <span class="string">'teacher'</span>, <span class="number">25</span>);</span><br><span class="line"><span class="comment">// 浏览器环境：Chirs teacher 25  // node 环境：undefined teacher 25</span></span><br></pre></td></tr></table></figure></p><blockquote><p>bind</p></blockquote><p>bind和call/apply 有一个很重要的的区别，一个函数被call/apply的时候，会直接调用，但是bind会创建一个新函数。当这个新函数被调用时，bind()的第一个参数作为它运行时的this，之后的一序列参数将会在传递的实参前传入作为它的参数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="keyword">this</span> !== <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'not a function'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> self = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">let</span> args = [...arguments].slice(<span class="number">1</span>);</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  Fn.prototype = <span class="keyword">this</span>.prototype;</span><br><span class="line">  <span class="keyword">let</span> bound = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = [...args, ...arguments];</span><br><span class="line">    context = <span class="keyword">this</span> <span class="keyword">instanceof</span> Fn ? <span class="keyword">this</span> : context || <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> self.apply(context, res)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 原型链</span></span><br><span class="line">  bound.prototype = <span class="keyword">new</span> Fn();</span><br><span class="line">  <span class="keyword">return</span> bound; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'jack'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params">age, job, gender</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name, age, job, gender);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> Yve = &#123;<span class="attr">name</span>: <span class="string">'Yvette'</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> result = person.bind(Yve, <span class="number">22</span>, <span class="string">'enginner'</span>)(<span class="string">'female'</span>)</span><br></pre></td></tr></table></figure></p><hr><h3 id="16-new的原理是什么？通过new的方式创建对象和通过字面量创建有啥区别？"><a href="#16-new的原理是什么？通过new的方式创建对象和通过字面量创建有啥区别？" class="headerlink" title="16.new的原理是什么？通过new的方式创建对象和通过字面量创建有啥区别？"></a>16.new的原理是什么？通过new的方式创建对象和通过字面量创建有啥区别？</h3><p>new:</p><ol><li>创建一个新对象</li><li>这个新对象会被执行[[原型]]连接</li><li>将构造函数的作用域值赋值给新对象，即this指向这个新对象</li><li>如果函数没有返回其他对象，那么new 表达式中的函数调用会自动返回这个新对象<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">new</span>(<span class="params">func</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> target = &#123;&#125;;</span><br><span class="line">  target._proto_ = func.prototype;</span><br><span class="line">  <span class="keyword">let</span> res = func.call(target);</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> (res) == <span class="string">'object'</span> || <span class="keyword">typeof</span> (res) == <span class="string">"function"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>字面量创建对象，不会调用Object构造函数，简洁且性能更好；<br>new Object() 方式创建对象本质上是方法的调用，涉及到在proto链中遍历该方法，当找到该方法后，又会生产方法调用必须的堆栈信息，方法调用结束后，还有释放该堆栈，性能不如字面量的方式。</p><hr><h3 id="17-谈谈你对原型的理解"><a href="#17-谈谈你对原型的理解" class="headerlink" title="17.谈谈你对原型的理解"></a>17.谈谈你对原型的理解</h3><p>在JavaScript中，每当定义一个对象（函数也是对象）时候，对象中都会包含一些预定义的属性。其中每个函数对象都有一个prototype属性，这个属性指向函数的原型对象。使用原型对象的好处就是所有对象实例共享共享它所包含的属性和方法。</p><hr><h3 id="18-什么是原型链？【原型链解决是什么问题？】"><a href="#18-什么是原型链？【原型链解决是什么问题？】" class="headerlink" title="18.什么是原型链？【原型链解决是什么问题？】"></a>18.什么是原型链？【原型链解决是什么问题？】</h3><p>原型链解决的主要是集成问题<br>每个对象拥有一个原型对象，通过proto指针指向其原型对象，并从中集成方法和属性，同时原型对象也可能拥有原型，这样一层一层，最终指向null。这种关系称为原型链，同过原型链可以拥有定义在其他对象的中的属性和方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p._proo_ === Parent.prototype</span><br></pre></td></tr></table></figure></p><hr><h3 id="19-prototype-和-proto-区别是什么？"><a href="#19-prototype-和-proto-区别是什么？" class="headerlink" title="19.prototype 和 proto 区别是什么？"></a>19.prototype 和 <em>proto</em> 区别是什么？</h3><p>prototype 是构造函数的属性<br><em>proto</em>是每个实例都有的属性，可以访问[[prototype]]属性<br>实例的<em>proto</em>与其构造函数的prototype指向的是同一个对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">Student.prototype.setAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.age = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> Jack = <span class="keyword">new</span> Student(<span class="string">'jack'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(Jack._proto_ === Student.prototype);</span><br></pre></td></tr></table></figure></p><hr><h3 id="20-使用ES5实现一个继承？"><a href="#20-使用ES5实现一个继承？" class="headerlink" title="20.使用ES5实现一个继承？"></a>20.使用ES5实现一个继承？</h3><blockquote><p>组合继承（最常用的方式）</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">this</span>.colors = [<span class="string">'red'</span>, <span class="string">'yellow'</span>, <span class="string">'blue'</span>];</span><br><span class="line">&#125;</span><br><span class="line">SuperType.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  SuperType.call(<span class="keyword">this</span>, age);</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">SubType.prototype = <span class="keyword">new</span> SuperType();</span><br><span class="line">SubType.prototype.construction = SubType;</span><br></pre></td></tr></table></figure><h3 id="21-什么是深拷贝-深拷贝和浅拷贝的区别是什么？"><a href="#21-什么是深拷贝-深拷贝和浅拷贝的区别是什么？" class="headerlink" title="21.什么是深拷贝?深拷贝和浅拷贝的区别是什么？"></a>21.什么是深拷贝?深拷贝和浅拷贝的区别是什么？</h3><p>浅拷贝是值值复制第一层对象，但是当对象的属性是引用类型时，实质是复制的其引用，当引用指向的值改变时也会跟着变化。</p><p>深拷贝复制变量值了，对于非基本类型的变量，则递归至基本类型变量后，在复制。深拷贝的对象和原来的对象是隔离的，互不影响，对一个对象的修改并不会影响另一个对象。<br>实现一个深拷贝：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (obj === <span class="literal">undefined</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">RegExp</span>(obj);</span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="built_in">Date</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(obj);</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">'object'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> obj; <span class="comment">// 不是复杂数据类型的话直接返回</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> t = <span class="keyword">new</span> obj.constuctor();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    t[key] = deepClone(obj(key));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h3 id="22-防抖和节流的区别是什么？防抖和节流的实现？"><a href="#22-防抖和节流的区别是什么？防抖和节流的实现？" class="headerlink" title="22.防抖和节流的区别是什么？防抖和节流的实现？"></a>22.防抖和节流的区别是什么？防抖和节流的实现？</h3><p>防抖和节流的作用都是防止函数的多次调用。区别在于，假设一个用户一直触发这个函数且每次触发函数的时间小于设置的时间，防抖的情况下只会调用一次，而节流的情况是每个一定时间调用一次函数。</p><blockquote><p>防抖（debounce）: n秒内函数只执行一次，如果n秒内高频事件再次被触发，则重新计算时间</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, wait, immediate=true</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timeout, context, args;</span><br><span class="line">  <span class="keyword">const</span> later = <span class="function"><span class="params">()</span> =&gt;</span> settimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    timeout = <span class="literal">null</span>; <span class="comment">// 延时函数执行完毕，清空计时器</span></span><br><span class="line">    <span class="comment">// 延迟执行的情况下，函数会在延迟函数中执行</span></span><br><span class="line">    <span class="comment">// 使用到之前的的缓存参数和执行上下文</span></span><br><span class="line">    <span class="keyword">if</span> (!immediate) &#123;</span><br><span class="line">      func.appy(context, args);</span><br><span class="line">      context = args = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; , wait);</span><br><span class="line">  <span class="keyword">let</span> debounced = <span class="function"><span class="keyword">function</span> (<span class="params">...params</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!timeout) &#123;</span><br><span class="line">      timeout = later();</span><br><span class="line">      <span class="keyword">if</span>(immediate) &#123;</span><br><span class="line">        <span class="comment">// 立即执行</span></span><br><span class="line">        func.apply(<span class="keyword">this</span>, params);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 闭包</span></span><br><span class="line">        constext = <span class="keyword">this</span>;</span><br><span class="line">        args = params;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      clearTimeout(timeout);</span><br><span class="line">      timeout = later();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  debounced.cancel = <span class="function"><span class="keyword">function</span> (<span class="params">params</span>) </span>&#123;</span><br><span class="line">    clearTimeout(timeout);</span><br><span class="line">    timeout = <span class="literal">null</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> debounced;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>防抖的应用场景:</p><ul><li>每次resize/scroll触发统计事件</li><li>文本输入的验证（连续输入文字后发送AJAX请求进行验证，验证一次就好）<blockquote><p>节流（throttle）: 高频事件在规定的时间内只会执行一次，执行一次后，只有大于设定的执行周期后才会执行第二次。</p></blockquote></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, wait, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> timeout, context, args, result;</span><br><span class="line">  <span class="keyword">var</span> previous = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (!options) options = &#123;&#125;;</span><br><span class="line">  <span class="keyword">var</span> later = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    previous = options.leading === <span class="literal">false</span> ? <span class="number">0</span>: <span class="built_in">Date</span>.now() || <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">    timeout = <span class="literal">null</span>;</span><br><span class="line">    result = func.apply(context, args);</span><br><span class="line">    <span class="keyword">if</span> (!timeout) context = args = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> throttled = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> now = <span class="built_in">Date</span>.now() || <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">    <span class="keyword">if</span> (!previous &amp;&amp; options.leading === <span class="literal">false</span>) previous = now;</span><br><span class="line">    <span class="keyword">var</span> remaining = wait - (now - previous);</span><br><span class="line">    context = <span class="keyword">this</span>;</span><br><span class="line">    args = <span class="built_in">arguments</span>;</span><br><span class="line">    <span class="keyword">if</span> (remaining &lt;= <span class="number">0</span> || remaining &gt; wait) &#123;</span><br><span class="line">      <span class="keyword">if</span> (timeout) &#123;</span><br><span class="line">        clearTimeout(timeout);</span><br><span class="line">        timeout = <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      previous = now;</span><br><span class="line">      result = func.apply(context, args);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(!timeout &amp;&amp; options.trailing !== <span class="literal">false</span>) &#123;</span><br><span class="line">      <span class="comment">// 判断是否设置了定时器和trailing</span></span><br><span class="line">      timeout = setTimeout(later, remaining);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  throttled.cancel = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    clearTimeout(timeout);</span><br><span class="line">    previous = <span class="number">0</span>;</span><br><span class="line">    timeout = context = args = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> throttled;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数节流的应用场景有：</p><ul><li>DOM 元素的拖拽功能的实现（mousemove）</li><li>设计游戏的mousedown/keydown时间（单位时间内只能发送一颗子弹）</li><li>计算鼠标移动的距离（mousemove）</li><li>canvas模拟画板功能（mousemove）</li><li>搜索联想</li><li>监听滚动事件是否到页面底部自动加载更多：给scroll加了debounce后，只能用户停止滚动后，才能判断是否到了页面底部；如果是throttle的话，只要页面滚动就会间隔一段时间判断一次</li></ul><hr><h3 id="23-取数组中的最大值（ES5、5S6）"><a href="#23-取数组中的最大值（ES5、5S6）" class="headerlink" title="23.取数组中的最大值（ES5、5S6）"></a>23.取数组中的最大值（ES5、5S6）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// es5</span></span><br><span class="line"><span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, [<span class="number">14</span>, <span class="number">3</span>, <span class="number">77</span>, <span class="number">301</span>]);</span><br><span class="line"><span class="comment">// es6</span></span><br><span class="line"><span class="built_in">Math</span>.max(...[<span class="number">14</span>, <span class="number">3</span>, <span class="number">77</span>, <span class="number">301</span>])</span><br><span class="line"><span class="comment">// reduce</span></span><br><span class="line">[<span class="number">14</span>, <span class="number">3</span>, <span class="number">77</span>, <span class="number">301</span>].reduce(<span class="function">(<span class="params">accumulator, currentValue</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> accumulator = accumulator &gt; currentVale ? accumulator : currentValue;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h3 id="24-ES6新的特性有哪些？"><a href="#24-ES6新的特性有哪些？" class="headerlink" title="24.ES6新的特性有哪些？"></a>24.ES6新的特性有哪些？</h3><ol><li>新增了块级作用域（let 和 const）</li><li>提供了定义类的语法糖</li><li>新增了一种基本数据类型（Symbol）</li><li>新增了变量的结构赋值</li><li>函数参数允许设置默认值，引入了rest参数，新增了箭头函数</li><li>数组新增了一些API, 如isArray/from/of方法；数组实例新增了entries(), keys()和values()等方法</li><li>对象好数组新增了扩展运算符</li><li>ES6新增了模块化（import/export）</li><li>ES6新增了Set和Map数据结构</li><li>ES6 原生提供了Proxy构造函数，用来生成Proxy实例</li><li>ES6 新增了生成器（Generator）和遍历器（iterator）</li></ol><hr><h3 id="25-setTimeout倒计时为什么会出现误差？"><a href="#25-setTimeout倒计时为什么会出现误差？" class="headerlink" title="25.setTimeout倒计时为什么会出现误差？"></a>25.setTimeout倒计时为什么会出现误差？</h3><p>setTimeout()只是将事件加入了“任务队列”，必须等待当前执行栈执行完，主线程才会去执行它指定的回调函数。要是当前代码消耗时间很长，也有可能要等很久，所以并不能保证回调函数一定会在setTimeout()指定的时间执行。所以，setTimeout()的第二个参数表示的是最少时间，并非确切时。</p><p>HTML5标准规定了setTimeout()的第二参数的最小值不得小于4毫秒，如果低于这个值，则默认是4毫秒。在此之前，老版本的浏览器都将最短时间设为10毫秒。另外，对于那些DOM的变动（尤其是涉及页面重新渲染的部分），通常是间隔16毫秒执行，这时使用requestAnimationFrame()的效果要好于setTimeout()</p><hr><h3 id="26-为什么0-1-0-2-0-3"><a href="#26-为什么0-1-0-2-0-3" class="headerlink" title="26.为什么0.1 + 0.2 != 0.3"></a>26.为什么0.1 + 0.2 != 0.3</h3><p>因为在进制转换和进阶运算的过程中出现精度损失。</p><hr><h3 id="27-promise有几种状态，Promise有什么优缺点？"><a href="#27-promise有几种状态，Promise有什么优缺点？" class="headerlink" title="27.promise有几种状态，Promise有什么优缺点？"></a>27.promise有几种状态，Promise有什么优缺点？</h3><p>promise有三种状态：fulfilled,rejected,pending<br>Promise的优点：</p><ol><li>一旦状态改变就不会变，任何时候都可以得到这个结果。</li><li>可以将异步操作以同步操作表达出来，避免了层层嵌套的回调函数<br>Promise的缺点：</li><li>无法取消Promise</li><li>当处于pending状态时，无法得知目前进展到哪一个阶段</li></ol><h3 id="28-Promise构造函数是同步执行还是异步执行，then中方法呢？promise如何实现then处理？"><a href="#28-Promise构造函数是同步执行还是异步执行，then中方法呢？promise如何实现then处理？" class="headerlink" title="28.Promise构造函数是同步执行还是异步执行，then中方法呢？promise如何实现then处理？"></a>28.Promise构造函数是同步执行还是异步执行，then中方法呢？promise如何实现then处理？</h3><p>promise的构造函数是同步执行的。then中的方法是异步执行的。<br>promise的then实现</p><h3 id="29-Promise和setTimeout的区别？"><a href="#29-Promise和setTimeout的区别？" class="headerlink" title="29. Promise和setTimeout的区别？"></a>29. Promise和setTimeout的区别？</h3><p>Promise是微服务，setTimeout是宏服务，同一个事件循环中，promise.then总是先于setTimeout执行。</p><h3 id="30-如何实现Promise-all"><a href="#30-如何实现Promise-all" class="headerlink" title="30. 如何实现Promise.all?"></a>30. 如何实现Promise.all?</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.all = <span class="function"><span class="keyword">function</span> (<span class="params">promises</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> result = [];</span><br><span class="line">    <span class="keyword">if</span> (promises.length === <span class="number">0</span>) &#123;</span><br><span class="line">      resolve(result);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">processValue</span>(<span class="params">i, data</span>) </span>&#123;</span><br><span class="line">        result[i] = data;</span><br><span class="line">        <span class="keyword">if</span> (++index === promises.length) &#123;</span><br><span class="line">          resolve(result);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promises.length; i++) &#123;</span><br><span class="line">        <span class="built_in">Promise</span>.resolve(promises[i].then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">          processValue(i, data);</span><br><span class="line">        &#125;,(err) =&gt; &#123;</span><br><span class="line">          reject(err);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string">### 31.如何实现Promise.finally?</span></span><br><span class="line"><span class="string">不管成功还是失败，都会走到finally中，并且finally之后，还可以继续then。并且将值原封不动的传递给后面的then</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line"><span class="built_in">Promise</span>.prototype.finally = <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(callback()).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> value;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;, (err) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(callback()).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string">### 32.什么是函数的柯里化？实现sum(1)(2)(3) 返回的结果是1,2,3的和</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">c</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> a + b + c;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>引申：实现一个curry函数，将普通函数进行柯里化：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cuury</span>(<span class="params">fn, args = []</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> rest = [...args, ...arguments];</span><br><span class="line">    <span class="keyword">if</span> (rest.length &lt; fn.length) &#123;</span><br><span class="line">      <span class="keyword">return</span> curry.call(<span class="keyword">this</span>, fn, rest);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> fn.apply(<span class="keyword">this</span>, rest)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> sumFn = curry(sum);</span><br><span class="line"><span class="built_in">console</span>.log(sumFn(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)); <span class="comment">// 6</span></span><br><span class="line"><span class="built_in">console</span>.log(sumFn(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java开发中，使用自动化管理工具来管理项目之maven 和 gradle</title>
      <link href="/2019/09/09/%E4%BD%BF%E7%94%A8maven%E8%87%AA%E5%8A%A8%E5%8C%96%E7%AE%A1%E7%90%86%E5%B7%A5%E7%A8%8B/"/>
      <url>/2019/09/09/%E4%BD%BF%E7%94%A8maven%E8%87%AA%E5%8A%A8%E5%8C%96%E7%AE%A1%E7%90%86%E5%B7%A5%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>java开发中，使用自动化管理工具来管理工程之maven 和 gradle的基本使用</p><a id="more"></a><p>maven和gradle都是工程自动化管理工具。</p><h1 id="maven篇章"><a href="#maven篇章" class="headerlink" title="maven篇章"></a>maven篇章</h1><blockquote><p><a href="http://maven.apache.org/" target="_blank" rel="noopener">maven官网</a></p></blockquote><h2 id="一、安装maven"><a href="#一、安装maven" class="headerlink" title="一、安装maven"></a>一、安装maven</h2><ol><li>官网网下载安装包（如：.zip文件）</li><li>解压缩在某个目录下。笔者是：<code>E:\Downloads\apache-maven-3.6.0-bin\apache-maven-3.6.0</code></li><li>自定义依赖包的下载目录<ul><li>找<code>E:\Downloads\apache-maven-3.6.0-bin\apache-maven-3.6.0\conf</code>目录（可能不同，得看解压缩包到底安装在哪）下的<code>settings.xml</code>文件</li><li>修改 此文件中的 <code>localRepository</code>（默认是被注释掉的） 标签中的值（一个特定的目录，用来存放依赖包）如笔者：<code>E:\Downloads\apache-maven-3.6.0-bin\repository</code></li></ul></li><li>配置环境变量<ul><li>新建变量：<code>MAVEN_HOME:E:\Downloads\apache-maven-3.6.0-bin\apache-maven-3.6.0</code></li><li>添加到环境变量：<code>%MAVEN_HOME%\bin</code></li></ul></li><li>检查是否安装成功<ul><li>cmd 中 输入 <code>mvn -version</code> 输出版本信息，则说明已经安装成功</li></ul></li></ol><h2 id="使用maven"><a href="#使用maven" class="headerlink" title="使用maven"></a>使用maven</h2><ol><li>打开idea或eclipse等这样的集成开发工具</li><li><p>idea集成maven</p><ul><li>maven配置：File &gt; Setting &gt; Build,Execution,Deployment&gt;maven<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Maven home directory: `E:\Downloads\apache-maven-3.6.0-bin\apache-maven-3.6.0`</span><br><span class="line">Local repository: `E:\Downloads\apache-maven-3.6.0-bin\repository`</span><br></pre></td></tr></table></figure></li></ul></li><li><p>打开已经存在的maven项目（或者可自己创建），如：</p><ul><li>在idea中：File &gt; Open</li><li>在idea的右侧边栏，有maven选项，点击后，弹出面板，然后单击刷新即可自动安装项目依赖包</li><li>等安装完成后，可以在 <code>E:\Downloads\apache-maven-3.6.0-bin\repository</code> 查看安装的依赖包</li></ul></li><li>maven 主要指令<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">`终端进入到`pox.xml`文件所在的目录下`</span><br><span class="line">mvn -version <span class="comment"># 查看当前maven的版本信息</span></span><br><span class="line">mvn clean    <span class="comment"># 清除打包之后的target目录</span></span><br><span class="line">mvn package  <span class="comment"># 运行打包，生成jar包</span></span><br><span class="line"><span class="comment"># 运行包 如：</span></span><br><span class="line">java -jar target/platform-plus.jar</span><br></pre></td></tr></table></figure></li></ol><p>注意：jar包的运行必须要有java环境（即得安装JDK）</p><h1 id="gradle篇章"><a href="#gradle篇章" class="headerlink" title="gradle篇章"></a>gradle篇章</h1>]]></content>
      
      
      
        <tags>
            
            <tag> maven gradle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>weex 扩展Android 和 iso 的能力</title>
      <link href="/2019/09/09/weex%20%E6%89%A9%E5%B1%95Android%E7%9A%84%E8%83%BD%E5%8A%9B/"/>
      <url>/2019/09/09/weex%20%E6%89%A9%E5%B1%95Android%E7%9A%84%E8%83%BD%E5%8A%9B/</url>
      
        <content type="html"><![CDATA[<p>weex 扩展Android 和 iso 的能力, 来自<a href="https://weex.apache.org/zh/guide/extend/extend-android.html#module-%E6%89%A9%E5%B1%95" target="_blank" rel="noopener">weex官网</a></p><a id="more"></a><h1 id="Module-扩展"><a href="#Module-扩展" class="headerlink" title="Module 扩展"></a>Module 扩展</h1><ol><li>Module 扩展必须继承WXModule类。</li><li>扩展方法必须加上<code>@JSMethod(uiThread = false or true)</code>注解。Weex会根据注解来判断当前方法是否要运行在UI线程。</li><li>Weex是根据反射来调用Module扩展方法，所以Module中的扩展方法必须是<code>pulic</code>类型。</li><li>同样是因为反射调用，Module不能被混淆。请在混淆文件中添加代码:<code>-keep public class * extends com.taobao.weex.common.WXModule{*;}</code>。</li><li>Module扩展方法可以使用int,double,float,String,Map,List类型的参数。</li><li>完成Module后一定要在初始化注册<code>WXSDKEngine.registerModule(&quot;myModule&quot;, MyModule.class)</code>,否则会报类似错误：<code>ReportException :undefined:9: TypeError: Object #&lt;Object&gt; has no method &#39;printLog&#39;</code>;</li></ol><p>示例如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">pulic <span class="class"><span class="keyword">class</span> <span class="title">MyModule</span> <span class="keyword">extends</span> <span class="title">WXModule</span> </span>&#123;</span><br><span class="line">    <span class="comment">// run ui thread</span></span><br><span class="line">    <span class="meta">@JSMethod</span>(uithead = <span class="keyword">true</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printLog</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">      Toast.makeText(mWXSDKInstance.getContext(),msg,Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// run JS thread</span></span><br><span class="line">    <span class="meta">@JSMethod</span>(uiThread = <span class="keyword">false</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fireEventSyncCall</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">// implement your module logic here</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Register the module<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WXSDKEngine.registerModule(<span class="string">'MyModule'</span>, MyModule.class);</span><br></pre></td></tr></table></figure></p><p>JS调用如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">text</span> <span class="attr">onclick</span>=<span class="string">'click'</span>&gt;</span>testMyModule<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">      name: <span class="string">''</span>.</span></span><br><span class="line">      methods: &#123;</span><br><span class="line">        click() &#123;</span><br><span class="line"><span class="actionscript">          weex.requireModule(<span class="string">'MyModule'</span>).printLog(<span class="string">"i am a weex Module"</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="Module-注册"><a href="#Module-注册" class="headerlink" title="Module 注册"></a>Module 注册</h1><p>registerModule(moduleName,moduleClass)</p><ul><li>return {bool}: 是否注册成功</li><li>moduleName {String}: 模块名称</li><li>moduleClass {Class}: 模块对应的class,创建module 实例时调用</li></ul><p>使用方式：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WXSDKEngine.registerModule(<span class="string">'picker'</span>, WXPickersModule.class);</span><br></pre></td></tr></table></figure></p><h1 id="Component-扩展（version-lt-0-19-0）"><a href="#Component-扩展（version-lt-0-19-0）" class="headerlink" title="Component 扩展（version&lt; 0.19.0）"></a>Component 扩展（version&lt; 0.19.0）</h1><ul><li>Component 扩展类必须继承 WXComponent.</li><li>Component 对应的设置属性的方法必须添加注解 <code>@WXComponentProp(name=value(value is attr or style of dsl))</code></li><li>Weex sdk 通过反射调用对应的方法，所以 Component 对应的属性方法必须是 public，并且不能被混淆。请在混淆文件中添加代码<code>-keep public class * extends com.taobao.weex.ui.component.WXComponent{*;}</code></li><li>Component 扩展的方法可以使用 int, double, float, String, Map, List 类型的参数</li><li>完成 Component 后一定要在初始化时注册 <code>WXSDKEngine.registerComponent(&quot;richText&quot;, RichText.class)</code>;<br>示例如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RichText</span> <span class="keyword">extends</span> <span class="title">WXComponent</span>&lt;<span class="title">TextView</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">RichText</span><span class="params">(WXSDKInstance instance, WXDomObject dom, WXContainer parent)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(instance, dom, parent);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> TextView <span class="title">initComponentHostView</span><span class="params">(@NonNull Context context)</span> </span>&#123;</span><br><span class="line">    TextView textView  = <span class="keyword">new</span> TextView(context);</span><br><span class="line">    textView.setTextSize(<span class="number">20</span>);</span><br><span class="line">    textView.setTextColor(Color.banck);</span><br><span class="line">    <span class="keyword">return</span> textView;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@WXComponentProp</span>(name = <span class="string">"tel"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTel</span><span class="params">(String telNumber)</span> </span>&#123;</span><br><span class="line">    getHostView().setText(<span class="string">"tel:"</span> + telNumber);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>注册你的组件：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WXSDKEngine.registerComponent(<span class="string">'RichText'</span>, RichText.class);</span><br></pre></td></tr></table></figure></p><p>JS调用如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">richText</span> <span class="attr">tel</span>=<span class="string">"12305"</span> <span class="attr">style</span>=<span class="string">"width:200;height:100"</span>&gt;</span>12305<span class="tag">&lt;/<span class="name">richText</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="Component-注册"><a href="#Component-注册" class="headerlink" title="Component 注册"></a>Component 注册</h1><h3 id="registerComponent-type-class-appendTree"><a href="#registerComponent-type-class-appendTree" class="headerlink" title="registerComponent(type,class,appendTree)"></a>registerComponent(type,class,appendTree)</h3><ul><li>return(bool): 是否注册成功</li><li>type(String): 前端使用的对应标签</li><li>class(Class): 组件的class，在创建组件实例时调用</li><li>appendTree(bool): 渲染时判定逻辑，默认false<ul><li>如果为true，则这个组件的子组件，整颗树建立、layout完后，整体一起刷新。</li><li>如果为false，则这个组件的子组件，每add一个，刷新一个。<br>使用方式：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WXSDKEngine.registerComponent(<span class="string">'video'</span>, WXVideo, <span class="keyword">false</span>);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="registerComponent-holder-appendTree，…names"><a href="#registerComponent-holder-appendTree，…names" class="headerlink" title="registerComponent(holder,appendTree，…names)"></a>registerComponent(holder,appendTree，…names)</h3><ul><li>return(bool): 是否注册成功</li><li>holder(IFComponentHolder): 用于创建component的抽象工厂，默认使用<strong>SimpleComponentHolder</strong>。</li><li>appendTree: 同上</li><li>names(String …): 前端使用的对应标签<br>使用方式:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">WXSDKEngine.registerComponent(</span><br><span class="line">              <span class="keyword">new</span> SimpleComponentHolder(</span><br><span class="line">                      WXText.class,</span><br><span class="line">                      <span class="keyword">new</span> WXText.Creator()</span><br><span class="line">              ),</span><br><span class="line">              <span class="keyword">false</span>,</span><br><span class="line">              <span class="string">"text"</span></span><br><span class="line">      );</span><br></pre></td></tr></table></figure></li></ul><h1 id="Adapter-扩展"><a href="#Adapter-扩展" class="headerlink" title="Adapter 扩展"></a>Adapter 扩展</h1><h3 id="图片库Adapter"><a href="#图片库Adapter" class="headerlink" title="图片库Adapter"></a>图片库Adapter</h3><p>需要时集成接口 IWXImgLoaderAdapter，实现 setImage 方法。<br>示例代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageAdapter</span> <span class="keyword">implements</span> <span class="title">IWXImgLoaderAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ImageAdapter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setImage</span><span class="params">(<span class="keyword">final</span> String url, <span class="keyword">final</span> ImageView view,</span></span></span><br><span class="line"><span class="function"><span class="params">                       WXImageQuality quality, WXImageStrategy strategy)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    WXSDKManager.getInstance().postOnUiThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(view==<span class="keyword">null</span>||view.getLayoutParams()==<span class="keyword">null</span>)&#123;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (TextUtils.isEmpty(url)) &#123;</span><br><span class="line">          view.setImageBitmap(<span class="keyword">null</span>);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String temp = url;</span><br><span class="line">        <span class="keyword">if</span> (url.startsWith(<span class="string">"//"</span>)) &#123;</span><br><span class="line">          temp = <span class="string">"http:"</span> + url;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (view.getLayoutParams().width &lt;= <span class="number">0</span> || view.getLayoutParams().height &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Picasso.with(WXEnvironment.getApplication())</span><br><span class="line">            .load(temp)</span><br><span class="line">            .into(view);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="Adapter-注册"><a href="#Adapter-注册" class="headerlink" title="Adapter 注册"></a>Adapter 注册</h1><p>WEEX和图片库完全解耦，WEEX的图片加载，都是通过调用公共接口，由实现类决定调用哪个图片库</p><p>一个相对完整的源码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.weex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.app.Application;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.bindingx.plugin.weex.BindingX;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.weex.commons.adapter.DefaultWebSocketAdapterFactory;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.weex.commons.adapter.ImageAdapter;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.weex.commons.adapter.JSExceptionAdapter;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.weex.commons.adapter.PicassoBasedDrawableLoader;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.weex.extend.adapter.ApmGenerator;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.weex.extend.adapter.DefaultAccessibilityRoleAdapter;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.weex.extend.adapter.InterceptWXHttpAdapter;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.weex.extend.adapter.WXAnalyzerDemoListener;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.weex.extend.component.WXComponentSyncTest;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.weex.extend.component.WXMask;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.weex.extend.component.WXParallax;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.weex.extend.<span class="keyword">module</span>.GeolocationModule;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.weex.extend.<span class="keyword">module</span>.MyModule;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.weex.extend.<span class="keyword">module</span>.RenderModule;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.weex.extend.<span class="keyword">module</span>.SyncTestModule;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.weex.extend.<span class="keyword">module</span>.WXEventModule;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.weex.extend.<span class="keyword">module</span>.WXTitleBar;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.weex.extend.<span class="keyword">module</span>.WXWsonTestModule;</span><br><span class="line"><span class="keyword">import</span> com.facebook.drawee.backends.pipeline.Fresco;</span><br><span class="line"><span class="keyword">import</span> com.taobao.weex.InitConfig;</span><br><span class="line"><span class="keyword">import</span> com.taobao.weex.WXEnvironment;</span><br><span class="line"><span class="keyword">import</span> com.taobao.weex.WXSDKEngine;</span><br><span class="line"><span class="keyword">import</span> com.taobao.weex.WXSDKManager;</span><br><span class="line"><span class="keyword">import</span> com.taobao.weex.bridge.WXBridgeManager;</span><br><span class="line"><span class="keyword">import</span> com.taobao.weex.common.WXException;</span><br><span class="line"><span class="keyword">import</span> com.taobao.weex.performance.WXAnalyzerDataTransfer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WXApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Set up for fresco usage.</span></span><br><span class="line"><span class="comment">     * Set&lt;RequestListener&gt; requestListeners = new HashSet&lt;&gt;();</span></span><br><span class="line"><span class="comment">     * requestListeners.add(new RequestLoggingListener());</span></span><br><span class="line"><span class="comment">     * ImagePipelineConfig config = ImagePipelineConfig.newBuilder(this)</span></span><br><span class="line"><span class="comment">     *     .setRequestListeners(requestListeners)</span></span><br><span class="line"><span class="comment">     *     .build();</span></span><br><span class="line"><span class="comment">     * Fresco.initialize(this,config);</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line"><span class="comment">//    initDebugEnvironment(true, false, "DEBUG_SERVER_HOST");</span></span><br><span class="line">    WXBridgeManager.updateGlobalConfig(<span class="string">"wson_on"</span>);</span><br><span class="line">    WXEnvironment.setOpenDebugLog(<span class="keyword">true</span>);</span><br><span class="line">    WXEnvironment.setApkDebugable(<span class="keyword">true</span>);</span><br><span class="line">    WXSDKEngine.addCustomOptions(<span class="string">"appName"</span>, <span class="string">"WXSample"</span>);</span><br><span class="line">    WXSDKEngine.addCustomOptions(<span class="string">"appGroup"</span>, <span class="string">"WXApp"</span>);</span><br><span class="line">    WXSDKEngine.initialize(<span class="keyword">this</span>,</span><br><span class="line">                           <span class="keyword">new</span> InitConfig.Builder()</span><br><span class="line">                               <span class="comment">//.setImgAdapter(new FrescoImageAdapter())// use fresco adapter</span></span><br><span class="line">                               .setImgAdapter(<span class="keyword">new</span> ImageAdapter())</span><br><span class="line">                               .setDrawableLoader(<span class="keyword">new</span> PicassoBasedDrawableLoader(getApplicationContext()))</span><br><span class="line">                               .setWebSocketAdapterFactory(<span class="keyword">new</span> DefaultWebSocketAdapterFactory())</span><br><span class="line">                               .setJSExceptionAdapter(<span class="keyword">new</span> JSExceptionAdapter())</span><br><span class="line">                               .setHttpAdapter(<span class="keyword">new</span> InterceptWXHttpAdapter())</span><br><span class="line">                               .setApmGenerater(<span class="keyword">new</span> ApmGenerator())</span><br><span class="line">                               .build()</span><br><span class="line">                          );</span><br><span class="line">    WXSDKManager.getInstance().addWXAnalyzer(<span class="keyword">new</span> WXAnalyzerDemoListener());</span><br><span class="line">    WXAnalyzerDataTransfer.isOpenPerformance = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    WXSDKManager.getInstance().setAccessibilityRoleAdapter(<span class="keyword">new</span> DefaultAccessibilityRoleAdapter());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      Fresco.initialize(<span class="keyword">this</span>);</span><br><span class="line">      WXSDKEngine.registerComponent(<span class="string">"synccomponent"</span>, WXComponentSyncTest.class);</span><br><span class="line">      WXSDKEngine.registerComponent(WXParallax.PARALLAX, WXParallax.class);</span><br><span class="line"></span><br><span class="line">      WXSDKEngine.registerModule(<span class="string">"render"</span>, RenderModule.class);</span><br><span class="line">      WXSDKEngine.registerModule(<span class="string">"event"</span>, WXEventModule.class);</span><br><span class="line">      WXSDKEngine.registerModule(<span class="string">"syncTest"</span>, SyncTestModule.class);</span><br><span class="line"></span><br><span class="line">      WXSDKEngine.registerComponent(<span class="string">"mask"</span>, WXMask.class);</span><br><span class="line">      WXSDKEngine.registerModule(<span class="string">"myModule"</span>, MyModule.class);</span><br><span class="line">      WXSDKEngine.registerModule(<span class="string">"geolocation"</span>, GeolocationModule.class);</span><br><span class="line"></span><br><span class="line">      WXSDKEngine.registerModule(<span class="string">"titleBar"</span>, WXTitleBar.class);</span><br><span class="line"></span><br><span class="line">      WXSDKEngine.registerModule(<span class="string">"wsonTest"</span>, WXWsonTestModule.class);</span><br><span class="line"></span><br><span class="line">      BindingX.register();</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * override default image tag</span></span><br><span class="line"><span class="comment">       * WXSDKEngine.registerComponent("image", FrescoImageComponent.class);</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//Typeface nativeFont = Typeface.createFromAsset(getAssets(), "font/native_font.ttf");</span></span><br><span class="line">      <span class="comment">//WXEnvironment.setGlobalFontFamily("bolezhusun", nativeFont);</span></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (WXException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    registerActivityLifecycleCallbacks(<span class="keyword">new</span> ActivityLifecycleCallbacks() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityCreated</span><span class="params">(Activity activity, Bundle bundle)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityStarted</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityResumed</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityPaused</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityStopped</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivitySaveInstanceState</span><span class="params">(Activity activity, Bundle bundle)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityDestroyed</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// The demo code of calling 'notifyTrimMemory()'</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">false</span>) &#123;</span><br><span class="line">          <span class="comment">// We assume that the application is on an idle time.</span></span><br><span class="line">          WXSDKManager.getInstance().notifyTrimMemory();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// The demo code of calling 'notifySerializeCodeCache()'</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">false</span>) &#123;</span><br><span class="line">          WXSDKManager.getInstance().notifySerializeCodeCache();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   *<span class="doctag">@param</span> connectable debug server is connectable or not.</span></span><br><span class="line"><span class="comment">   *               if true, sdk will try to connect remote debug server when init WXBridge.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> debuggable enable remote debugger. valid only if host not to be "DEBUG_SERVER_HOST".</span></span><br><span class="line"><span class="comment">   *               true, you can launch a remote debugger and inspector both.</span></span><br><span class="line"><span class="comment">   *               false, you can  just launch a inspector.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> host the debug server host, must not be "DEBUG_SERVER_HOST", a ip address or domain will be OK.</span></span><br><span class="line"><span class="comment">   *             for example "127.0.0.1".</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initDebugEnvironment</span><span class="params">(<span class="keyword">boolean</span> connectable, <span class="keyword">boolean</span> debuggable, String host)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="string">"DEBUG_SERVER_HOST"</span>.equals(host)) &#123;</span><br><span class="line">      WXEnvironment.sDebugServerConnectable = connectable;</span><br><span class="line">      WXEnvironment.sRemoteDebugMode = debuggable;</span><br><span class="line">      WXEnvironment.sRemoteDebugProxyUrl = <span class="string">"ws://"</span> + host + <span class="string">":8088/debugProxy/native"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> weex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>weex 集成到 Android 应用</title>
      <link href="/2019/09/09/weex%E9%9B%86%E6%88%90%E5%88%B0android%E5%BA%94%E7%94%A8/"/>
      <url>/2019/09/09/weex%E9%9B%86%E6%88%90%E5%88%B0android%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>weex 集成到 Android 应用<br><a href="https://weex.apache.org/" target="_blank" rel="noopener">weex官网</a></p><a id="more"></a><ol><li><strong>设置gradle依赖</strong></li></ol><hr><p>在<code>build.gradle</code>中的<code>dependencies</code>添加支持Android开发的依赖<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// weex sdk and fastjson</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">'com.taobao.android:weex_sdk:0.20.0.2@aar'</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">'com.alibaba:fastjson:1.1.46.android'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//support library dependencies</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:recyclerview-v7:23.1.1'</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:support-v4:23.1.1'</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:appcompat-v7:23.1.1'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol start="2"><li><strong>配置混淆规则</strong></li></ol><hr><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-keep <span class="keyword">class</span> com.taobao.weex.bridge.** &#123; *; &#125;</span><br><span class="line">-keep <span class="keyword">class</span> com.taobao.weex.layout.** &#123; *; &#125;</span><br><span class="line">-keep <span class="keyword">class</span> com.taobao.weex.WXSDKEngine &#123; *; &#125;</span><br><span class="line">-keep <span class="keyword">class</span> com.taobao.weex.base.SystemMessageHandler &#123; *; &#125;</span><br><span class="line">-dontwarn com.taobao.weex.bridge.**</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>声明权限</strong></li></ol><hr><p>在AndroidManifest.xml中声明权限<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//网络</span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_NETWORK_STATE"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">//sd卡读写</span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.READ_EXTERNAL_STORAGE"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><ol start="4"><li><strong>初始化sdk</strong></li></ol><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">InitConfig config = <span class="keyword">new</span> InitConfig.Builder()</span><br><span class="line">  <span class="comment">//.setImgAdapter(new FrescoImageAdapter())// use fresco adapter</span></span><br><span class="line">  .setImgAdapter(<span class="keyword">new</span> ImageAdapter())</span><br><span class="line">  .setDrawableLoader(<span class="keyword">new</span> PicassoBasedDrawableLoader(getApplicationContext()))</span><br><span class="line">  .setWebSocketAdapterFactory(<span class="keyword">new</span> DefaultWebSocketAdapterFactory())</span><br><span class="line">  .setJSExceptionAdapter(<span class="keyword">new</span> JSExceptionAdapter())</span><br><span class="line">  .setHttpAdapter(<span class="keyword">new</span> InterceptWXHttpAdapter())</span><br><span class="line">  .setApmGenerater(<span class="keyword">new</span> ApmGenerator())</span><br><span class="line">  .build();</span><br><span class="line">WXSDKEngine.initialize(applicationContext, config);</span><br></pre></td></tr></table></figure><ol start="5"><li><strong>创建WXSDKInstance</strong></li></ol><hr><p><code>WXSDKInstance</code>是weex 渲染页面的基本单元</p><ul><li>通过<code>instance.render(url)</code>拉取bundle</li><li>在回调<code>IWXrenderListener</code>的<code>onViewCreated</code>返回创建的view</li><li>将返回的view添加到Activity的view上（rootView）<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">IWXRenderListener</span> </span>&#123;</span><br><span class="line">  WXSDKInstance mWXSDKInstance;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">    mWXSDKInstance = <span class="keyword">new</span> WXSDKInstance(<span class="keyword">this</span>);</span><br><span class="line">    mWXSDKInstance.registerRenderListener(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * bundleUrl source http://dotwe.org/vue/38e202c16bdfefbdb88a8754f975454c</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    String pageName = <span class="string">"WXSample"</span>;</span><br><span class="line">    String bundleUrl = <span class="string">"http://dotwe.org/raw/dist/38e202c16bdfefbdb88a8754f975454c.bundle.wx"</span>;</span><br><span class="line">    mWXSDKInstance.renderByUrl(pageName, bundleUrl, <span class="keyword">null</span>, <span class="keyword">null</span>,WXRenderStrategy.APPEND_ASYNC);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewCreated</span><span class="params">(WXSDKInstance instance, View view)</span> </span>&#123;</span><br><span class="line">    setContentView(view);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRenderSuccess</span><span class="params">(WXSDKInstance instance, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRefreshSuccess</span><span class="params">(WXSDKInstance instance, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onException</span><span class="params">(WXSDKInstance instance, String errCode, String msg)</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onResume();</span><br><span class="line">    <span class="keyword">if</span>(mWXSDKInstance!=<span class="keyword">null</span>)&#123;</span><br><span class="line">      mWXSDKInstance.onActivityResume();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onPause();</span><br><span class="line">    <span class="keyword">if</span>(mWXSDKInstance!=<span class="keyword">null</span>)&#123;</span><br><span class="line">       mWXSDKInstance.onActivityPause();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onStop();</span><br><span class="line">    <span class="keyword">if</span>(mWXSDKInstance!=<span class="keyword">null</span>)&#123;</span><br><span class="line">      mWXSDKInstance.onActivityStop();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onDestroy();</span><br><span class="line">    <span class="keyword">if</span>(mWXSDKInstance!=<span class="keyword">null</span>)&#123;</span><br><span class="line">      mWXSDKInstance.onActivityDestroy();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol start="6"><li><strong>运行app</strong></li></ol><hr><p>运行app</p><ol start="7"><li><strong>扩展Android能力</strong></li></ol><hr><p>Weex提供了能力扩展机制，可以根据自己的业务定制自己的功能。主要分为：</p><ul><li>Module 扩展，非UI的特定功能。例如sendHttp、openURL等。</li><li>Component 扩展，实现特别功能的Native控件。例如：RichTextiew, RefreshListview 等。</li><li>Adapter扩展，Weex对一些基础功能实现了统一接口，可实现这些接口来定制自己的业务。例如，图片下载等。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> weex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 分支剖析</title>
      <link href="/2019/09/09/git%20%E5%88%86%E6%94%AF%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/09/09/git%20%E5%88%86%E6%94%AF%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>git 的分支是它最明显的特性， 大部分人听别人推荐使用git都会听到“git分支操作方便…”，对比其他版本控制系统git 分支操作有难以置信的轻量，创建新分支几乎瞬间完成，不同分支之间切换也非常快捷方便；</p><p>本文主要介绍了git分支的创建和删除，以及 push、pull、merge等基本操作</p><a id="more"></a><h2 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h2><p>首先我们得知道， GIT分支包括本地分支 与 远程分支。</p><p>有时远程有的分支我们本地没有（其他同事维护的分支）， 或者本地有的分支远程没有（修复线上小问题开的本地小分支）；</p><ul><li>创建本地分支（有2种方法）</li></ul><p>新分支都是基于原有分支创建， 而在实践开发中基本从线上分支（与线上代码同步的分支）master 分支创建。而 从master创建本地分支也有两种方式：</p><ol><li><p><code>基于【本地master分支】创建本地分支</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git branch <span class="comment"># 查看本地分支</span></span><br><span class="line">git branch xxx <span class="comment"># 基于当前分支创建某分支</span></span><br><span class="line">git checkout xxx <span class="comment"># 切换某分支</span></span><br><span class="line">git checkout -b newBranchName <span class="comment"># 创建并切换到新分支（可以基于xxx分支创建新分支）</span></span><br><span class="line">如：</span><br><span class="line">git checkout master <span class="comment"># 切换到本地master分支</span></span><br><span class="line">git pull   <span class="comment"># 更新本地master分支的代码至最新</span></span><br><span class="line">git pull origin master  <span class="comment"># 如 本地master分支未关联远程master分支</span></span><br></pre></td></tr></table></figure></li><li><p><code>基于【远程master分支】创建本地分支</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git branch -a  <span class="comment"># 查看线上分支和本地分支信息  白色表示为本地分支 绿色为当前分支 红色表示线上分支</span></span><br><span class="line">git checkout remotes/origin/master <span class="comment"># 切换到远程分支</span></span><br><span class="line">git checkout -b newBranchName  <span class="comment"># 基于远程master分支创建新分支</span></span><br></pre></td></tr></table></figure></li></ol><ul><li>创建远程分支</li></ul><p>创建远程分支可以直接由本地新分支推送完成也可以在远程分支管理系统（例如：github 、gitLab）上可视化操作完成。</p><ol><li>本地新分支推送创建远程分支</li></ol><p>如果本地创建的分支上上更新了代码，然后执行git add、git commit指令后， 再执行以下指令可在远程创建新分支；<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin newBranch:newBranch <span class="comment"># git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</span></span><br></pre></td></tr></table></figure></p><ol start="2"><li>GitHub上创建远程分支</li></ol><p>选中项目， 然后在项目首页左上侧点选分支按钮， 弹出的弹层输入新分支名称即可；</p><p>PS: 上述创建的<code>同名本地分支跟远程分支</code>并没建立关联， 这样操作指令会比较不方便（如“git pull”指令得输入对应的远程分支名）， 怎么让其建立关联？<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git checkout newBranchName <span class="comment"># 切换到newBranchName分支(如当前处在其他分支)</span></span><br><span class="line">git pull <span class="comment"># 执行更新代码指令</span></span><br><span class="line"><span class="comment"># 执行git pull 就能看到git 的关联提示：</span></span><br><span class="line"><span class="comment"># 按照其提示提示执行指令即可：</span></span><br><span class="line"><span class="comment"># git branch --set-upstream-to=origin/&lt;远程分支名&gt; &lt;本地分支名&gt;如设置当前分支，第二个参数可省略,；</span></span><br><span class="line">git branch --<span class="built_in">set</span>-upstream-to=origin/newBranchName </span><br><span class="line"><span class="comment"># 校验是否关联成功：</span></span><br><span class="line">git pull <span class="comment"># 提示 “Already up-to-date.” 表示已关联成功；</span></span><br></pre></td></tr></table></figure></p><h2 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h2><p>分支代码合并也有两方式： 合并本地分支代码、合并远程分支代码；</p><ul><li>合并本地分支代码: </li></ul><p>例如在新分支 newBranch开发的功能已完成并已提交；接下来走测试流程需要将代码合并到develop分支（我所在团队develop为测试分支，不同团队的测试分支会不一样）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git checkout newBranch <span class="comment"># 首先切换到本地分支</span></span><br><span class="line">git pull <span class="comment"># 然后更新代码</span></span><br><span class="line">git checkout develop <span class="comment"># 再次切换到develop分支</span></span><br><span class="line">git merge newBranch  <span class="comment"># 最后才能执行合并操作</span></span><br><span class="line">git push  <span class="comment"># 提交commit到远程（newBranch分支有多少个commit就会生成几个）</span></span><br></pre></td></tr></table></figure></p><p>其实可直接将远程的 newBranch分支代码合并到本地 develop分支：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin newBranch</span><br></pre></td></tr></table></figure></p><ul><li>合并代码冲突解决</li></ul><p>无论哪种方式合并分支代码代码冲突是无可避免的情况， 开发流程使用了typescript/sass等需要执行编译的语言更容易产生冲突；<br>分支合并代码冲突跟一般代码冲突一样： git能处理的冲突会自动解决， 否则就得手动解决冲突；冲突是由于多人维护代码导致，一定要找到相关人一起讨论冲突代码的取舍；</p><h2 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h2><p>上线流程完成：应删除本地分支及远程分支(git lab分支)： git branch -D xxxx， 上线完成意味着当前xxx分支代码已经合并到线上分支（master）以及开发分支(develop)， 该分支后续功能的改动（bug修复或代码扩展）完全可以在master新开分支完成；（否则可能遗忘删除，导致远程分支原来越多）</p><ul><li>删除本地分支</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch -d xxxx <span class="comment"># 如果该分支代码未合并到其他分支，将无法删除</span></span><br><span class="line">git branch -D xxxx <span class="comment"># 强制删除分支，不会出现任何提示</span></span><br></pre></td></tr></table></figure><ul><li>删除远程分支<br>删除远程分支两种方式：</li></ul><p>1.在git管理系统的Web页面操作（gitLab）；<br>gitHub上无法删除远程分支， 如果你团队使用的是gitLab那可以在gitLab管理页面操作；</p><p>2.本地指令完成；<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin --delete newBranch</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>weex + vue 开发native app 中遇到的问题</title>
      <link href="/2019/09/09/weex%20%E5%BC%80%E5%8F%91%20android%20app%20%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9A%84%E9%87%87%E5%9D%91%E7%BB%8F%E5%8E%86/"/>
      <url>/2019/09/09/weex%20%E5%BC%80%E5%8F%91%20android%20app%20%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9A%84%E9%87%87%E5%9D%91%E7%BB%8F%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<p>weex + vue 开发native app 中遇到的问题</p><a id="more"></a><ol><li>image 组件不显示内容的问题：</li></ol><ul><li>必须设置宽和高</li><li>必须输入正确的src资源路径</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> weex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用git 操作工作空间的基本文件</title>
      <link href="/2019/09/09/git%E5%A2%9E%E5%8A%A0%E5%88%A0%E9%99%A4%E6%8F%90%E4%BA%A4%E5%92%8C%E5%8F%91%E5%B8%83%E7%AD%89%E5%9F%BA%E6%9C%AC%E6%8C%87%E4%BB%A4%E7%9A%84%E7%94%A8%E6%B3%95/"/>
      <url>/2019/09/09/git%E5%A2%9E%E5%8A%A0%E5%88%A0%E9%99%A4%E6%8F%90%E4%BA%A4%E5%92%8C%E5%8F%91%E5%B8%83%E7%AD%89%E5%9F%BA%E6%9C%AC%E6%8C%87%E4%BB%A4%E7%9A%84%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>使用git 操作工作空间的基本文件<br><a id="more"></a></p><h2 id="本地新建目录和文件并提交远程仓库"><a href="#本地新建目录和文件并提交远程仓库" class="headerlink" title="本地新建目录和文件并提交远程仓库"></a>本地新建目录和文件并提交远程仓库</h2><p>本地新建的目录和文件需要提交远程仓库，供开发人员共享<br>操作步骤：</p><ul><li><p>查看目前代码的修改状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line">new file <span class="comment"># 表示新建文件</span></span><br><span class="line">modified <span class="comment"># 表示修改文件</span></span><br><span class="line">deleted  <span class="comment"># 表示删除文件</span></span><br></pre></td></tr></table></figure></li><li><p>查看代码修改的内容</p><blockquote><p>git diff \<file></file></p></blockquote></li></ul><p>比较某文件与最近提交节点的差异。</p><p><code>注意:</code>如果该文件已暂存，那么应该使用</p><blockquote><p>git diff –cached git diff    </p></blockquote><p>比较某文件在提交节点a，节点b的差异。</p><p>技巧：如果省略后面一个hashcode，则默认表示与上一提交节点比较。（也可以利用^运算符）</p><ul><li>暂存需要提交的文件</li></ul><p>如果是新建的文件,则用以下指令:</p><blockquote><p>git add \<file> -a</file></p></blockquote><p>如果是删除的文件，则用以下指令:</p><blockquote><p>git rm</p></blockquote><p>如果忽略某些文件,怎需要在git版本库同级目录下，新建<code>.gitignore</code>文件，但在创建并编辑这个文件之前，一定要保证要忽略的文件没有添加到git索引中。使用命令将要忽略的文件从索引中删除。</p><blockquote><p>git rm –cached filename</p></blockquote><ul><li>提交已暂存的文件<blockquote><p>git commit -m ‘message’</p></blockquote></li></ul><p>git commit 主要是将<code>暂存区里</code>的改动给提交到<code>本地版本库</code>。每次使用git commit 命令我们都会在本地版本库生成一个40位的哈希值，这个哈希值也叫commit-id，commit-id在版本回退的时候是非常有用的，它相当于一个快照,可以在未来的任何时候通过与<code>git reset</code>的组合命令回到这里。</p><ul><li>同步到服务器<br>同步到服务器前先需要将服务器代码同步到本地<blockquote><p>git pull</p></blockquote></li></ul><p>如果执行失败，就按照提示还原有冲突的文件，然后再次尝试同步。</p><blockquote><p>git checkout – &lt;有冲突的文件路径&gt;</p></blockquote><p>push到远程服务器</p><blockquote><p>git push origin  &lt;本地分支名&gt;</p></blockquote><p>如果执行失败，一般是没有将服务器代码同步到本地导致的，先执行上面的git pull命令。</p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 import 和 export 实现模块化</title>
      <link href="/2019/09/09/%E4%BD%BF%E7%94%A8export%E5%92%8Cimport%E4%BA%8B%E9%A1%B9%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
      <url>/2019/09/09/%E4%BD%BF%E7%94%A8export%E5%92%8Cimport%E4%BA%8B%E9%A1%B9%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>在es6 之前，前端是使用RequireJS或者seaJS实现模块化，RequireJS是基于AMD规范的模块化库，而像seaJS是基于CMD规范的模块化库，两者都是推进前端模块化的工具。</p><a id="more"></a><p>现在es6自带了模块化，也是js第一次支持module。</p><p>现代浏览器对模块支持程度不同，目前都是使用babelJS、或者Traceur转化为兼容es5版本的js代码。</p><h2 id="es6-模块化的基本规则或特点"><a href="#es6-模块化的基本规则或特点" class="headerlink" title="es6 模块化的基本规则或特点"></a>es6 模块化的基本规则或特点</h2><ol><li>每个模块只加载一次，每一个JS只执行一次，如果下次再去加载同目录下同文件，直接从内存中读取。一个模块就是一个单例，或者说就是一个对象；</li><li>每一给模块内部声明的变量都是局部变量，不会污染全局作用域；</li><li>模块内部的变量或者函数可以通过export导出；</li><li>一个模块可以导入别的模块；</li></ol><h3 id="下面列出几种常用的import和import的基本语法"><a href="#下面列出几种常用的import和import的基本语法" class="headerlink" title="下面列出几种常用的import和import的基本语法"></a>下面列出几种常用的import和import的基本语法</h3><ul><li><p>第一种导出方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lib.js file</span></span><br><span class="line"><span class="keyword">let</span> bar = <span class="string">'StringBar'</span>;</span><br><span class="line"><span class="keyword">let</span> foo = <span class="string">'StringFoo'</span>;</span><br><span class="line"><span class="keyword">let</span> fn0 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'fn0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> fn1 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'fn1'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123;bar, foo, fn0, fn1&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;bar, foo, fn0, fn1&#125; <span class="keyword">from</span> <span class="string">'./lib'</span> <span class="comment">// 经过结构赋值了</span></span><br><span class="line"><span class="built_in">console</span>.log(bar+ <span class="string">'_'</span> + foo)  <span class="comment">// StringBar_StringFoo</span></span><br><span class="line">fn0();  <span class="comment">// fn0</span></span><br><span class="line">fn1();  <span class="comment">// fn1</span></span><br></pre></td></tr></table></figure></li><li><p>第二种导出方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lib.js file</span></span><br><span class="line"><span class="keyword">let</span> obj0 = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> fn0 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'fn0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123; fn0 <span class="keyword">as</span> foo, obj0 <span class="keyword">as</span> bar&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js file</span></span><br><span class="line"><span class="keyword">import</span> &#123;foo, bar&#125; <span class="keyword">from</span> <span class="string">'./lib.js'</span></span><br><span class="line">foo(); <span class="comment">// fn0</span></span><br><span class="line"><span class="built_in">console</span>.log(bar); <span class="comment">// &#123;&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>第三种导出的方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lib.js file</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> foo = <span class="function"><span class="params">()</span> =&gt;</span> &#123;<span class="built_in">console</span>.log(<span class="string">'fnFoo'</span>)</span><br><span class="line">;<span class="keyword">return</span> <span class="string">'foo'</span>;&#125;, bar = <span class="string">'stringbar'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;foo, bar&#125; <span class="keyword">from</span> <span class="string">'lib.js'</span></span><br><span class="line"><span class="built_in">console</span>.log(foo()) <span class="comment">// fnFoo</span></span><br><span class="line"><span class="built_in">console</span>.log(bar) <span class="comment">// stringbar</span></span><br></pre></td></tr></table></figure></li><li><p>第四种导出的方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lib.js file</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">fn0</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'fn0'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> defult &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> o, &#123;fn0&#125; <span class="keyword">from</span> <span class="string">'lib.js'</span></span><br><span class="line"><span class="built_in">console</span>.log(o) <span class="comment">// &#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(fn0()) <span class="comment">// fn0</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> es6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习前端可以从这里出发</title>
      <link href="/2019/09/09/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%BA%90%E9%93%BE%E8%B7%AF/"/>
      <url>/2019/09/09/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%BA%90%E9%93%BE%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<p>互联网时代，资源共享，各社区生态繁荣，媛（猿）们更是殚精竭虑、乐此不疲的分享着自己的智慧与创新。那么，问题来了：如山如海的网络资源，想入前端坑，路在何方？</p><a id="more"></a><h2 id="声明：完全是自己的学习经验哈"><a href="#声明：完全是自己的学习经验哈" class="headerlink" title="声明：完全是自己的学习经验哈"></a>声明：完全是自己的学习经验哈</h2><p>如果有需要,欢迎email砸（<a href="mailto:978189365@qq.com" target="_blank" rel="noopener">978189365@qq.com</a>）</p><h2 id="如果你是前端小白，前端三剑客（html、css、JavaScript）是必须要懂滴。"><a href="#如果你是前端小白，前端三剑客（html、css、JavaScript）是必须要懂滴。" class="headerlink" title="如果你是前端小白，前端三剑客（html、css、JavaScript）是必须要懂滴。"></a>如果你是前端小白，前端三剑客（html、css、JavaScript）是必须要懂滴。</h2><p><strong>菜鸟教程</strong>是完全免费的资源网站，里面各种编程语言基本都能找到，<em><code>从前端到后端再到数据库</code></em>，若君真心并且下定决心想加入程序员的大阵营，我相信总能找到符合你胃口的萝卜青菜~~</p><blockquote><p><a href="http://www.runoob.com/" target="_blank" rel="noopener">菜鸟教程</a></p></blockquote><p><strong>w3school</strong>领先的 Web 技术教程 - 全部免费，从基础的 HTML 到 CSS，乃至进阶的 XML、SQL、JS、PHP 和 ASP.NET。</p><blockquote><p><a href="http://www.w3school.com.cn/index.html" target="_blank" rel="noopener">w3school 在线教程</a></p></blockquote><p><strong>w3cschool</strong></p><blockquote><p><a href="https://www.w3cschool.cn/" target="_blank" rel="noopener">w3cschool</a></p></blockquote><p>打开以上链接，按照官网教程，一个demo,一个demo 去体验吧</p><p><strong>手册网</strong> 最近发现的一个很牛逼的网站 时间：<code>20190313160430</code></p><blockquote><p><a href="http://www.shouce.ren" target="_blank" rel="noopener">手册网</a></p></blockquote><p>视频资源网站</p><p><strong>慕课网</strong>，此网站基础部分一般都是免费的，而且大多数老师都是在一线互联网公司任职的具有一定项目开发经验的大神在讲课，可以跟着老师一步一步去实现教程中的效果，如果遇到自己迈不过的坑可以在视频下方区域提问，有的老师是公开源码的，可以下载，然后一步步去分析，总之，万事开头难是实话，遇到问题不要惊慌（先去百度或者google），不能解决可以去联系源码贡献者。</p><blockquote><p><a href="https://www.imooc.com/" target="_blank" rel="noopener">慕课网-程序员的梦工厂</a></p></blockquote><p><strong>极客学院</strong>是IT在线教育平台-中国专业的IT职业在线教育平台（IT线上培训网站，所以多数视频是收费的）</p><blockquote><p><a href="http://www.jikexueyuan.com/" target="_blank" rel="noopener">极客学院</a></p></blockquote><p><em>nodejs</em>，如果你学会了<code>javascript</code>, nodejs 一定不要错过，如果学会了nodejs，那么恭喜你，你离全栈工程师不远啦</p><blockquote><p><a href="https://nodejs.org/en/" target="_blank" rel="noopener">nodejs</a>，这是官网，学习教程，在菜鸟和慕课上都有，请自行去找</p></blockquote><p>JavaScript框架，是必须要会用的，目前比较火的是react、vue和angular<br>学习教程当属官网是首选、菜鸟、慕课、极客等</p><blockquote><p><a href="https://reactjs.org/" target="_blank" rel="noopener">react</a><br><a href="https://cn.vuejs.org/" target="_blank" rel="noopener">vue</a><br><a href="https://angular.io/" target="_blank" rel="noopener">angular</a></p></blockquote><p><strong>开源中国</strong>-找到您想要的开源项目，分享和交流(可以拿到一个完整项目的源码，适用于综合练习，这个跟生产中的实际项目源码很接近，建议多分析，增加项目经验，通过阅读别人的代码来自我提升)</p><blockquote><p><a href="https://www.oschina.net/" target="_blank" rel="noopener">开源中国</a></p></blockquote><p><em>github</em>是一个面向开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名gitHub。所以先得学会git(分发式版本控制工具)。git的学习教程可以看<a href="https://www.liaoxuefeng.com/" target="_blank" rel="noopener">廖雪峰</a>的个人官网</p><blockquote><p><a href="https://github.com/" target="_blank" rel="noopener">github</a></p></blockquote><p>国外网站，由于天朝原因，访问这样的网站，一般得有翻墙，不然网速真的比蜗牛还慢（虽然不知蜗牛到底有多慢），这里能搜到来自全世界的和你一样的编程爱好者的开源代码，如果你英语还可以，经常逛国外的技术网站是个不错的选择。</p><h2 id="接下来列举几个比较好的个人网站（博客）和-研发团队"><a href="#接下来列举几个比较好的个人网站（博客）和-研发团队" class="headerlink" title="接下来列举几个比较好的个人网站（博客）和 研发团队"></a>接下来列举几个比较好的个人网站（博客）和 研发团队</h2><ul><li><a href="http://www.ruanyifeng.com/home.html" target="_blank" rel="noopener">阮一峰的个人网站</a></li><li><a href="https://www.zhangxinxu.com/" target="_blank" rel="noopener">张鑫旭的个人主页</a></li><li><a href="https://www.h5jun.com/" target="_blank" rel="noopener">十年踪迹的博客</a></li><li><a href="http://www.alloyteam.com/" target="_blank" rel="noopener">腾讯全端AlloyTeam团队</a></li><li><a href="https://aotu.io/" target="_blank" rel="noopener">aotu 实验室</a></li><li><a href="http://www.aliued.cn/" target="_blank" rel="noopener">阿里巴巴</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数字证书安装</title>
      <link href="/2019/09/09/%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6%E5%AE%89%E8%A3%85/"/>
      <url>/2019/09/09/%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>4种主流服务器使用https时，在服务器端安装数字证书（ssl）</p><a id="more"></a><h2 id="Apache服务器安装SSL证书"><a href="#Apache服务器安装SSL证书" class="headerlink" title="Apache服务器安装SSL证书"></a>Apache服务器安装SSL证书</h2><p>在证书控制台下载Apache版本证书，下载到本地的是一个压缩文件，解压后里面包含_public.crt文件是证书文件，_chain.crt是证书链(中间证书)文件，.key文件是证书的私钥文件（申请证书时如果没有选择系统创建CSR，则没有该文件）。</p><p>友情提示： .crt扩展名的证书文件采用Base64-encoded的PEM格式文本文件，可根据需要，修改成.pem等扩展名。</p><p>以Apache标准配置为例，假如证书文件名是a_public.crt，证书链文件是a_chain.crt,私钥文件是a.key。</p><p>操作步骤:</p><ol><li><p>在Apache的安装目录下创建cert目录，并且将下载的全部文件拷贝到cert目录中。如果申请证书时是自己创建的CSR文件，请将对应的私钥文件放到cert目录下并且命名为a.key；</p></li><li><p>打开 apache 安装目录下 conf 目录中的 httpd.conf 文件，找到以下内容并去掉“#”。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#LoadModule ssl_module modules/mod_ssl.so (如果找不到请确认是否编译过 openssl 插件)</span></span><br><span class="line"><span class="comment">#Include conf/extra/httpd-ssl.conf（删除行首的配置语句注释符号“#”，保存后退出）</span></span><br></pre></td></tr></table></figure></li><li><p>打开 apache 安装目录下 conf/extra/httpd-ssl.conf 文件 (也可能是conf.d/ssl.conf，与操作系统及安装方式有关)， 在配置文件中查找以下配置语句:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加 SSL 协议支持协议，去掉不安全的协议</span></span><br><span class="line">SSLProtocol all -SSLv2 -SSLv3</span><br><span class="line"><span class="comment"># 修改加密套件如下</span></span><br><span class="line">SSLCipherSuite HIGH:!RC4:!MD5:!aNULL:!eNULL:!NULL:!DH:!EDH:!EXP:+MEDIUM</span><br><span class="line">SSLHonorCipherOrder on</span><br><span class="line"><span class="comment"># 证书公钥配置</span></span><br><span class="line">SSLCertificateFile cert/a_public.crt</span><br><span class="line"><span class="comment"># 证书私钥配置</span></span><br><span class="line">SSLCertificateKeyFile cert/a.key</span><br><span class="line"><span class="comment"># 证书链配置，如果该属性开头有 '#'字符，请删除掉</span></span><br><span class="line">SSLCertificateChainFile cert/a_chain.crt</span><br></pre></td></tr></table></figure></li><li><p>重启 Apache。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apachectl -k stop</span><br><span class="line">apachectl -k start</span><br></pre></td></tr></table></figure></li></ol><h2 id="Nginx-Tengine服务器安装SSL证书"><a href="#Nginx-Tengine服务器安装SSL证书" class="headerlink" title="Nginx/Tengine服务器安装SSL证书"></a>Nginx/Tengine服务器安装SSL证书</h2><p>2018年11月30日 00:17:13</p><ol><li>在证书控制台(可以在阿里云控制台购买或者获取免费的)下载Nginx版本证书。下载到本地的压缩文件包解压后包含：</li></ol><p>.crt文件：是证书文件，crt是pem文件的扩展名。<br>.key文件：证书的私钥文件（申请证书时如果没有选择自动创建CSR，则没有该文件）。<br>友情提示： .pem扩展名的证书文件采用Base64-encoded的PEM格式文本文件，可根据需要修改扩展名。</p><p>以Nginx标准配置为例，假如证书文件名是a.pem，私钥文件是a.key。</p><p>在Nginx的安装目录下创建cert目录，并且将下载的全部文件拷贝到cert目录中。如果申请证书时是自己创建的CSR文件，请将对应的私钥文件放到cert目录下并且命名为a.key；</p><ol start="2"><li><p>打开 Nginx 安装目录下 conf 目录中的 nginx.conf 文件，找到：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># HTTPS server</span></span><br><span class="line"><span class="comment"># #server &#123;</span></span><br><span class="line"><span class="comment"># listen 443;</span></span><br><span class="line"><span class="comment"># server_name localhost;</span></span><br><span class="line"><span class="comment"># ssl on;</span></span><br><span class="line"><span class="comment"># ssl_certificate cert.pem;</span></span><br><span class="line"><span class="comment"># ssl_certificate_key cert.key;</span></span><br><span class="line"><span class="comment"># ssl_session_timeout 5m;</span></span><br><span class="line"><span class="comment"># ssl_protocols SSLv2 SSLv3 TLSv1;</span></span><br><span class="line"><span class="comment"># ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;</span></span><br><span class="line"><span class="comment"># ssl_prefer_server_ciphers on;</span></span><br><span class="line"><span class="comment"># location / &#123;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#&#125;</span></span><br><span class="line"><span class="comment">#&#125;</span></span><br></pre></td></tr></table></figure></li></ol><p>将其修改为 (以下属性中ssl开头的属性与证书配置有直接关系，其它属性请结合自己的实际情况复制或调整) :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line"> listen 443;</span><br><span class="line"> server_name localhost;</span><br><span class="line"> ssl on;</span><br><span class="line"> root html;</span><br><span class="line"> index index.html index.htm;</span><br><span class="line"> ssl_certificate   cert/a.pem;</span><br><span class="line"> ssl_certificate_key  cert/a.key;</span><br><span class="line"> ssl_session_timeout 5m;</span><br><span class="line"> ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line"> ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line"> ssl_prefer_server_ciphers on;</span><br><span class="line"> location / &#123;</span><br><span class="line">     root html;</span><br><span class="line">     index index.html index.htm;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>保存退出。</li><li>重启 Nginx。</li></ol><h2 id="Tomcat服务器安装SSL证书"><a href="#Tomcat服务器安装SSL证书" class="headerlink" title="Tomcat服务器安装SSL证书"></a>Tomcat服务器安装SSL证书</h2><p>在证书控制台下载Tomcat版本证书，下载到本地的是一个压缩文件，解压后里面包含.pfx文件是证书文件，pfx_password.txt是证书文件的密码。<br>友情提示： 每次下载都会产生新密码，该密码仅匹配本次下载的证书。如果需要更新证书文件，同时也要更新密码。<br>申请证书时如果没有选择系统创建CSR，则没有该文件，请选择其它服务器下载.crt文件，利用openssl命令自己生成pfx证书。</p><ol><li>PFX证书安装<br>以Tomcat7标准配置为例，假如证书文件名是a.pfx。<br>找到安装Tomcat目录下该文件server.xml,一般默认路径都是在 conf 文件夹中。找到 &lt;Connection port=”8443”标签，增加如下属性：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">keystoreFile=<span class="string">"cert/200613478180598.pfx"</span></span><br><span class="line">keystoreType=<span class="string">"PKCS12"</span></span><br><span class="line"><span class="comment">#此处的证书密码，请参考附件中的密码文件或在第1步中设置的密码</span></span><br><span class="line">keystorePass=<span class="string">"证书密码"</span></span><br><span class="line">完整的配置如下，其中port属性根据实际情况修改：</span><br><span class="line"></span><br><span class="line">&lt;Connector port=<span class="string">"8443"</span></span><br><span class="line">    protocol=<span class="string">"HTTP/1.1"</span></span><br><span class="line">    SSLEnabled=<span class="string">"true"</span></span><br><span class="line">    scheme=<span class="string">"https"</span></span><br><span class="line">    secure=<span class="string">"true"</span></span><br><span class="line">    keystoreFile=<span class="string">"cert/a.pfx"</span></span><br><span class="line">    keystoreType=<span class="string">"PKCS12"</span></span><br><span class="line">    keystorePass=<span class="string">"证书密码"</span></span><br><span class="line">    clientAuth=<span class="string">"false"</span></span><br><span class="line">    SSLProtocol=<span class="string">"TLSv1+TLSv1.1+TLSv1.2"</span></span><br><span class="line">    ciphers=<span class="string">"TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA256"</span>/&gt;</span><br></pre></td></tr></table></figure></li></ol><p><code>注意：不同的版本Tomcat，需要替换的属性字段不一定相同，所以只需要给预定的属性赋值即可</code></p><ol start="2"><li>JKS证书安装<br>( 1 ) 使用java jdk将PFX格式证书转换为JKS格式证书(windows环境注意在%JAVA_HOME%/jdk/bin目录下执行)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -importkeystore -srckeystore amanda.pfx -destkeystore amanda.jks -srcstoretype PKCS12 -deststoretype JKS</span><br></pre></td></tr></table></figure></li></ol><p>回车后输入JKS证书密码和PFX证书密码，强烈推荐将JKS密码与PFX证书密码相同，否则可能会导致Tomcat启动失败。</p><p>( 2 ) 找到安装 Tomcat 目录下该文件Server.xml，一般默认路径都是在 conf 文件夹中。找到 &lt;Connection port=”8443”标签，增加如下属性：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">keystoreFile=<span class="string">"cert/a.jks"</span></span><br><span class="line">keystorePass=<span class="string">"证书密码"</span></span><br><span class="line">完整的配置如下，其中port属性根据实际情况修改：</span><br><span class="line">&lt;Connector port=<span class="string">"8443"</span></span><br><span class="line">    protocol=<span class="string">"HTTP/1.1"</span></span><br><span class="line">    SSLEnabled=<span class="string">"true"</span></span><br><span class="line">    scheme=<span class="string">"https"</span></span><br><span class="line">    secure=<span class="string">"true"</span></span><br><span class="line">    keystoreFile=<span class="string">"cert/a.jks"</span></span><br><span class="line">    keystorePass=<span class="string">"证书密码"</span></span><br><span class="line">    clientAuth=<span class="string">"false"</span></span><br><span class="line">    SSLProtocol=<span class="string">"TLSv1+TLSv1.1+TLSv1.2"</span></span><br><span class="line">    ciphers=<span class="string">"TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA256"</span>/&gt;</span><br><span class="line">( 注意:不要直接拷贝所有配置，只需添加 keystoreFile,keystorePass等参数即可，其它参数请根据自己的实际情况修改 )</span><br></pre></td></tr></table></figure></p><ol start="3"><li>重启 Tomcat。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> ssl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown 基本语法</title>
      <link href="/2019/09/09/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
      <url>/2019/09/09/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>前端基本上都用上了前端构建工具，那就难免要写一些readme等等的说明性文件，但是这样的文件一般都是.md的文件，编写的语法自然跟其他格式的文件有所区别，置于为什么要用这种格式的文件，不要问我，我也不知道</p><a id="more"></a><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><p>。。。</p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>无序列表：</p><ul><li>星号 + 空格</li></ul><ul><li>加号 + 空格</li></ul><ul><li>减号 + 空格</li></ul><p>有序列表：</p><ol><li>数字 + 英文的点 + 空格</li><li>注意，数字后面的点只能是英文的点</li><li>序列表的序号是根据第一行列表的数字顺序来的</li></ol><h2 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a>区块引用</h2><ul><li>不以结婚为目的的谈恋爱都叫耍流氓<blockquote><p>这是毛主席说的</p></blockquote></li></ul><h2 id="华丽的分各线"><a href="#华丽的分各线" class="headerlink" title="华丽的分各线"></a>华丽的分各线</h2><hr><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><ol><li>行内式：链接的文字放在[]中，链接地址放在随后的（）中<br>语法：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[妙语连珠](http://www.baidu.com)</span><br></pre></td></tr></table></figure></li></ol><ul><li><a href="http://www.baidu.com" target="_blank" rel="noopener">妙语连珠</a></li><li><a href="http://www.baidu.com" target="_blank" rel="noopener">妙语连珠</a></li></ul><ol start="2"><li>参数式 </li></ol><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>语法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![我是图片](https://github.com/zwwill/yanxuan-weex-demo/raw/master/banner.png)</span><br></pre></td></tr></table></figure></p><p><img src="https://github.com/zwwill/yanxuan-weex-demo/raw/master/banner.png" alt="我是图片"></p><h2 id="代码框"><a href="#代码框" class="headerlink" title="代码框"></a>代码框</h2><p>如果代码量比较少，只有单行的话，可以用单反引号包起来<br>多行用三个反引号，如果要写注释，可以在反引号后面写</p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>语法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">学号|姓名|分数</span><br><span class="line">   -|-|-</span><br><span class="line">   小明|男|25</span><br><span class="line">   小红|女|20</span><br></pre></td></tr></table></figure></p><table><thead><tr><th>学号</th><th>姓名</th><th>分数</th></tr></thead><tbody><tr><td>小明</td><td>男</td><td>25</td></tr><tr><td>小红</td><td>女</td><td>20</td></tr></tbody></table><h2 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h2><p><em>重要指示</em></p><h2 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h2><ul><li>\</li><li>\’</li></ul><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p><del>请删掉我吧</del></p>]]></content>
      
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jquery插件系列之轮播图</title>
      <link href="/2019/09/09/%E5%9F%BA%E4%BA%8Ejquery%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91%E8%BD%AE%E6%92%AD%E5%9B%BE%E6%8F%92%E4%BB%B6/"/>
      <url>/2019/09/09/%E5%9F%BA%E4%BA%8Ejquery%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91%E8%BD%AE%E6%92%AD%E5%9B%BE%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>基于js函数库（jquery）开发轮播图插件</p><a id="more"></a><h3 id="如果你熟悉以下基本知识，阅读起来可能会更好"><a href="#如果你熟悉以下基本知识，阅读起来可能会更好" class="headerlink" title="如果你熟悉以下基本知识，阅读起来可能会更好"></a>如果你熟悉以下基本知识，阅读起来可能会更好</h3><ul><li>有一定的前端开发基础（熟悉html、css、js）</li><li>有基于jquery再次开发插件的经验<br>项目目录结构<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/ <span class="comment"># 项目根目录 （本实例是 slider-by-jquery)</span></span><br><span class="line">---lib</span><br><span class="line">------jquery.js <span class="comment"># jquery-v3.3.1 库</span></span><br><span class="line">---js</span><br><span class="line">------slider.js  <span class="comment"># 轮播图构造器</span></span><br><span class="line">---css</span><br><span class="line">------slider.css <span class="comment"># 主要样式</span></span><br><span class="line">----images</span><br><span class="line">------... <span class="comment"># 轮播图片资源</span></span><br><span class="line">---index.html    <span class="comment"># 项目入口文件</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="实例代码（index-html）"><a href="#实例代码（index-html）" class="headerlink" title="实例代码（index.html）"></a>实例代码（index.html）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>jQuery轮播图插件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./css/slider.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"slider"</span>  <span class="attr">style</span>=<span class="string">"margin:50px auto"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/slider.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> images = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">15</span>); <span class="comment">// 轮播图片容器</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> path = <span class="string">'./images/'</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> imgType = <span class="string">'.jpg'</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; images.length; i++) &#123;</span></span><br><span class="line">            images[i] = path + (i + 1) + imgType;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        $(<span class="string">'#slider'</span>).sliderImg(images);</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://github.com/hongtanhao/slider-by-jquery" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/项目源码-https://github.com/hongtanhao/-green.svg?colorA=888&amp;colorB=52A1F8&amp;longCache=true&amp;style=popout-square" alt></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript, jquery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue 在weex 中的不同</title>
      <link href="/2019/09/09/vue%20%E5%9C%A8%20weex%20%E4%B8%AD%E7%9A%84%E4%B8%8D%E5%90%8C/"/>
      <url>/2019/09/09/vue%20%E5%9C%A8%20weex%20%E4%B8%AD%E7%9A%84%E4%B8%8D%E5%90%8C/</url>
      
        <content type="html"><![CDATA[<p>vue在weex中的不同</p><a id="more"></a><h2 id="语法差异"><a href="#语法差异" class="headerlink" title="语法差异"></a>语法差异</h2><hr><p>1、“html标签”<br>目前Weex支持了基本容器（div）、文本（text）、图片（image）、视频（video）等<strong>组件</strong>，注意是组件，不是标签，虽然使用起来和html标签很像，至于其他标签基本可以使用以上组件组合而成。</p><p>2、 Weex环境中没有DOM<br>因为Wexx解析vue 得到的并不是dom,而是原生布局树。</p><p>3、支持有限的事件<br>并不支持 Web 中所有的事件类型，详情请参考《通用事件》</p><p>4、没有BOM 但可以调用原生API<br>在 Weex 中能够调用移动设备原生 API，使用方法是通过注册、调用模块来实现。其中有一些模块是 Weex 内置的，如 clipboard 、 navigator 、storage 等。<br>《clipboard 剪切板》<br>《navigator 导航控制》<br>《storage 本地存储 》</p><p>为了保持框架的通用性，Weex 内置的原生模块有限，不过 Weex 提供了横向扩展的能力，可以扩展原生模块，具体的扩展方法请参考《iOS 扩展》 和《Android 扩展》。</p><h2 id="样式差异"><a href="#样式差异" class="headerlink" title="样式差异"></a>样式差异</h2><hr><p>Weex 中的样式是由原生渲染器解析的，出于性能和复杂度的考虑，Weex对css的特性做了一些取舍</p><p>1、Weex 中只支持单个类名选择器，不支持关系选择器，也不支持属性选择器。</p><p>2、组件级别的作用域，为了保持web和native的一致性，需要<code>&lt;style scoped&gt;</code> 写法。</p><p>3、支持了基本的盒模型和flexbox布局，详情可参考Weex通用样式文档，但是需要注意的是：</p><ul><li>不支持display：none；可用opacity：0；（opacity &lt;= 0.01时，元素可点透）</li><li>样式属性暂不支持简写（提高解析效率）</li><li>flex布局需要web的兼容性</li><li>css 不支持3D变换</li></ul><h2 id="Vue-语法"><a href="#Vue-语法" class="headerlink" title="Vue 语法"></a>Vue 语法</h2><hr><p>举个例子，以下是严选App Demo 首页的简化代码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"iconfont"</span>&gt;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">home-header</span>&gt;</span><span class="tag">&lt;/<span class="name">home-header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scroller</span> <span class="attr">class</span>=<span class="string">"main-list"</span> <span class="attr">offset-accuracy</span>=<span class="string">"300px"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">refresher</span>&gt;</span><span class="tag">&lt;/<span class="name">refresher</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cell-button"</span> @<span class="attr">click</span>=<span class="string">"jumpWeb('https://m.you.163.com')"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">yx-slider</span> <span class="attr">:imageList</span>=<span class="string">"YXBanners"</span> &gt;</span><span class="tag">&lt;/<span class="name">yx-slider</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cell-button"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">block-1</span> <span class="attr">:title</span>=<span class="string">"block1.title"</span> <span class="attr">:items</span>=<span class="string">"block1.items"</span>&gt;</span><span class="tag">&lt;/<span class="name">block-1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">scroller</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.iconfont</span> &#123;  <span class="attribute">font-family</span>:iconfont;  &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.main-list</span>&#123; <span class="attribute">position</span>: fixed; <span class="attribute">top</span>: <span class="number">168px</span>; <span class="attribute">bottom</span>: <span class="number">90px</span>; <span class="attribute">left</span>: <span class="number">0</span>; <span class="attribute">right</span>: <span class="number">0</span>;  &#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> navigator = weex.requireModule(<span class="string">'navigator'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">import</span> util <span class="keyword">from</span> <span class="string">'../../src/assets/util'</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">'../components/Header.vue'</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">import</span> refresher <span class="keyword">from</span> <span class="string">'../components/refresh.vue'</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">import</span> YXSlider <span class="keyword">from</span> <span class="string">'../components/YXSlider.vue'</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">import</span> Block1 <span class="keyword">from</span> <span class="string">'../components/Block1.vue'</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">        components: &#123;</span><br><span class="line"><span class="actionscript">            <span class="string">'home-header'</span>: Header,</span></span><br><span class="line"><span class="actionscript">            <span class="string">'refresher'</span>: refresher,</span></span><br><span class="line"><span class="actionscript">            <span class="string">'yx-slider'</span>: YXSlider,</span></span><br><span class="line"><span class="actionscript">            <span class="string">'block-1'</span>: Block1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        data () &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line">                YXBanners: [</span><br><span class="line"><span class="actionscript">                    &#123; title: <span class="string">''</span>, src: <span class="string">'http://doc.zwwill.com/yanxuan/imgs/banner-1.jpg'</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                    &#123; title: <span class="string">''</span>, src: <span class="string">'http://doc.zwwill.com/yanxuan/imgs/banner-2.jpg'</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                    &#123; title: <span class="string">''</span>, src: <span class="string">'http://doc.zwwill.com/yanxuan/imgs/banner-3.jpg'</span>&#125;</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            jumpWeb (_url) &#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">const</span> url = <span class="keyword">this</span>.$getConfig().bundleUrl;</span></span><br><span class="line">                navigator.push(&#123;</span><br><span class="line"><span class="actionscript">                    url: util.setBundleUrl(url, <span class="string">'page/web.js?weburl='</span>+_url) ,</span></span><br><span class="line"><span class="actionscript">                    animated: <span class="string">"true"</span></span></span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>Weex 工程中常用的标签有<code>&lt;div /&gt;，&lt;text /&gt;，&lt;image /&gt;，&lt;video /&gt;</code>（组件另算），由此四种标签基本可以满足绝大多数场景的需求，虽说此标签同 web 工程下的标签用法一致，但此处的标签已不再是我们前端口中常提的 html 标签，而且名存实亡的 Weex 标签，确切讲是 Weex 组件。</p><p>通过weex-loader、vue-loader、weex-vue-render的解析最终转换输出的便是实际的组件，有此设计只是为了完成「web开发体验」的目标。但是我们身为上层的开发人员要清楚自己每天「把玩」的到底是个什么「鬼」。</p><h3 id="阉割版css"><a href="#阉割版css" class="headerlink" title="阉割版css"></a>阉割版css</h3><hr><p>其实用阉割版来形容 Weex 的 css 支持度并不合适，但如果从「web开发体验」的角度来衡量，那么这个形容词也是可以理解的。（此处对 Weex 寄有厚望^_^）</p><h3 id="单位"><a href="#单位" class="headerlink" title="单位"></a>单位</h3><hr><p>Weex 中的所有 css 属性值的单位均为 px，也可省略不写，系统会默认为 px 单位。</p><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><hr><p>Weex 中只支持单个类名选择器，不支持关系选择器，也不支持属性选择器。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 支持单个类名选择器 */</span></span><br><span class="line"><span class="selector-class">.one-class</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">36px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 不支持关系选择器 */</span></span><br><span class="line"><span class="selector-class">.parent</span> &gt; <span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 不支持属性选择器，不支持 `v-cloak` 指令 */</span></span><br><span class="line"><span class="selector-attr">[v-cloak]</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#FF6600</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个只是对样式定义的限制，不影响样式类名的使用，在标签中可以添加多个样式类名，如：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one two three"</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h3><hr><p>weex支持css基本的盒模型结构，但需要注意的是</p><ul><li>box-sizing 属性的默认值为 border-box</li><li>margin、padding、border 等属性暂时不支持合并简写</li></ul><h3 id="FlexBox"><a href="#FlexBox" class="headerlink" title="FlexBox"></a>FlexBox</h3><hr><p>Weex 中对 flexbox 布局支持度很高，但依然有部分属性并不支持，如 align-items:baseline;、align-content:space-around;、align-self:wrap_reverse;等。</p><p>具体 Weex 对 flexbox 的支持和布局算法，可通过此文进行了解由 FlexBox 算法强力驱动的 Weex 布局引擎，此处便不再赘述。</p><h3 id="显隐性"><a href="#显隐性" class="headerlink" title="显隐性"></a>显隐性</h3><hr><p>在 Weex 的 ios 和 android 端，并不支持 display 属性。<br>因此，不能使用 display:none; 来控制元素的显隐性，所以 vue 语法中的 v-show 条件渲染是不生效的。<br>我们可以使用 v-if 代替，或者用 opacity:0; 来模拟。<br>需要注意的是，ios和android端并不能使用 opacity:0; 来完全模拟 visibility: hidden;，因为，当<br>opacity 的只小于等于 0.01 时，native 控件便会消失，占位空间还在，但用户无法进行交互操作，点击时会发生点透效果。</p><h3 id="css3"><a href="#css3" class="headerlink" title="css3"></a>css3</h3><hr><p>Weex 支持 css3 属性，虽然支持并不够，但相较 React Native 的「不能用」已经是强大很多了。<br>以下几种属性我们在开发前需要知道她的支持度</p><ul><li>transform: 目前只支持2D转换</li><li>transition: v0.16.0+的sdk版本支持css过度动画，可根据情况配合内组件animation 实现动画交互</li><li>linear-gradient:目前只支持双色变色</li><li>font-family: Weex 目前只支持tff和woff字体格式的自定义字体</li></ul><h3 id="第三方工具库"><a href="#第三方工具库" class="headerlink" title="第三方工具库"></a>第三方工具库</h3><hr><p>由于使用了增强版的 webpak 打包工具 weexpack，支持第三方框架也是件自然而然的事情。<br>常用的有 vuex、vue-router 等，可根据项目实际情况引入需要的第三方工具库</p><h3 id="npm-包管理"><a href="#npm-包管理" class="headerlink" title="npm 包管理"></a>npm 包管理</h3><hr><p>npm 包管理是前端开发朋友们再熟悉不过的包管理方式了。这也是为什么 React Native 和 Weex 都选择这种管理方式的原因。<br>以下是本工程的 package.json 文件，这里就不做讲解了，不熟悉的朋友点这里-&gt;NPM 使用介绍<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"yanxuan-weex"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"a weex project"</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"webpack"</span>,</span><br><span class="line">    <span class="attr">"build_plugin"</span>: <span class="string">"webpack --config ./tools/webpack.config.plugin.js --color"</span>,</span><br><span class="line">    <span class="attr">"dev"</span>: <span class="string">"weex-builder src dist -w"</span>,</span><br><span class="line">    <span class="attr">"serve"</span>: <span class="string">"webpack-dev-server --config webpack.dev.js -p --open"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"keywords"</span>: [<span class="string">"weex"</span>],</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">"zwwill"</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"MIT"</span>,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"vue"</span>: <span class="string">"^2.4.2"</span>,</span><br><span class="line">    <span class="attr">"vue-router"</span>: <span class="string">"^2.7.0"</span>,</span><br><span class="line">    <span class="attr">"vuex"</span>: <span class="string">"^2.1.1"</span>,</span><br><span class="line">    <span class="attr">"vuex-router-sync"</span>: <span class="string">"^4.3.0"</span>,</span><br><span class="line">    <span class="attr">"weex-html5"</span>: <span class="string">"^0.4.1"</span>,</span><br><span class="line">    <span class="attr">"weex-vue-render"</span>: <span class="string">"^0.11.2"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"babel-core"</span>: <span class="string">"^6.21.0"</span>,</span><br><span class="line">    <span class="attr">"babel-loader"</span>: <span class="string">"^6.2.4"</span>,</span><br><span class="line">    <span class="attr">"babel-plugin-add-module-exports"</span>: <span class="string">"^0.2.1"</span>,</span><br><span class="line">    <span class="attr">"babel-plugin-transform-runtime"</span>: <span class="string">"^6.9.0"</span>,</span><br><span class="line">    <span class="attr">"babel-preset-es2015"</span>: <span class="string">"^6.9.0"</span>,</span><br><span class="line">    <span class="attr">"babel-runtime"</span>: <span class="string">"^6.9.2"</span>,</span><br><span class="line">    <span class="attr">"css-loader"</span>: <span class="string">"^0.26.1"</span>,</span><br><span class="line">    <span class="attr">"history"</span>: <span class="string">"^4.7.2"</span>,</span><br><span class="line">    <span class="attr">"quick-local-ip"</span>: <span class="string">"^1.0.7"</span>,</span><br><span class="line">    <span class="attr">"vue-loader"</span>: <span class="string">"^13.0.4"</span>,</span><br><span class="line">    <span class="attr">"vue-template-compiler"</span>: <span class="string">"^2.4.2"</span>,</span><br><span class="line">    <span class="attr">"webpack"</span>: <span class="string">"^2.7.0"</span>,</span><br><span class="line">    <span class="attr">"webpack-dev-server"</span>: <span class="string">"^2.4.2"</span>,</span><br><span class="line">    <span class="attr">"weex-builder"</span>: <span class="string">"^0.2.7"</span>,</span><br><span class="line">    <span class="attr">"weex-loader"</span>: <span class="string">"^0.4.5"</span>,</span><br><span class="line">    <span class="attr">"weex-router"</span>: <span class="string">"0.0.1"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="UI尺寸适配"><a href="#UI尺寸适配" class="headerlink" title="UI尺寸适配"></a>UI尺寸适配</h3><hr><p>Weex 容器默认的显示宽度 (viewport) 是 750px，页面中的所有组件都会以 750px 作为满屏宽度。<br>这很像移动设备的逻辑像，比如 iPhone 6 的物理像素宽为 750，逻辑像素</p>]]></content>
      
      
      
        <tags>
            
            <tag> weex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>App常用开发模式【简介】</title>
      <link href="/2019/09/09/%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81APP%E7%9A%84%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/09/09/%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81APP%E7%9A%84%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>App常用开发模式【简介】</p><a id="more"></a><h2 id="1-ReactNative"><a href="#1-ReactNative" class="headerlink" title="1.ReactNative"></a>1.ReactNative</h2><p>Facebook发现Hybrid App存在很多缺陷和不足，于是发起开源的一套新的App开发方案RN。使用JSX语言写原生界面，js通过JSBridge调用原生API渲染UI交互通信。</p><ul><li>优点：效率体验接近Native App，发布和开发成本低于Native App</li><li>缺点：学习有一定成本，且文档较少，免不了踩坑</li><li>举个栗子：Facebook、Youtube、Discord、QQ、百度等等</li><li>与传统跨平台开发不同，它的目标不是一次编写到处执行，而是一次学习多处开发（一次学习跨平台开发）不同平台上编写基于React的代码</li><li>其中，Android版本代码和iOS版本代码是有差别的，但是由于都是js驱动的开发，相同语法的，所以会编写iOS的同时也会编写Android。</li><li>相比传统跨平台大大提高了性能-既拥有Native的用户体验，又保留React的开打效率。</li><li>原理仍然是依赖原生暴露的借口-通过JSBridge技术，所以仍然会存在原生代码。</li><li>ReactJs和React Native 的原理是相同的，都是由js实现的虚拟dom 来驱动界面view层渲染。只不过ReactJs驱动html dom 渲染；React Native 是驱动Android/ios原生组件渲染。其实在React Native 推出之前，就已经存在这种使用js 驱动app原生组件的技术了，比如Native Script。</li></ul><h2 id="2-Weex"><a href="#2-Weex" class="headerlink" title="2. Weex"></a>2. Weex</h2><p> 阿里巴巴开发团队在RN的成功案例上，重新设计出的一套开发模式，站在了巨人肩膀上并有淘宝团队项目做养料，广受关注，2016年4月正式开源，并在v2.0版本官方支持Vue.js，与RN分庭抗礼。</p><ul><li>优点：单页开发模式效率极高，热更新发包体积小，并且跨平台性更强</li><li>缺点：刚刚起步，文档欠缺；社区没有RN活跃，功能尚不健全，暂不适合完全使用Weex开发App</li><li>举个栗子：淘宝、天猫、阿里云、优酷、闲鱼、饿了么等</li><li>weex 最底层的原理是和React-Native相同的，就是将JS代码渲染成原生组件</li><li>只不过在业务代码层面，Weex和React-Naive 有差别：</li><li>最新版Weex是基于Vue的语法，然后写出来的就是一些特定的H5语法，然后底层引擎再分贝根据web和原生，分别将代码解析成html dom 或者原生组件，所以感觉起来跟写web插件一样。</li><li>而React-Native 则是直接通过JS写原代码，所以对外表现层上，weex只要遵循一定规则就可以一套代码完全跨平台，React-Native 则针对不同平台写不同的代码，虽然大部分代码可以复用</li><li>维护层面上，Weex主要由阿里人员维护，社区方面目前还有点不足，而Reac-Native 目前社区已经比较成熟，期待未来两者各自的发展。`</li></ul><h2 id="3-Native-APP"><a href="#3-Native-APP" class="headerlink" title="3.Native APP"></a>3.Native APP</h2><p>Native App是一种基于智能手机本地操作系统如iOS、Android、WP并使用原生程式编写运行的第三方应用程序,也叫本地app。一般使用的开发语言为Java、C++、Objective-C。</p><ul><li>优点：性能和体验都是最好的</li><li>缺点：开发和发布成本高</li><li>举个栗子：网易管家App （Tab1，Tab2）</li><li>应用技术：Swift，OC，Java</li></ul><h2 id="4-Web-App"><a href="#4-Web-App" class="headerlink" title="4.Web App"></a>4.Web App</h2><p>移动端的网站，常被称为H5应用，说白了就是特定运行在移动端浏览器上的网站应用。一般泛指 SPA(Single Page Application)模式开发出的网站，与MPA（Multi-page Application）对应。</p><ul><li>优点：开发和发布成本最低</li><li>缺点：性能和体验不能讲是最差的，但也受到浏览器处理能力的限制，多次下载同 样会占用用户一定的流量</li><li>举个栗子：网易管家APP（Tab3）</li><li>应用技术：ReactJS，RegularJS，VueJS等等</li></ul><h2 id="Hybrid-App"><a href="#Hybrid-App" class="headerlink" title="Hybrid App"></a>Hybrid App</h2><p>混合模式移动应用，介于Web App、Native App这两者之间的App开发技术，兼具“Native App良好交互体验的优势”和“Web App跨平台开发的优势”（百度百科解释）<br>主要的原理是，由Native通过JSBridge等方法提供统一的API，然后用Html+Css实现界面，JS来写逻辑，调用API，最终的页面在Webview中显示，这种模式下，Android、iOS的API一般有一致性，Hybrid App所以有跨平台效果。</p><ul><li>优点：开发和发布都比较方便，效率介于Native App、Web App之间</li><li>缺点：学习范围较广，需要原生配合</li><li>举个栗子：FanReact，我爱我家App，东方航空App，富国基金-富国钱包App</li><li>应用技术：PhoneGap，AppCan，Wex5，APICloud等</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> weex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基础语法</title>
      <link href="/2019/09/09/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>/2019/09/09/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>java基础语法</p><a id="more"></a><ol><li>Java中的数据类型（Java 语言是一种强类型语言。通俗点说就是，在 Java 中存储的数据都是有类型的，而且必须在编译时就确定其类型）</li></ol><ul><li>基本类型：byte、int、long、short、float、double、char、boolean</li><li>引用类型：class、interface、array<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataTyepe</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String  name=<span class="string">"爱慕课"</span>;</span><br><span class="line">        <span class="keyword">char</span>  sex=<span class="string">'男'</span>;</span><br><span class="line">        <span class="keyword">int</span>  num=<span class="number">18</span>;</span><br><span class="line">        <span class="keyword">double</span> price=<span class="number">120.5</span>;</span><br><span class="line">        Boolean isOK=<span class="keyword">true</span>;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        System.out.println(sex);</span><br><span class="line">        System.out.println(num);</span><br><span class="line">        System.out.println(price);</span><br><span class="line">        System.out.println(isOK);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 注：String 和 char有区别，float和double有区别</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>当面试官问你如何进行性能优化时，你该怎么回答？</title>
      <link href="/2019/09/09/%E7%BD%91%E7%AB%99%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
      <url>/2019/09/09/%E7%BD%91%E7%AB%99%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>当面试官问你如何进行性能优化时，你该怎么回答？</p><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>  当你这样说的时候：压缩代码、打包代码、雪碧图、cdn、事件代理、<br>  说明你对网站性能优化缺少一个整体的认识</p><h2 id="性能优化是什么"><a href="#性能优化是什么" class="headerlink" title="性能优化是什么"></a>性能优化是什么</h2><p>  从前端的角度，分页面加载时间 和 页面运行效率</p><h2 id="从浏览器打开到页面渲染完成，花费了多少时间"><a href="#从浏览器打开到页面渲染完成，花费了多少时间" class="headerlink" title="从浏览器打开到页面渲染完成，花费了多少时间"></a>从浏览器打开到页面渲染完成，花费了多少时间</h2><p>主要的过程是：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">浏览器解析 -&gt; 查询缓存 -&gt; dns查询 -&gt; 建立链接 -&gt; </span><br><span class="line">服务器请求处理 -&gt; 服务器发送响应 -&gt; 客户端收到页面 -&gt;</span><br><span class="line">解析<span class="selector-tag">html</span> -&gt; 构建渲染树 -&gt; 开始显示内容（白屏时间）-&gt; </span><br><span class="line">首屏加载完成（首屏时间）-&gt; 用户可交互（DOMContentLoaded）-&gt;</span><br><span class="line">加载完成（load）</span><br></pre></td></tr></table></figure></p><h2 id="页面加载时间监控"><a href="#页面加载时间监控" class="headerlink" title="页面加载时间监控"></a>页面加载时间监控</h2><p>推荐 PerformanceTiming 可以获取页面加载的数据：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dns解析时间: domainLookEnd - domainLookStart</span><br><span class="line">TCP建立链接时间： connectEnd - connectStart</span><br><span class="line">白屏时间： responsStart - navigationStart</span><br><span class="line">dom渲染完成时间: domContentLoadEnentEnd - navigationStart</span><br><span class="line">页面onload时间： loadEventEnd - navigationStart</span><br></pre></td></tr></table></figure><h2 id="服务器部分优化要点"><a href="#服务器部分优化要点" class="headerlink" title="服务器部分优化要点"></a>服务器部分优化要点</h2><p>后端可以对缓存、dns查询时间，链接时间，处理请求时间，响应时间等进行优化</p><h2 id="前端部分优化要点"><a href="#前端部分优化要点" class="headerlink" title="前端部分优化要点"></a>前端部分优化要点</h2><p>前端可以对白屏时间，首屏时间，可交换时间，加载完成时间进行优化</p>]]></content>
      
      
      
        <tags>
            
            <tag> build_webApp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序媛(转)</title>
      <link href="/2019/09/09/%E5%A5%B3%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E6%AD%A3%E8%83%BD%E9%87%8F/"/>
      <url>/2019/09/09/%E5%A5%B3%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E6%AD%A3%E8%83%BD%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<p>推荐国内最好的在线翻译平台 众成翻译</p><a id="more"></a><p>【译】女程序员的正能量</p><p>推荐国内最好的在线翻译平台 众成翻译</p><p>原文链接：<a href="http://lea.verou.me/2015/12/my-positive-experience-as-a-woman-in-tech/" target="_blank" rel="noopener">http://lea.verou.me/2015/12/my-positive-experience-as-a-woman-in-tech/</a></p><p>虽说身为女性吐槽在技术圈里遇到的性别歧视之类话题能吸引更多的关注度，但是，如果没有人写点正能量的故事，过分消极的画风就会让越来越多的女性远离技术工作。</p><p>程序媛</p><p>如果我一开始就被人告知技术领域存在性别歧视，那我很可能会选择别的职业，毕竟我们不可能以一己之力打败成见。而对我来说幸运的是，在我从事喜爱的编程工作很长一段时间里，从来没有听说过性别歧视这回事儿。</p><p>我的事业至今为止带给我的只有快乐。的确，有的女性经历了许多不愉快的事，我们没法忽视这些问题，甚至遭受性别歧视有可能才是这个行业里面的大多数女性的真实现状。但是，正如任何问题都有两面性，也有许多像我一样的女性有着非常正能量的职业经历，我们总是被尊重而非歧视。这一面的积极的故事也应该被讲述出来，我们不能由于害怕被其他女性同胞认为我们自满、不努力争取更多的平等，结果刻意隐瞒这些经历。</p><p>我在生活中扮演着不同的角色。我是一名学生，一名演讲者，一位作家。我曾经在W3C工作，我开展和维护过许多成功的开源项目，而我现在在麻省理工从事计算机科学的研究。在这些不同的领域中，我从来没有由于我的性别而遭遇到不公平对待。这不是由于我对性别歧视不敏感，相反，我经常注意到一些非常细微的歧视行为1。我看到了很多社会中的性别歧视现象。然而，在我从事的行业里，我的性别从来不是什么问题，甚至反而能给我带来好处。</p><p>在我的开源代码仓库中，有许多程序员为我的项目贡献了代码，他们绝大多数都是男性。这些人从来没有因为我的性别而不那么尊敬我。我也从来没有觉得我的工作与男程序员相比被不那么认真对待。我的合作代码贡献者们不会因为我是女性而忽视我的意见，也不会因为我是女性，就不公平地吐槽我的代码。即使当我对某些技术不了解或者写了一个严重的bug的时候，我也从来不会被侮辱或责骂。社区对我是友好的，给了我足够的帮助和尊重。有时候我甚至觉得，正因为大家知道我是女性，所以反而更友好地对待我。</p><p>作为演讲者在讲台上，我没有得到过任何负面的反应。我的观点总是得到积极的反馈，不会因为我是女性而有什么问题。虽然偶尔我会收到一些关于我的颜值的奇怪的赞美，但这种事情也少有发生，即使有，也总是夹在具体话题内容的讨论中2。我从心里认为，作为女性演讲者的我必须要优秀，因为我不想让听众觉得女性讲师的能力不如男性讲师，但这并不是由于其他人观点影响而是我自己内心的选择。</p><p>我写的书，CSS Secrets3作为一本高级CSS教程获得了成功，在亚马逊平台上才几个月时间就已经获得了平均5颗星的综合评价。这本书在CSS类教程的畅销排行榜上稳列前五，在新书榜上也已经冲到了第一名的位置。我的性别并没有给我的书销售带来任何不利的影响(虽然我的名字Lea听起来比较中性，但书中有我的照片，所以读者不会不知道我是女性)。</p><p>作为学生，我从来没有感觉到任何一位教授歧视我的性别，即使我身在希腊——说得委婉一点——不那么重视性别平等的国家。</p><p>作为一名新手研究员，我对发论文还没有什么经验，所以我现在还没法分享这方面的心得。尽管如此，我依然收获到我的导师和同事们满满的尊重。虽然我的观点有时候大家不认同，但还是得到了认真对待和充分评估，我可以辩论和表达我的观点，这不会被视为强势和不理智。</p><p>我曾在W3C工作过，现在依然以CSS工作组的特邀专家身份参与其中。在这些角色里，我的女性身份似乎并没有任何问题。我一直觉得我的工作经验和技能被公平对待，我的观点被重视。事实上CSS工作组另一位最受尊重的成员也是女性：fantasai。</p><p>最后，以我在职业生涯中的多年经验，我总是可以谈妥任何我期望的报酬，尽管有时候有点难4，但我从来没有因为女性身份带来负面影响而错失过任何一次机会。</p><p>当今社会很少有公开的性别歧视，因为几乎没有超过10岁的人会公开承认他们认为女性不如男性。因此很难区分究竟哪些社会行为受到性别歧视影响。如果有人对你使坏，究竟是因为他们歧视女性还是因为他们本来就是人渣？如果有人批评你的工作，究竟是因为歧视你是女性还是因为真的有批评你的理由？有时候我们很难有最终结论，甚至那些对你不好的人自己也不知道。如果你质疑他们对你性别歧视，他们会全盘否认自己存在性别歧视行为，但其实在他们心里是真正存在着对女性的偏见。子曰，见贤思齐焉，见不贤而内自省。不要轻易下结论说你遇到了性别歧视，因为没有办法下定论，甚至连始作俑者自己都未必清楚内心是否有真的歧视女性，太多的似是而非。</p><p>也许，我不觉得我有遇到很多性别歧视是因为我宁愿相信那些对我不利的人本心并不是因为歧视我的性别。可能是受 Blackstone Formulation 5影响，我宁可忽视十次可能的性别歧视，也不愿意错误地将一次受到的不公平对待归为性别歧视问题。这可能是源于我的个性：我对自己无比自信，所以内心强大，以直抱怨，以德报德，没人能欺负我。然而我的大度和自信并不能让我忽略掉性别歧视和所期望的平等社会之间的巨大差距，所以我们应当为更多女性感受到正能量而喝彩（我不应该成为个例，对吗？）。</p><p>具有讽刺意味的是，在我职业生涯中偶遇的性别歧视，对方实际上将他的歧视行为视为对我好6。某一次我在拉斯维加斯的会议室里专注于我的slides，没有参与周围的任何谈话。突然，有个家伙在旁边爆了一句粗口fuck，然后转向我给我道歉。当时，我抬起头，环顾四周，有点小尴尬。我才意识到我是房间里唯一的女人，而那个人努力地让我觉得我与众不同，作为女人我被他像玻璃花一样“小心轻放”。抱歉，我当时的反应是脱口而出——我才不给你fuck ╮(╯▽╰)╭</p>]]></content>
      
      
      
        <tags>
            
            <tag> 时间寄语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端开发者如何设置数据库</title>
      <link href="/2019/09/09/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E8%80%85%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2019/09/09/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E8%80%85%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>前端开发者如何设置数据库MongoDB</p><a id="more"></a><h2 id="一、配置数据库"><a href="#一、配置数据库" class="headerlink" title="一、配置数据库"></a>一、配置数据库</h2><p>1.通过mlab获取一个免费的数据库</p><p>2.注册后，在MongoDB的部属表中点击新建（我们用的就是这个免费的沙盒数</p><p>3.创建一个账户，点击数据库名称,然后点击数据库名称,然后点击用户，并添加数据库用户，写下之后要用到的用户名和密码</p><p>4.获取数据路的URL(在数据库页面的顶部，你能够看到一个 MongoDB URI),这个数据库的URL相当于网址。</p><p>通常情况下，MongoDB的URL如下：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mongodb:<span class="comment">//&lt;dbuser&gt;:&lt;dbpassword&gt;@&lt;host&gt;:&lt;port&gt;/&lt;dbname&gt;</span></span><br><span class="line"><span class="comment">// 例如</span></span><br><span class="line">mongodb:<span class="comment">//admin:superSecretPassword@ds111885.mlab.com:11885/medium</span></span><br></pre></td></tr></table></figure></p><h2 id="二、设置服务器"><a href="#二、设置服务器" class="headerlink" title="二、设置服务器"></a>二、设置服务器</h2><p>后端使用node<br>从server.js 开始</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// init project</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);<span class="comment">// the library we will use to handle requests</span></span><br><span class="line"><span class="keyword">const</span> app = express(); <span class="comment">// instantiate express</span></span><br><span class="line">app.use(<span class="built_in">require</span>(<span class="string">'cors'</span>)()); <span class="comment">// allow Cross-domain requests</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// base route</span></span><br><span class="line">app.post(<span class="string">'/:user'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>)</span>&#123;</span><br><span class="line">  response.send(request.params.user);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>现在服务器可以响应每一个查询并显示查询的用户名</p><h2 id="三、向数据库增加数据"><a href="#三、向数据库增加数据" class="headerlink" title="三、向数据库增加数据"></a>三、向数据库增加数据</h2><p>我们知道 user 是谁了，现在我们想存储一些关于他的信息。<br>为了查询数据库，我们会使用 mongodb 库。你可以用以下两个方法安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mongodb –save</span><br></pre></td></tr></table></figure><p>或者如果你使用 Glitch ，你可以切换到 package.json 文件并点击 Add package 按钮。<br>我们加载 mongodb 库然后存储 MongoDB URI 到一个变量中:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongodb = <span class="built_in">require</span>(<span class="string">'mongodb'</span>); <span class="comment">// load mongodb</span></span><br><span class="line"><span class="keyword">const</span> url = process.env.URL</span><br></pre></td></tr></table></figure><p>URI 是很敏感的信息——这是访问数据库所需的一切。最好把 URI 放到一个 .env 文件中，.env 文件中的信息对于其他人是不可见的。<br>URI=mongodb://admin:<a href="mailto:PASSWORD@ds111885.mlab.com" target="_blank" rel="noopener">PASSWORD@ds111885.mlab.com</a>:11885/medium<br>Glitch 会自动从 .env 文件中加载变量到 process.env 变量。<br>数据库的连接是异步的操作，所以我们需要像这样在回调中包装所有服务器设置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mongodb.MongoClient.connect(url, <span class="function"><span class="keyword">function</span>(<span class="params">err, db</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// create a db table of 'users'</span></span><br><span class="line">  <span class="keyword">const</span> collection = db.collection(<span class="string">'users'</span>)</span><br><span class="line">  <span class="comment">// base route</span></span><br><span class="line">  app.get(<span class="string">'/:user'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// handle db </span></span><br><span class="line">    <span class="comment">// insert</span></span><br><span class="line">    collection.insertOne(&#123;...request.body, <span class="attr">user</span> : request.params.user &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err)&#123;</span><br><span class="line">        response.send(“An error occured”)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        response.send(“All well”)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// listen for requests, the process.env.PORT is needed because</span></span><br><span class="line">  <span class="comment">// we are using glitch, otherwise you could have written 80 or whatever</span></span><br><span class="line">  <span class="keyword">var</span> listener = app.listen(process.env.PORT, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(‘Your app is listening on port ‘ + listener.address().port);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> MongoDB node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用css 函数calc()计算高度</title>
      <link href="/2019/09/09/%E5%88%A9%E7%94%A8css%20%E5%87%BD%E6%95%B0calc()%E8%AE%A1%E7%AE%97%E9%AB%98%E5%BA%A6/"/>
      <url>/2019/09/09/%E5%88%A9%E7%94%A8css%20%E5%87%BD%E6%95%B0calc()%E8%AE%A1%E7%AE%97%E9%AB%98%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<p>利用css 函数calc()计算高度</p><a id="more"></a><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>calc是英文单词calculate(计算)的缩写，是css3的一个新增的功能，你可以使用calc()给元素的border、margin、padding、font-size和width等属性设置动态值。<br>calc()可以使用数学运算中的简单加（+）、减（-）、乘（*）和除（/）来解决问题，而且还可以根据单位如px,em,rem和百分比来转化计算。</p><h3 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">calc</span><span class="params">()</span></span> = calc(四则运算)</span><br></pre></td></tr></table></figure><p>用于动态计算长度值<br>注意：运算符需要保留一个空格，例如：<br>width: calc(100% – 10px);<br>任何长度都可以使用calc()函数进行计算</p><h3 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h3><p>比如三局平均分布的布局，中间间距为5像素。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">*&#123;<span class="attribute">margin</span>: <span class="number">0</span>; <span class="attribute">padding</span>: <span class="number">0</span>;&#125;</span><br><span class="line">.col-<span class="number">3</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: calc(<span class="number">100%</span>/<span class="number">3</span> - <span class="number">5px</span>);</span><br><span class="line">  <span class="attribute">float</span>: left; </span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#eee</span>; </span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>; </span><br><span class="line">  <span class="attribute">margin-bottom</span>: calc(<span class="number">5px</span>*<span class="number">3</span> /<span class="number">2</span>); </span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">18px</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.col-3</span>:nth-child(<span class="number">3</span>)&#123;<span class="attribute">margin-right</span>: <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>call、apply、 bind</title>
      <link href="/2019/09/09/%E5%86%99%E7%BB%99%E6%96%B0%E4%BA%BA%E7%9A%84call%E3%80%81apply%E3%80%81bind/"/>
      <url>/2019/09/09/%E5%86%99%E7%BB%99%E6%96%B0%E4%BA%BA%E7%9A%84call%E3%80%81apply%E3%80%81bind/</url>
      
        <content type="html"><![CDATA[<p>windowOS安装mysql5+ 解压缩版之教程 </p><a id="more"></a><h3 id="call"><a href="#call" class="headerlink" title="call()"></a>call()</h3><p>语法：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun.call(thisArg[,args1[,args[,...]]])</span><br></pre></td></tr></table></figure><p>thisArg: fun函数运行时指定的this值，可能的值为：</p><ul><li>不传，或者传<code>null</code>、<code>undefined</code>、this指向window对象</li><li>传递另一个函数的函数名fun2,this指向fun2的引用</li><li>值为原始值（数字、字符串、布尔值），this会指向该原始值的自动包装对象，如String、Number、Boolean</li><li>传递一个对象，函数中的this指向这个对象<h4 id="例如："><a href="#例如：" class="headerlink" title="例如："></a>例如：</h4></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">a</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">a.call(b); <span class="comment">// function b()&#123;&#125;</span></span><br></pre></td></tr></table></figure><p>经常会看到这种使用情况：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function list() &#123;</span><br><span class="line">   return Array<span class="selector-class">.prototype</span><span class="selector-class">.slice</span><span class="selector-class">.call</span>(argusments)</span><br><span class="line">&#125;</span><br><span class="line">list(1,2,3); // [1,2,3]</span><br></pre></td></tr></table></figure><p>为什么会实现这样的功能将argument转成数组？首先，call了之后，this指向了所传进去的arguments,我们可以假设slice方法的内部是这样子的：创建一新数组，然后for循环遍历this,将this[i]一个个的赋值给新数组，最后返回该数组。因此也就可以理解能实现这样的功能了。</p><h3 id="apply"><a href="#apply" class="headerlink" title="apply()"></a>apply()</h3><p>语法：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Chrome 14 以及 Internet Explorer 9 仍然不接受类数组对象。</span></span><br><span class="line"><span class="comment">// thisArg的可能值和call一样</span></span><br><span class="line">fun.apply(thisArg[, argsArray])</span><br></pre></td></tr></table></figure><h4 id="例如：-1"><a href="#例如：-1" class="headerlink" title="例如："></a>例如：</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var numbers = [5,6,2,3,7];</span><br><span class="line">var max = Math.max.apply(null, numbers);</span><br><span class="line">console.log(max); // 7</span><br></pre></td></tr></table></figure><p>平时Math.max 只能这样子用：Math.max(5,6,2,3,7);<br>利用apply的第二个参数是数组的特性，从而能够简便的从数组中找到最大值</p><h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><p>语法：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun.bind(thisArg[,args1[,...]])</span><br></pre></td></tr></table></figure><p>bind()方法会创建一个新函数,称为绑定函数<br>bind是ES5新增的一个方法，不会执行对应的函数（call或apply会自执行对应的函数），而是返回对绑定函数的引用</p><p>当调用这个绑定函数时，thisArgs参数作为this,第二个以及以后的参数加上绑定函数运行时本身的参数按照顺序作为原函数的参数来调用原函数。<br>简单地说，bind会产生一个新的函数，这个函数可以有预设的参数。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function list()&#123;</span><br><span class="line">   return Array.prototype.slice.call(arguments);</span><br><span class="line">&#125;</span><br><span class="line">var lendingThirtysevenList = list.bind(undefined, 37);</span><br><span class="line">var list = lendingThirtysevenList (1,2,3);</span><br><span class="line">console.log(list); // [37,1,2,3]</span><br></pre></td></tr></table></figure><p>bind调用简单</p><p>把类数组换成真正的数组，bind能够更简单地使用：</p><ul><li>apply用法</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var slice =  Array.prototype.slice;</span><br><span class="line">slice.apply(arguments);  // 类似对象的方法那样调用</span><br></pre></td></tr></table></figure><ul><li>bind用法</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var unboundSlice = Array.prototype.slice;</span><br><span class="line">var slice = Function.prototype.apply.bind(unboundSlice);</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">slice(arguments);  // 直接调用，简单</span><br></pre></td></tr></table></figure><h3 id="三者的区别："><a href="#三者的区别：" class="headerlink" title="三者的区别："></a>三者的区别：</h3><p>相同之处：改变函数体内 this 的指向。<br>不同之处：</p><p>call、apply的区别：接受参数的方式不一样。<br>bind：不立即执行。而apply、call 立即执行。</p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>window OS 下安装php 开发环境</title>
      <link href="/2019/09/09/window%E4%B8%8B%E5%AE%89%E8%A3%85php%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
      <url>/2019/09/09/window%E4%B8%8B%E5%AE%89%E8%A3%85php%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<p>windowOS安装mysql5+ 解压缩版之教程 </p><a id="more"></a><h3 id="一、Apache"><a href="#一、Apache" class="headerlink" title="一、Apache"></a>一、Apache</h3><p>因为Apache官网只提供源代码，如果要使用必须得自己编译，这里我选择第三方安装包Apache Lounge。</p><p>进入Apachelounge官方下载地址：<a href="http://www.apachelounge.com/download/" target="_blank" rel="noopener">http://www.apachelounge.com/download/</a><br>首先下载并安装vc redist，这是Apache运行必需的一个组件。<br>下载Apache解压版，将解压后的文件夹放在你想要安装的路径下。<br>修改配置文件：</p><p>Apache默认存在路径：“c:\Apache24” 下（版本号可能不同）。如果跟你的安装路径不同，你需要打开Apach\conf\httpd.conf配置文件，将其中所有前面没有被”#”注释的”c:\Apache24”、”c:\Apache24\htdocs”和”c:\Apache24\cgi-bin\”改成对应的路径。</p><p>指定IP和端口：在httpd.conf找到”ServerName <a href="http://www.example.com:80&quot;，将前面的注释去掉，将&quot;www.example.com&quot;修改为&quot;localhost&quot;。如果你要修改端口，将这里&quot;80”和前面“Listen：80”中的80一起修改。" target="_blank" rel="noopener">www.example.com:80&quot;，将前面的注释去掉，将&quot;www.example.com&quot;修改为&quot;localhost&quot;。如果你要修改端口，将这里&quot;80”和前面“Listen：80”中的80一起修改。</a></p><p>（可选）添加系统变量：将”Apache的安装路径\bin”添加到Path中。<br>验证安装是否成功：运行Apache的启动httpd.exe。在浏览器上输入localhost:80，如果不是无法访问那么Apache的配置便完成了。</p><h3 id="二、PHP"><a href="#二、PHP" class="headerlink" title="二、PHP"></a>二、PHP</h3><p>安装配置PHP<br> 　　　    进入PHP下载地址<a href="http://windows.php.net/download下载最新线程安全版PHP" target="_blank" rel="noopener">http://windows.php.net/download下载最新线程安全版PHP</a> zip压缩包，解压缩后放在想要安装的路径下。注意：下载的PHP VC版本不能比前面安装的vc redist版高。</p><p>　　　　 进入PHP安装目录，复制一份php.ini-development改名为php.ini放到安装路径下，打开找到”extension_dir”，去掉注释符，将值改为”PHP安装路径\ext”</p><p>在Apache中加载PHP<br>　　打开Apache的配置文件conf\httpd.conf，找到LoadModule区域，在其后加入：</p><pre><code>LoadModule php7_module &quot;PHP安装路径\php7apache2_4.dll&quot;  # 在Apache中以module的方式加载PHP，“php7_module”中的“7”要和PHP的版本对应；此外，不同的PHP版本“php7apache2_4.dll”可能不同。PHPIniDir &quot;PHP安装路径&quot; #告诉Apache PHP的安装路径</code></pre><p>定义执行PHP模块的文件<br>　　　　  查找 AddType application/x-gzip .gz .tgz，在其下一行添加代码：AddType application/x-httpd-php .php .html：声明.php和.html的文件能执行PHP程序。</p><p>测试：在 Apache安装路径\htdocs下新建文件：test.php，里面编辑：&lt;?php  phpinfo(); ?&gt;， 启动Apache， 在浏览器输入：localhost:80/test.php。</p><h3 id="三、MySQL"><a href="#三、MySQL" class="headerlink" title="三、MySQL"></a>三、MySQL</h3><p> 安装：在<a href="https://dev.mysql.com/downloads/下载相应安装版本，根据自己的需求安装。" target="_blank" rel="noopener">https://dev.mysql.com/downloads/下载相应安装版本，根据自己的需求安装。</a><br>在PHP中加载连接MySQL的程序集：在php.ini extension板块中增加一行extension=php_mysqli.dll。<br>　　　　  说明：不同的PHP版本可能提供不同的连接mysq的程序集，去ext文件夹下看看PHP提供的是什么这里就写什么。不同的程序集可能在连接数据库的时候使用的函数也不一样。</p><p>测试：在test.php中编辑：&lt;?php  $mysqli = mysqli_connect(“localhost”,”root”,”pwd”) or die(“cannt connet”); ?&gt;，启动数据库，重启Apache，在浏览器端查看，如果没有错误信息便配置正确了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>window下安装mysql解压缩版之教程</title>
      <link href="/2019/09/09/window%20os%20%E5%AE%89%E8%A3%85%E8%A7%A3%E5%8E%8B%E7%BC%A9%E7%89%88%E7%9A%84mysql%E6%95%99%E7%A8%8B/"/>
      <url>/2019/09/09/window%20os%20%E5%AE%89%E8%A3%85%E8%A7%A3%E5%8E%8B%E7%BC%A9%E7%89%88%E7%9A%84mysql%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>windowOS安装mysql5+ 解压缩版之教程 </p><a id="more"></a><h3 id="1-下载路径"><a href="#1-下载路径" class="headerlink" title="1.下载路径"></a>1.下载路径</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://dev.mysql.com/downloads/mysql/(或者自行去官网)</span><br></pre></td></tr></table></figure><p>有账号登陆下载，<br>没有账号：no thanks;just start my download</p><h3 id="2-解压放到指定盘中"><a href="#2-解压放到指定盘中" class="headerlink" title="2.解压放到指定盘中"></a>2.解压放到指定盘中</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如笔者：D:\mysql5.7</span><br></pre></td></tr></table></figure><h3 id="3-配置环境变量"><a href="#3-配置环境变量" class="headerlink" title="3.配置环境变量"></a>3.配置环境变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">找到系统变量</span><br><span class="line">MYSQL_HOME:D:\mysql5.7</span><br><span class="line">在path 后面添加 ;%MYSQL_HOME%\bin</span><br></pre></td></tr></table></figure><h3 id="4-在D-mysql5-7-注意根据自己的安装路径-目录下新建my-ini（mysql8-版本不需要此文件），并写入内容如下："><a href="#4-在D-mysql5-7-注意根据自己的安装路径-目录下新建my-ini（mysql8-版本不需要此文件），并写入内容如下：" class="headerlink" title="4.在D:\mysql5.7(注意根据自己的安装路径)目录下新建my.ini（mysql8+ 版本不需要此文件），并写入内容如下："></a>4.在<code>D:\mysql5.7</code>(注意根据自己的安装路径)目录下新建my.ini（mysql8+ 版本不需要此文件），并写入内容如下：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[mysql]</span><br><span class="line"><span class="comment"># 设置mysql客户端默认字符集</span></span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysqld]</span><br><span class="line"><span class="comment"># 跳过root密码</span></span><br><span class="line"><span class="comment"># skip-grant-tables</span></span><br><span class="line"><span class="comment"># 设置3306端口</span></span><br><span class="line">port = 3306</span><br><span class="line"><span class="comment"># 设置mysql的安装目录</span></span><br><span class="line">basedir=D:\mysql5.7</span><br><span class="line"><span class="comment"># 设置mysql数据库的数据的存放目录</span></span><br><span class="line">datadir=D:\mysql5.7\data <span class="comment">#自己创建data目录</span></span><br><span class="line"><span class="comment"># 允许最大连接数</span></span><br><span class="line">max_connections=200</span><br><span class="line"><span class="comment"># 服务端使用的字符集默认为8比特编码的latin1字符集</span></span><br><span class="line">character-set-server=utf8</span><br><span class="line"><span class="comment">#创建新表时将使用的默认存储引擎</span></span><br><span class="line">default-storage-engine=INNODB</span><br></pre></td></tr></table></figure><p><code>亲爱的请注意</code>:<br>basedir和datadir，请根据自己的实际安装目录进行修改<br>注意win10下这里的斜杠必须是两个斜杠，才能转义</p><h3 id="5-管理员权限打开cmd，并进入到D-mysql5-7-bin目录下"><a href="#5-管理员权限打开cmd，并进入到D-mysql5-7-bin目录下" class="headerlink" title="5.管理员权限打开cmd，并进入到D:\mysql5.7\bin目录下"></a>5.管理员权限打开cmd，并进入到<code>D:\mysql5.7\bin</code>目录下</h3><p>初始化data目录，指令如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld --initialize --console <span class="comment"># 首次输出初始化密码</span></span><br></pre></td></tr></table></figure></p><p>安装服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld -install mysql5 <span class="comment"># mysql5 是服务名称 ctrl + shifi + esc 可以查看</span></span><br></pre></td></tr></table></figure></p><p>卸载服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc delete mysql5 <span class="comment"># 出现问题时，可执行</span></span><br></pre></td></tr></table></figure></p><p>安装完成后启动服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net start mysql5</span><br></pre></td></tr></table></figure></p><p>停止服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net stop mysql5</span><br></pre></td></tr></table></figure></p><p>服务启动成功后，可以登录客户端了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p <span class="comment"># 输入初始化时生成的密码</span></span><br></pre></td></tr></table></figure></p><p>进入客户端，为了方便起见，找到user表的密码字段,可以将初始化密码更新为自定义密码</p>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript的编程风格</title>
      <link href="/2019/09/09/js%E7%9A%84%E7%BC%96%E7%A8%8B%E9%A3%8E%E6%A0%BC/"/>
      <url>/2019/09/09/js%E7%9A%84%E7%BC%96%E7%A8%8B%E9%A3%8E%E6%A0%BC/</url>
      
        <content type="html"><![CDATA[<p>javascript的编程风格</p><a id="more"></a><h2 id="“计算机科学只存在两个难题：缓存失效和命名。”——Phil-Karlton"><a href="#“计算机科学只存在两个难题：缓存失效和命名。”——Phil-Karlton" class="headerlink" title="“计算机科学只存在两个难题：缓存失效和命名。”——Phil Karlton"></a>“计算机科学只存在两个难题：缓存失效和命名。”——Phil Karlton</h2><h3 id="一、基本的格式化"><a href="#一、基本的格式化" class="headerlink" title="一、基本的格式化"></a>一、基本的格式化</h3><p>   PascalCase 和 CamelCase 都表示驼峰命名<br>   二者的区别：<br>   PascalCase以大写字母开始，而CamelCase 以小写字母开始<br>   缩进层级：使用4个空格符作为一个缩进层级<br>   语句结尾：JS语句要以分号结尾<br>   行的长度：推荐将行的长度限制在80个字符<br>   换行<br>      通常会在运算符后换行，下一行会增加两个层级的缩进。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">callFunc(document, window, <span class="string">"some string value"</span>, true, <span class="number">123</span></span><br><span class="line">        navigator);</span><br></pre></td></tr></table></figure></p><pre><code>当给变量赋值时，第二行的位置应当和赋值运算符的位置保持对齐</code></pre><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> result = something + anotherThing + somthingElse +</span><br><span class="line">             anotherSomethingElse</span><br></pre></td></tr></table></figure><h3 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h3><pre><code>在方法之间在方法中的局部变量（local variable）和第一条语句之间在多行或单行注释之前在方法内的逻辑片段之间插入空行，提高可读性 </code></pre><h3 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h3><pre><code>变量和函数    变量：变量名应当总是遵守驼峰（Camel Case）命名法，并且命名前缀应当是名词    函数：函数名应当总是遵守驼峰（Camel Case）命名法，并且命名前缀应当是动词    常量: 使用大写字母和下划线来命名，下划线用以分割单词    var MAX_COUNT = 10;    构造函数：构造函数的命名遵照大驼峰命名法（Pascal Case）直接量   字符串：单引号和双引号均可，推荐使用双引号。（便于在Java和JavaScript之间切换，Java只允许使用双引号）多行字符使用字符串连接符（+）将字符串分成多份</code></pre><h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><pre><code>不要省略小数点之前或之后的数字禁止八进制直接量 </code></pre><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不推荐的写法</span></span><br><span class="line">var price = .1;</span><br><span class="line">var price = 10.;</span><br><span class="line">var price = 010; // 八进制写法已经被弃用了</span><br><span class="line"></span><br><span class="line"><span class="comment">// 推荐写法</span></span><br><span class="line">var price = 10.00;</span><br><span class="line">var price = 10;</span><br><span class="line">var num = 0xA2; // 十六制写法</span><br><span class="line">var num = 1e23; // 科学计数法</span><br></pre></td></tr></table></figure><h3 id="null"><a href="#null" class="headerlink" title="null"></a>null</h3><pre><code>应当使用null的场景   始化一个变量，这个变量可能被赋值成一个对象   一个已经初始化的变量比较，无论这个变量是否为一个对象   的参数期望是对象时，用作参数传入   的返回值期望是对象时，用作返回值传出                                                                       不当使用null的场景   不要使用null来检测是否传入了某个参数   不要用null来检测一个未初始化的变量</code></pre><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不要用null来检测一个未初始化的变量</span></span><br><span class="line">var person;</span><br><span class="line"><span class="keyword">if</span> (person != null) &#123;</span><br><span class="line">    doSomething();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不要使用null来检测是否传入了某个参数</span></span><br><span class="line">function doSomething(arg1,arg2,arg3,arg4) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arg4 != null )&#123;</span><br><span class="line">        doSomething();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h3><pre><code> 避免在代码中使用undefined，可以有效的确保只有在一种情况下typeof才会返回&quot;undefined&quot;：当变量未声明时。如何可以，则将其赋值为null。当变量初始值赋值为null，则表明这个变量最终很可能赋值为对象，typeof null 返回&quot;object&quot;，这样就可以和undefined区分开了</code></pre><p>  对接直接量<br>     避免使用构造函数创建对象</p><h3 id="二、注释"><a href="#二、注释" class="headerlink" title="二、注释"></a>二、注释</h3><pre><code>单行注释    独占一行的注释，用来解释下一行的代码。这行注释之前总是有一个空行，且缩进层级与下一行代码一致。    在代码行的尾部注释。代码结束到注释之间至少有一个缩进。注释（包括之前的代码部分）不应当超过单行    最大字符数限制，如果超过了，就将这条注释放置于当前代码行的上方。   被注释掉的大段代码多行注释   推荐Java风格的多行注释使用注释    难于理解的代码    可能被误认为错误的代码    浏览器特性hack    推荐使用文档生成工具来为你的JavaScript生成文档。JavaScript代码注释必须符合你所用的工具支持的格式，很多文档生成工具都支持JavaDoc风格的文档注释。文档注释    需要添加注释的内容    所有的方法    应当对方法、期望的参数及可能的返回值添加注释描述    所有的构造函数    应当对自定义类型和期望的参数添加注释描述    所有包含文档化方法的对象    如果一个对象包含一个或多个附带文档注释的方法，那么对这个对象也应该适当地针对文档生成工具添加文档注释</code></pre><h2 id="三、语句和表达式"><a href="#三、语句和表达式" class="headerlink" title="三、语句和表达式"></a>三、语句和表达式</h2><h3 id="1-花括号的对齐方式"><a href="#1-花括号的对齐方式" class="headerlink" title="1.花括号的对齐方式"></a>1.花括号的对齐方式</h3><p>所有的块语句都应当使用花括号<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// java 风格，推荐这种风格</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    doSomething();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  doSomethingElse();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// c#风格、不推荐这种风格，以避免错误的分号自动插入</span></span><br><span class="line"><span class="keyword">if</span> (condition)</span><br><span class="line">&#123;</span><br><span class="line">    doSomething();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">   doSomethingElse();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-块语句间隔"><a href="#2-块语句间隔" class="headerlink" title="2.块语句间隔"></a>2.块语句间隔</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在语句名、圆括号和左花括号之间没有空格</span></span><br><span class="line"><span class="function"><span class="title">if</span><span class="params">(condition)</span></span>&#123;</span><br><span class="line">    doSomething();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在左圆括号和右边圆括号之后各自添加一个空格（推荐）</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    doSomething();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在左圆括号后和右前各添加一个空格</span></span><br><span class="line"><span class="keyword">if</span> ( condition ) &#123;</span><br><span class="line">    doSomething();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-swith-语句"><a href="#3-swith-语句" class="headerlink" title="3.swith 语句"></a>3.swith 语句</h3><h4 id="1-gt-缩进"><a href="#1-gt-缩进" class="headerlink" title="1&gt;.缩进"></a>1&gt;.缩进</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// java风格（推荐）</span></span><br><span class="line">switch (condition) &#123;</span><br><span class="line">    case <span class="string">"first"</span>:</span><br><span class="line">         <span class="comment">// 代码</span></span><br><span class="line">         break;</span><br><span class="line">    case <span class="string">"second"</span>:</span><br><span class="line">         <span class="comment">// 代码</span></span><br><span class="line">         break;</span><br><span class="line">     default:</span><br><span class="line">         <span class="comment">// 代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-gt-case语句的‘连续执行’"><a href="#2-gt-case语句的‘连续执行’" class="headerlink" title="2&gt;. case语句的‘连续执行’"></a>2&gt;. case语句的‘连续执行’</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只要事是有意为之并且添加了注释，就可以使用case语句的连续执行</span></span><br><span class="line">switch (condition) &#123;</span><br><span class="line">    case <span class="string">"first"</span>:</span><br><span class="line">         <span class="comment">// 代码</span></span><br><span class="line">         break;</span><br><span class="line">    case <span class="string">"second"</span>:</span><br><span class="line">         <span class="comment">// 代码</span></span><br><span class="line">         break;</span><br><span class="line">     default:</span><br><span class="line">         <span class="comment">// default 中没有逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-gt-default"><a href="#3-gt-default" class="headerlink" title="3&gt;. default"></a>3&gt;. default</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从语法结构角度考虑，即使default中什么也不做，也不应当省略default</span></span><br><span class="line">switch (condition) &#123;</span><br><span class="line">    case <span class="string">"first"</span>:</span><br><span class="line">         <span class="comment">// 代码</span></span><br><span class="line">         break;</span><br><span class="line">    case <span class="string">"second"</span>:</span><br><span class="line">         <span class="comment">// 代码</span></span><br><span class="line">         break;</span><br><span class="line">     default:</span><br><span class="line">         <span class="comment">// 代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-with-语句"><a href="#4-with-语句" class="headerlink" title="4.with 语句"></a>4.with 语句</h3><p>避免使用with语句<br>在严格模式下(‘use strict’)，with语句是被明确禁止的，如果使用则报语法错误</p><h3 id="5-for-循环"><a href="#5-for-循环" class="headerlink" title="5.for 循环"></a>5.for 循环</h3><p>Dojo编程风格指南明确指出可以使用continue和break<br>推荐尽可能避免使用continue，但也没有理由完全禁止使用，应该根据代码可读性来决定。</p><h3 id="6-for-in-循环"><a href="#6-for-in-循环" class="headerlink" title="6.for-in 循环"></a>6.for-in 循环</h3><p>for-in 循环是用来遍历对象属性的，避免用它来遍历数组<br>所有的for-in 循环必须使用hasOwnProperty()方法过滤触实例属性<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="selector-tag">var</span> prop <span class="keyword">in</span> object) &#123;</span><br><span class="line">     <span class="keyword">if</span> (<span class="selector-tag">object</span>.hasOwnProperty(prop)) &#123;</span><br><span class="line">          console.log('Property name is' + prop);</span><br><span class="line">          console.log('Property value is' + object[prop]);</span><br><span class="line">     &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="三、变量和函数运算符"><a href="#三、变量和函数运算符" class="headerlink" title="三、变量和函数运算符"></a>三、变量和函数运算符</h2><h3 id="1-变量声明"><a href="#1-变量声明" class="headerlink" title="1.变量声明"></a>1.变量声明</h3><p>注意：变量声明的提升<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function doSomethingWithItems(items)&#123;</span><br><span class="line">    for (var i = 0, len = items.length; i &lt; len; i++) &#123;</span><br><span class="line">         doSomething(item[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 等价于以下代码</span></span><br><span class="line">function doSomethingWithItems(items)&#123;</span><br><span class="line">    var i, len;</span><br><span class="line">    for (i = 0, len = items.length; i &lt; len; i++) &#123;</span><br><span class="line">         doSomething(item[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-函数声明"><a href="#2-函数声明" class="headerlink" title="2.函数声明"></a>2.函数声明</h3><p>注意：函数声明的提升<br>    函数不应该出现在语句块之内<br>    函数声明应该在条件语句的外部使用<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这段代码在不同的浏览器中运行的结果不尽相同</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    function doSomething() &#123;</span><br><span class="line">        alert('hi');</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   function doSomething() &#123;</span><br><span class="line">       alert('Yo');</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3-函数调用间隔"><a href="#3-函数调用间隔" class="headerlink" title="3.函数调用间隔"></a>3.函数调用间隔</h3><p>推荐风格：在函数名和左括号之间没有空格<br>doSomething(item);</p><h4 id="1-gt-立即调用函数-将函数用一对圆括号包裹起来"><a href="#1-gt-立即调用函数-将函数用一对圆括号包裹起来" class="headerlink" title="1&gt;. 立即调用函数 将函数用一对圆括号包裹起来"></a>1&gt;. 立即调用函数 将函数用一对圆括号包裹起来</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将函数用一对圆括号包裹起来 </span></span><br><span class="line"><span class="selector-tag">var</span> value = (function ()&#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">    return &#123;</span><br><span class="line">        message: <span class="string">'Hi'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h4 id="2-gt-严格模式"><a href="#2-gt-严格模式" class="headerlink" title="2&gt;.严格模式"></a>2&gt;.严格模式</h4><p>‘use strict’;<br>推荐尽量使用严格模式<br>尽量不要在全局作用域中使用严格模式<br>如果希望在多个函数中应用严格模式可以使用立即执行函数</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(function() &#123;</span><br><span class="line">    'use strict';</span><br><span class="line">    function doSometing() &#123;</span><br><span class="line">        <span class="comment">// 代码</span></span><br><span class="line">    &#125;</span><br><span class="line">    function doSomethingElse() &#123;</span><br><span class="line">        <span class="comment">// 代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h4 id="3-gt-相等"><a href="#3-gt-相等" class="headerlink" title="3&gt;.相等"></a>3&gt;.相等</h4><p>==和!=比较会发生强制类型转换<br>推荐使用===和!==进行比较<br>尽量避免使用eval()函数<br>尽量避免使用原始包装类型创建对象</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不好的做法（应该尽量避免）</span></span><br><span class="line">eval("alert('hi')");</span><br><span class="line">var muFunc = new Function('alert('Hi')');</span><br><span class="line">setTimeout( 'document.body.style.background="red"',50);</span><br><span class="line">setInterval('document.title="it is now"' + (new Date()),1000);</span><br><span class="line">var name = new String('Nicholas');</span><br><span class="line">var auther = new Boolean(true);</span><br><span class="line">var count = new Number(10);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript语法基础系列之操作符</title>
      <link href="/2019/09/09/javascript%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97%E4%B9%8B%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
      <url>/2019/09/09/javascript%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97%E4%B9%8B%E6%93%8D%E4%BD%9C%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<p>javascript语法基础系列之操作符</p><a id="more"></a><h2 id="一、其他基本类型转换为Number类型"><a href="#一、其他基本类型转换为Number类型" class="headerlink" title="一、其他基本类型转换为Number类型"></a>一、其他基本类型转换为Number类型</h2><h3 id="1-null转化成Number"><a href="#1-null转化成Number" class="headerlink" title="1.null转化成Number"></a>1.null转化成Number</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var ret = Number(null);</span><br><span class="line">console.log(ret);        // 0</span><br><span class="line">console.log(typeOf ret); //number</span><br></pre></td></tr></table></figure><h3 id="2-undefined-转化成Number"><a href="#2-undefined-转化成Number" class="headerlink" title="2.undefined 转化成Number"></a>2.undefined 转化成Number</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(Number(undefined)); // NaN</span><br></pre></td></tr></table></figure><h3 id="3-boolean转成Number"><a href="#3-boolean转成Number" class="headerlink" title="3.boolean转成Number"></a>3.boolean转成Number</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(Number(true));</span><br><span class="line">console.log(Number(false));</span><br></pre></td></tr></table></figure><h3 id="4-String转成Number"><a href="#4-String转成Number" class="headerlink" title="4.String转成Number"></a>4.String转成Number</h3><p>  Number()<br>    1.如果字符串中存在除了数字和小数点以外的其他字符，则转换失败，值为NaN<br>    2.加减号在头表示正负号<br>    3.开头有空白字符可以过滤</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// string -&gt; number(Number())</span></span><br><span class="line">console.log(Number('123'));  // 123</span><br><span class="line">console.log(Number('+123')); // 123</span><br><span class="line">console.log(Number('-123')); // -123</span><br><span class="line">console.log(Number(' 123')); // 123</span><br><span class="line">console.log(Number('12.3')); // 12.3</span><br><span class="line">console.log(Number(' '));    // 0</span><br><span class="line"></span><br><span class="line">console.log(Number('12+3')); // NaN</span><br><span class="line">console.log(Number('12-3')); // NaN</span><br><span class="line">console.log(Number('a123')); // NaN</span><br><span class="line">console.log(Number('12 3')); // NaN</span><br><span class="line">console.log(Number('12..')); // NaN</span><br></pre></td></tr></table></figure><p>  parseInt()<br>    1.将接收到的数据（一般都是字符串）转化成整数<br>    2.转换规则：从第一个非空白字符（空格、换行、tab）开始转换，直到遇到一个非数字字符为止。<br>    3.如果转化失败，结果为NaN<br>    4.从第一个非空字符开始，如果第一个字符不是数字或者正负号，parseInt()就会返回NaN，因此，parseInt()转换空字符结果为NaN，但是Number返回0</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//string -&gt;number(parseInt())</span></span><br><span class="line">console.log(parseInt('123'));  // 123</span><br><span class="line">console.log(parseInt('+123')); // 123</span><br><span class="line">console.log(parseInt('-123')); // -123</span><br><span class="line">console.log(parseInt(' 123')); // 123</span><br><span class="line">console.log(parseInt('12.3')); // 12</span><br><span class="line">console.log(parseInt(' '));    // NaN</span><br><span class="line"></span><br><span class="line">console.log(parseInt('12+3')); // 12</span><br><span class="line">console.log(parseInt('12-3')); // 12</span><br><span class="line">console.log(parseInt('a123')); // NaN</span><br><span class="line">console.log(parseInt('12 3')); // 12</span><br><span class="line">console.log(parseInt('12..')); // 12</span><br></pre></td></tr></table></figure><p>  parseFloat()<br>    1.将接收到的数据（一般都是字符串）转成浮点数<br>    2.遇到的第一个小数点有效，第二个小数点就无效了</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// string -&gt; number(parseFloat())</span></span><br><span class="line">console.log(parseFloat('12.3'));      // 12.3</span><br><span class="line">console.log(parseFloat('12..3'));     // 12</span><br><span class="line">console.log(parseFloat('   12.3'));   // 12.3</span><br><span class="line">console.log(parseFloat('12.3+123'));  // 12.3</span><br><span class="line">console.log(parseFloat(' '));         // NaN</span><br></pre></td></tr></table></figure><h2 id="二、其他基本类型转为String类型"><a href="#二、其他基本类型转为String类型" class="headerlink" title="二、其他基本类型转为String类型"></a>二、其他基本类型转为String类型</h2><h3 id="1-null转化成String"><a href="#1-null转化成String" class="headerlink" title="1.null转化成String"></a>1.null转化成String</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// null -&gt; string</span></span><br><span class="line">console.log('hello' +null);  //hellonull</span><br></pre></td></tr></table></figure><h3 id="2-undefined转化成String"><a href="#2-undefined转化成String" class="headerlink" title="2.undefined转化成String"></a>2.undefined转化成String</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var str = undefined + '';</span><br><span class="line">console.log(str);       // undefined</span><br><span class="line">console.log(typeof str) <span class="comment">// string</span></span><br></pre></td></tr></table></figure><h3 id="3-boolean转化成String"><a href="#3-boolean转化成String" class="headerlink" title="3.boolean转化成String"></a>3.boolean转化成String</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// boolean -&gt; string</span></span><br><span class="line">console.log(true.toString());        // 'true'</span><br><span class="line">console.log(typeof true.toString()); // string</span><br></pre></td></tr></table></figure><h3 id="3-number转化成String"><a href="#3-number转化成String" class="headerlink" title="3.number转化成String"></a>3.number转化成String</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// number -&gt; string</span></span><br><span class="line">var num = 10;</span><br><span class="line">console.log('' + 1);          // 1</span><br><span class="line">console.log(num.toString());  // 10</span><br></pre></td></tr></table></figure><h2 id="三-其他基本类型转换为Boolean类型"><a href="#三-其他基本类型转换为Boolean类型" class="headerlink" title="三.其他基本类型转换为Boolean类型"></a>三.其他基本类型转换为Boolean类型</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 绝大多数转成布尔值，结果都为true</span></span><br><span class="line">  以下这六种情况转为boolean结果为false</span><br><span class="line">  console.log(Boolean(0));          // false</span><br><span class="line">  console.log(Boolean(''));         // false</span><br><span class="line">  console.log(Boolean(fasle));      // false</span><br><span class="line">  console.log(Boolean(NaN));        // false</span><br><span class="line">  console.log(Boolean(undefined));  // false</span><br><span class="line">  console.log(Boolean(null));       // false</span><br></pre></td></tr></table></figure><h2 id="四、prompt-“-“"><a href="#四、prompt-“-“" class="headerlink" title="四、prompt(“ “)"></a>四、prompt(“ “)</h2><p>  prompt()接收外部的数据，默认是字符串类型<br>  有时需要将其转化成整数<br>  var age = parseInt(prompt(“请输入年龄”));</p><h2 id="五、算数运算符和算数运算表达式"><a href="#五、算数运算符和算数运算表达式" class="headerlink" title="五、算数运算符和算数运算表达式"></a>五、算数运算符和算数运算表达式</h2><p>  1.表达式：由变量、常量和运算符组成的式子<br>  2.如何阅读表达式<br>    功能：进行相关的运算<br>    值：相关运算之后得到的值<br>  3.算数运算符<br>    +-*/、%(取余数)</p><h3 id="（乘）"><a href="#（乘）" class="headerlink" title="*（乘）"></a>*（乘）</h3><p>a.如果操作数都是数值，则执行常规的乘法运算，如果结果超过JS数值范围，则返回Infinity或者-Infinity<br>b.NaN参与乘法运算，则结果返回NaN<br>c.Infinity<em>0，返回NaN<br>d.Infinity与非0操作数运算时，结果返回Infinity或者-Infinity。取决于有符号操作数的符号。<br>e.Infinity </em> Infinity，结果是Infinity<br>f.如果有一个操作数不是数值，那么在参与运算前会先对操作数执行Number()将其转化为数值，再应用上面的规则<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// * 乘法</span></span><br><span class="line">console.log(2*3);                 // 6</span><br><span class="line">console.log(NaN*3);               // NaN</span><br><span class="line">console.log(Inifnity*0);          // NaN</span><br><span class="line">console.log(Infinity*2);          // Infinity</span><br><span class="line">console.log(Infinity*(-2));       // -Infinity</span><br><span class="line">console.log(Infinity*Infinity);   // Infinity</span><br><span class="line">console.log(Infinity*(-Infinity));// -Infinity</span><br><span class="line">console.log("2"*3);               // 6</span><br></pre></td></tr></table></figure></p><h3 id="（除）"><a href="#（除）" class="headerlink" title="/（除）"></a>/（除）</h3><p>a.如果操作数都是数值，则执行常规的除法运算，如果结果超过JS数值范围，则返回Infienter code here<code>nenter code hereity或者-Infinityb.NaN参与除法运算，则结果返回NaNc.I</code>enter code here<code>nfinity / Infinity，结果为NaNd.0 / 0， 结果为NaNe.如果是非0的有限数被0除，则结果是Infinity或者-Infinity，取决于有符号操作数的符号</code>enter code here`<br>    f.如果是Infinity被任何非0 整数值除，则结果是Infinity或者-Infinity<br>    g.如果有一个操作数不是数值，那么在参与运算前会先对操作数执行Number()将其转化为数值，再应用上面的规则<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /除法</span></span><br><span class="line">console.log(5/3);   // 1.6666666</span><br><span class="line">console.log(NaN/3); // NaN</span><br><span class="line">console.log(Infinity/Infinity); // NaN</span><br><span class="line">console.log(0/0);  // NaN</span><br><span class="line">console.log(2/0);  // Infinity</span><br><span class="line">console.log((-2)/0);//-Infinity</span><br><span class="line">console.log(Infinity/2); //Infinity</span><br><span class="line">consol`enter code here`e.log(Infinity/(-2)); //-Infinity</span><br><span class="line">console.log('5'/3);   //1.66666</span><br></pre></td></tr></table></figure></p><h3 id="（取余）"><a href="#（取余）" class="headerlink" title="% （取余）"></a>% （取余）</h3><p>a.如果<code>enter code here</code>操作数都是数值，则执行常规的取余运算<br>b.如果被除数是无穷大值，而除数是有限大值，结果为NaN<br>c.如果被除数是有限大值，除数是0，结果为NaN<br>d.被除数是0，结果为0<br>e.如果有一个操作数不是数值，那么在参与运算前会先对操作数执行Number()将其转化为数值，再应用上面的规则<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// % 取余</span></span><br><span class="line">console.log(5%3); // 2</span><br><span class="line">console.log(Infinity % 3); //NaN</span><br><span class="line">console.log(3%0); // NaN</span><br><span class="line">console.log(0 % 2); // 0</span><br><span class="line">console`enter code here`.log('7'%3); //1</span><br></pre></td></tr></table></figure></p><h3 id="（加）"><a href="#（加）" class="headerlink" title="+（加）"></a>+（加）</h3><p>a.如果操作数都是数值，则执行常规的加法运算<br>b.如果有一个操作数是NaN，则返回NaN<br>c.Infinity + Infinity = Infinity<br>d.(-Infinity) + (-Infinity) = -Infinity<br>e.Infinity + (-Infinity) = NaN<br>f.两个都是字符串，则拼接字符串<br>g.一个数值，一个字符串，则现将数值转为String类型，然后拼接字符串<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// + 加法</span></span><br><span class="line">console.log(5+3); // 8</span><br><span class="line">console.log(NaN + 3); //NaN</span><br><span class="line">console.log(Infinity + Infinity); // Infinity</span><br><span class="line">console.log((-Infinity) + (-Infinity)); // -Infinity</span><br><span class="line">console.log(Infinity + (-Infinity)); //NaN</span><br><span class="line">console.log('hello ' + 'world'); // hello world</span><br><span class="line">console.log('hello ' + 2017); // hello 2017</span><br></pre></td></tr></table></figure></p><h3 id="减"><a href="#减" class="headerlink" title="-减"></a>-减</h3><p>a.如果操作数都是数值，则执行常规的减法运算<br>b.如果有一个操作数是NaN，则返回NaN<br>c.Infinity - Infinity = NaN<br>d.(-Infinity) - (-Infinity) = NaN<br>e.Infinity - (-Infinity) = Infinity<br>f.-Infinity - Infinity = -Infinity</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// - 减法</span></span><br><span class="line">  console.log(5 - 2); // 3</span><br><span class="line">  console.log(NaN -3); // NaN</span><br><span class="line">  console.log(Infinity - Infinity); // NaN</span><br><span class="line">  console.log(-Infinity - (-Infinity)); // NaN</span><br><span class="line">  console.log(Infinity - (-Infinity)); // Infinity</span><br><span class="line">  console.log(-Infinity - Infinity); // Infinity</span><br></pre></td></tr></table></figure><p>  4.算术运算表达式<br>    变量1  算数运算符  变量2<br>  5.功能：进行相关的数学运算，不能改变变量的值<br>  6.值：相关数学运算之后的结果</p><h2 id="六、自增自减运算符"><a href="#六、自增自减运算符" class="headerlink" title="六、自增自减运算符"></a>六、自增自减运算符</h2><h3 id="1-自增"><a href="#1-自增" class="headerlink" title="1.自增"></a>1.自增</h3><p>   自增运算符 ++<br>   自增运算表达式<br>       变量 ++ 后++，先取值再加1，表达式的值是变量+1之前的值<br>       ++ 变量，先++，先加1再取值，表达式的值是变量+1之后的值<br>   功能：两种都是实现变量的值自动加1</p><h3 id="2-自减"><a href="#2-自减" class="headerlink" title="2.自减"></a>2.自减</h3><p>   自减运算符 –<br>   自减运算表达式<br>       变量– 后–，先取值再减1，表达式的值是变量减1之前的值<br>       –变量 先–，先减1再取值，表达式的值是变量减1之后的值<br>   功能：两种都是实现变量的值自动减1 </p><h2 id="七、赋值运算符和赋值运算表达式"><a href="#七、赋值运算符和赋值运算表达式" class="headerlink" title="七、赋值运算符和赋值运算表达式"></a>七、赋值运算符和赋值运算表达式</h2><p>赋值运算符  =<br>赋值运算表达式  变量 = 表达式<br>功能：实现对变量的赋值操作<br>值<br>     复合运算符<br>        +=    a+=1 === a=a+1<br>        -=    a-=1 === a=a-1<br>        <em>=    a</em>=1 === a=a*1<br>        /=    a/=1 === a=a/1<br>        %=    a%=1 === a=a%1<br>     赋值运算结束之后，变量的值</p><h2 id="八、关系运算符和关系运算表达式"><a href="#八、关系运算符和关系运算表达式" class="headerlink" title="八、关系运算符和关系运算表达式"></a>八、关系运算符和关系运算表达式</h2><p>  关系运算符<br>     &gt;、&gt;=、&lt;=、<br>     == 只比较数值，不比较类型。比较之前会进行类型统一<br>     === 数值和类型都要相等才可<br>  关系运算表达式： 表达式1  关系运算符  表达式2<br>  功能： 计算表达式1和表达式2的关系值<br>  值： 如果关系成立，值为真，否则值为假<br>  注意: 关系运算符不能连用。例如 1 &lt;= num &lt;= 5 会存在语法错误</p><h2 id="九、逻辑运算符"><a href="#九、逻辑运算符" class="headerlink" title="九、逻辑运算符"></a>九、逻辑运算符</h2><p>   逻辑与（&amp;&amp;）有一个条件为假，则结果为假<br>   逻辑或（||）有一个条件为真，则结果为真<br>   逻辑非（!）取非运算</p><h2 id="十、三目运算和三目运算符"><a href="#十、三目运算和三目运算符" class="headerlink" title="十、三目运算和三目运算符"></a>十、三目运算和三目运算符</h2><p>   三目运算符<br>   三目运算表达式：  表达式 ? 表达式1 : 表达式2<br>   功能：计算”表达式”的值，如果”表达式”的值为真，则计算表达式1的<br>   值，否则计算表达式2的值<br>   值：如果”表达式”的值为真，则取表达式1的计算值作为结果，否则取表<br>   达式2的计算值作为结果</p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript 语法基础系列之Object</title>
      <link href="/2019/09/09/javascript%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97%E4%B9%8BObject/"/>
      <url>/2019/09/09/javascript%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97%E4%B9%8BObject/</url>
      
        <content type="html"><![CDATA[<p>javascript语法基础系列之Object</p><a id="more"></a><h3 id="对象的定义"><a href="#对象的定义" class="headerlink" title="对象的定义"></a>对象的定义</h3><p>JS中的所有事物都是对象,对象是属性和方法的集合，而类又是对象的抽象集合<br>JS 自带很多内部对象：<br><code>String</code> <code>Date</code> <code>Array</code>等<br>对象的创建，属性及方法的使用方法</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明式创建</span></span><br><span class="line">var o = &#123;&#125;;</span><br><span class="line"><span class="comment">// 构造函数创建</span></span><br><span class="line">var o = new Object();</span><br></pre></td></tr></table></figure><h3 id="空对象的判断"><a href="#空对象的判断" class="headerlink" title="空对象的判断"></a>空对象的判断</h3><p>如果只是判断对象未 <code>null</code> 或 <code>undefined</code></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var obj; </span><br><span class="line"><span class="keyword">if</span> (!obj)&#123;</span><br><span class="line">  console.log('对象为空');</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是判断对象没有任何<code>可枚举</code>属性</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var obj;</span><br><span class="line">JSON.stringify(obj) == '&#123;&#125;';</span><br><span class="line"><span class="comment">// 大部分情况 可用 for...in 遍历看枚举属性，包括prototype 中的（继承来的）</span></span><br><span class="line">Oject.keys(obj) 只遍历自有的可枚举属性</span><br></pre></td></tr></table></figure><p>注意：不要用 JSON.parse(str) == {}; 因为对象的值是引用类型的，引用地址不同就不相等<br>但是对象的属性也可以通过设置<code>enumerable = false</code> 为不可枚举的，那么通过上面的方法就没法判断对象是否具有某个属性了</p><h3 id="对象的相等判定"><a href="#对象的相等判定" class="headerlink" title="对象的相等判定"></a>对象的相等判定</h3><p>一般比较对象的相等都是比较<code>不为空</code>的两个对象的相等</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#125; == &#123;&#125;; // false 对象是引用类型的 引用地址不同就不相等</span><br></pre></td></tr></table></figure><p>所以，一般我们比较两个对象是否<code>相等</code>是都是比较它们是否具有相同的属性和方法，以及它们对应的值是否相等，而不是通过 ‘==’ 来比较</p><h3 id="对象属性的顺序"><a href="#对象属性的顺序" class="headerlink" title="对象属性的顺序"></a>对象属性的顺序</h3><p>顺序和你的添加顺序无关，ES6 Map()支持有序的对象，不同的浏览器排序的规则也不相同，因此想跨浏览器最好使用数组</p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript语法基础系列之字符串基本用法</title>
      <link href="/2019/09/09/javascripty%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97%E4%B9%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
      <url>/2019/09/09/javascripty%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97%E4%B9%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>javascript语法基础系列之字符串基本用法</p><a id="more"></a><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>  有两种形式的字符串: 基本类型、对象类型（临时对象）<br>  注意：字符串所有的方法看上去是返回一个修改后的字符串，实际上返回的是一个新的字符串值</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串 基本类型 String</span></span><br><span class="line">var str1 = 'Hello World';</span><br><span class="line">console.log(typeof str1);</span><br><span class="line"><span class="comment">// 字符串 对象类型 Object</span></span><br><span class="line">var str2 = new String('Hello World');</span><br><span class="line">console.log(typeof str2);</span><br></pre></td></tr></table></figure><p>对象类型的字符串封装了一些属性及方法，而基本类型则没有<br>可以直接用基本类型字符串调用字符串对象封装的属性及方法，无须手动转换</p><h3 id="字符串的长度"><a href="#字符串的长度" class="headerlink" title="字符串的长度"></a>字符串的长度</h3><p>字符串中的length是只读属性，不可更改<br>按各国标注字符来计算长度</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按各国标注字符串来计算长度</span></span><br><span class="line">var str = "实现伟大的中国梦";</span><br><span class="line">console.log(str.length);</span><br><span class="line"><span class="comment">// 获取对应下标处的字符</span></span><br><span class="line">console.log(str[3]);  // 大</span><br></pre></td></tr></table></figure><h3 id="字符串的常用方法"><a href="#字符串的常用方法" class="headerlink" title="字符串的常用方法"></a>字符串的常用方法</h3><h4 id="1-charAt-index"><a href="#1-charAt-index" class="headerlink" title="1.charAt(index)"></a>1.charAt(index)</h4><p>   功能：获取对应下标处的字符<br>   参数：下标<br>   返回值：获取到的字符，没有字符则返回空字符串</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var str = "what color do yu lile";</span><br><span class="line">console.log(str.charAt(3));         // t</span><br><span class="line">console.log(str.charAt(30));        // 空字符串(“”)</span><br><span class="line">console.log(typeof str.charAt(30)); // string</span><br></pre></td></tr></table></figure><h4 id="2-charCodeAt-index"><a href="#2-charCodeAt-index" class="headerlink" title="2.charCodeAt(index)"></a>2.charCodeAt(index)</h4><p>   功能：获取对应下标处的字符编码<br>   参数：下标<br>   返回值：获取到的字符编码(0-65535),没有对应 的下标则返回NaN</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var str = "what color do yu lile";</span><br><span class="line">console.log(str.charAt(3));         // 116</span><br><span class="line">console.log(str.charAt(30));        // NaN</span><br><span class="line">console.log(typeof str.charAt(30)); // number</span><br></pre></td></tr></table></figure><h4 id="3-String-fromCharCode-ASCII码"><a href="#3-String-fromCharCode-ASCII码" class="headerlink" title="3.String.fromCharCode(ASCII码)"></a>3.String.fromCharCode(ASCII码)</h4><p>   功能：获取ASCII码对应的字符</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数：ASCII</span></span><br><span class="line"><span class="comment">// 返回值：对应的字符</span></span><br><span class="line">var charStr = String.fromCharCode(117);</span><br><span class="line">console.log(charStr);  // u</span><br></pre></td></tr></table></figure><h4 id="4-toLowerCase-toUpperCase"><a href="#4-toLowerCase-toUpperCase" class="headerlink" title="4.toLowerCase() toUpperCase()"></a>4.toLowerCase() toUpperCase()</h4><p>  功能:     字符串的大小写转换<br>  返回值: 转换后的字符串<br>  注意：不会改变原字符串</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var str = 'hello';</span><br><span class="line"><span class="comment">// 全部转换为大写</span></span><br><span class="line">console.log(str.toUpperCase()); // HELLO</span><br><span class="line"><span class="comment">// 不会更改原有字符串</span></span><br><span class="line">console.log(str);               // hello</span><br><span class="line"><span class="comment">// 全部转换为小写</span></span><br><span class="line">console.log(str.toLowerCase()); // hello</span><br><span class="line"><span class="comment">// 不会更改原有字符串</span></span><br><span class="line">console.log(str);               // hello</span><br></pre></td></tr></table></figure><h4 id="5-判断相等"><a href="#5-判断相等" class="headerlink" title="5.==, === 判断相等"></a>5.==, === 判断相等</h4><p>   == 只比较值相等，不对类型进行比比较<br>      比较之前会先进行类型统一<br>    === 要求值和类型均相等</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">console.log(1 == "1");   // true</span><br><span class="line">console.log(1 == true);  // true</span><br><span class="line">console.log(1 === "1");  // false</span><br><span class="line">console.log(1 === "1");  // false</span><br></pre></td></tr></table></figure><h4 id="6-localeCompare"><a href="#6-localeCompare" class="headerlink" title="6. localeCompare()"></a>6. localeCompare()</h4><p>   功能：字符串比较大小<br>   规则：两个字符串从下标为0的字符开始比较<br>   如果谁的ASCII码值大，那么谁大,如果相等继续比较后面的字符，当两个字符不想等时停止比较，此时谁的ASCII码值大谁就大<br>   返回值：<br>       1– 前面字符串大于后面的字符串<br>       -1–  前面的字符串小于后面的字符串<br>       0 – 前面的字符串等于后面的字符串<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vat str1 = 'abcd';</span><br><span class="line">var str2 = 'abdd';</span><br><span class="line">var retVal = str1.localCompare(str2);</span><br><span class="line"><span class="keyword">if</span> (retVal &gt; <span class="number">0</span>)&#123;</span><br><span class="line">  console.log(str1 + '&gt;' + str2);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (retVal &lt; <span class="number">0</span>)&#123;</span><br><span class="line">  console.log(str1 + '&lt;' + str2);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  console.log(str1 + '==' + str2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="7-indexof-searchValuem-fromindex"><a href="#7-indexof-searchValuem-fromindex" class="headerlink" title="7.indexof(searchValuem, fromindex)"></a>7.indexof(searchValuem, fromindex)</h4><p>  功能：从左至右查找第一次出现的字符串<br>  参数：要查找的字符串<br>  返回值：子串第一次出现的下标，如果没有子字符串，则返回-1</p><h4 id="8-lastIndexOf-searchValue-fromindex"><a href="#8-lastIndexOf-searchValue-fromindex" class="headerlink" title="8. lastIndexOf(searchValue, fromindex)"></a>8. lastIndexOf(searchValue, fromindex)</h4><p>  功能：从右至左查找第一次出现的字符串<br>  参数：<br>     searchValue：要查找的字符串<br>     fromindex：可选参数，表示从指定下标处开始往后查找<br>  返回值: 子串第一次出现的下标，如果没有子字符串，则返回-1 </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">va str = "Tom is a good man, Tom is a nice man";</span><br><span class="line"><span class="comment">// 从左至右查找第一次出现'is'字符串的下标</span></span><br><span class="line">console.log(str.indexof('is'));  // 4</span><br><span class="line"><span class="comment">// 从右至左查找第一次出现'is'字符串的下标</span></span><br><span class="line">console.log(str.lastIndexof('is'));  // 23</span><br></pre></td></tr></table></figure><h4 id="9-replace-oldStr-newStr"><a href="#9-replace-oldStr-newStr" class="headerlink" title="9.replace(oldStr, newStr)"></a>9.replace(oldStr, newStr)</h4><p>   默认只能替换第一次出现的oldStr<br>   通过正则表达式可以实现全部替换</p><h4 id="10-substring-start-stop"><a href="#10-substring-start-stop" class="headerlink" title="10.substring(start,stop)"></a>10.substring(start,stop)</h4><p>  定义：substring()方法用于提取字符串中介于两个指定下标之间的字符<br>  参数<br>     start：必须。一个非负的整数，要提取的子串的第一个字符在原字符中的位置<br>     end：可选。一个非负的整数，要提取的子串的最后一个字符在原字符中的位置+1<br>  如果省略该参数，那么返回的子串会一直截取到原字符串的末尾<br>  返回值：一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。<br>  注意：<br>     如果start与stop相等，那么该方法返回的就是一个空串（即长度为0的字符串）<br>  如果start比stop大，那么该方在提取字符串之前会先交换两个参数</p><h4 id="11-substr-start-length"><a href="#11-substr-start-length" class="headerlink" title="11.substr(start,length)"></a>11.substr(start,length)</h4><p>   定义：substr() 方法可在字符串中抽取从 start 下标开始的指定数目的字符。<br>   参数：<br>      start：必需。要抽取的字串的起始下标，必须是数值，如果是负数，那么该参数声明从字符串的尾部开始的位置算起，也就是说，-1 指字符串中最后一个字符，-2指倒数第二个字符，依次类推<br>      length：可选。字符串中的字符数，必须是数值，如果省略了该参数，那么返回从原字符串开始位置到结尾的字符串。<br>  返回值： 一个新的字符串，包含从 原字符串的 start（包括 start 所指的字符） 处开始的 length 个字符。如果没有指定 length，那么返回的字符串包含从 start 到原字符串的结尾的字符。  </p><h5 id="注意：substring-amp-sunstr-均不会改变原有的字符串"><a href="#注意：substring-amp-sunstr-均不会改变原有的字符串" class="headerlink" title="注意：substring() &amp; sunstr() 均不会改变原有的字符串"></a>注意：substring() &amp; sunstr() 均不会改变原有的字符串</h5><h4 id="stringObject-split-separator-howmany"><a href="#stringObject-split-separator-howmany" class="headerlink" title="stringObject.split(separator, howmany);"></a>stringObject.split(separator, howmany);</h4><p>  定义：split() 方法用于把一个字符串分割成字符串数组<br>  参数：<br>    separator 必须。字符串或正则表达式，从该参数指定的位置分割stringObject。<br>    howmany 可选。该参数可指定返回数组的最大长度。如果设置了该参数,整个字符串都会被分割，不考虑它的长度。<br>  返回值：一个字符串数组<br>  注意：如果吧把空字符串(‘’)用作separator，那么<br>  身体stringObject 中的每个字符之间都会被分割</p><h4 id="12-concat"><a href="#12-concat" class="headerlink" title="12.concat()"></a>12.concat()</h4><p>   用于将一个多个字符串拼接起来</p><h4 id="13-trim"><a href="#13-trim" class="headerlink" title="13.trim()"></a>13.trim()</h4><p>   这个方法会创建一个字符串的副本，删除前缀及后缀的所有空格，然后返回结果</p><h4 id="14-模式匹配"><a href="#14-模式匹配" class="headerlink" title="14.模式匹配"></a>14.模式匹配</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var text = "testing:1,2,3"; // 实力文本</span><br><span class="line">var pattern = /\d+/g; // 匹配所有的的包含一个或多个的实例</span><br><span class="line">pattern.test(text); // true : 匹配成功</span><br><span class="line">text.search(pattern); // 9 首次匹配成功的位置</span><br><span class="line">text.match(pattern); // ['1', '2', '3'] 所有匹配组成的数组</span><br><span class="line">text.replace(patten, "#"); // "testint:# # #"</span><br><span class="line">text.split(/D+/); // ["", "1", "2", "3"] : 用非数字字符截取字符串</span><br></pre></td></tr></table></figure><h2 id="math-对象"><a href="#math-对象" class="headerlink" title="math 对象"></a>math 对象</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 四舍五入</span></span><br><span class="line">console.log(Math.round(4.5));  // 5</span><br><span class="line"><span class="comment">// 向上取整</span></span><br><span class="line">console.log(Math.ceil(31.));   // 4</span><br><span class="line"><span class="comment">// 向下取整</span></span><br><span class="line">console.log(Math.floor(3.9));  // 3</span><br><span class="line"><span class="comment">// 取最大值</span></span><br><span class="line">console.log(Math.max(4,4,6,76,89,31)); // 89</span><br><span class="line"><span class="comment">// 取最小值</span></span><br><span class="line">console.log(Math.min(3,4,7,99,0)); // 0</span><br><span class="line"><span class="comment">// 取绝对值</span></span><br><span class="line">console.log(Math.abs(-10));  // 10</span><br><span class="line"><span class="comment">// x的y 次方</span></span><br><span class="line">console.log(Math.pow(2,3));  // 8</span><br><span class="line"><span class="comment">// 开平方</span></span><br><span class="line">console.log(Math.sqrt(25));  // 5</span><br><span class="line"><span class="comment">// 生成一个0-1之间的随机数</span></span><br><span class="line">console.log(Math.random());  // 0-1之间的随机数</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript语法基础系列之基本语句</title>
      <link href="/2019/09/09/javascripty%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97%E4%B9%8B%E5%9F%BA%E6%9C%AC%E8%AF%AD%E5%8F%A5/"/>
      <url>/2019/09/09/javascripty%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97%E4%B9%8B%E5%9F%BA%E6%9C%AC%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<p>javascript语法基础系列之基本语句</p><a id="more"></a><h3 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h3><h3 id="if-else-语句"><a href="#if-else-语句" class="headerlink" title="if-else 语句"></a>if-else 语句</h3><h3 id="if-else-if-语句"><a href="#if-else-if-语句" class="headerlink" title="if-else-if 语句"></a>if-else-if 语句</h3><p>   条件语句：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (表达式) &#123;</span><br><span class="line">       语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>   注意：可以嵌套，嵌套不要超过6层，一般也就三层<br>   每个else都是对他上面所有表达式的否定   </p><h3 id="switch-语句-和-break语句"><a href="#switch-语句-和-break语句" class="headerlink" title="switch 语句 和 break语句"></a>switch 语句 和 break语句</h3><h3 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h3><h3 id="do-while"><a href="#do-while" class="headerlink" title="do-while"></a>do-while</h3><p>   do-while 注意：语句至少执行一次</p><h3 id="for-和-for-in语句"><a href="#for-和-for-in语句" class="headerlink" title="for 和 for-in语句"></a>for 和 for-in语句</h3><p>   用来枚举对象的属性<br>   如果要迭代的对象是null或者是undefined，那么抛出异常</p><h3 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h3><pre><code>break专门用来跳出switch语句和循环语句的break后面的代码是不会被执行的break只跳出距离它最近的那一次循环或switch</code></pre><h3 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a>continue语句</h3><p>   用来跳过本次循环，继续下一次循环的，通常用在for循环内部</p><h3 id="死循环"><a href="#死循环" class="headerlink" title="死循环"></a>死循环</h3><p>   条件始终为真，循环永远不会结束</p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript语法基础系列之基本概念</title>
      <link href="/2019/09/09/javascripty%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97%E4%B9%8B%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
      <url>/2019/09/09/javascripty%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97%E4%B9%8B%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<p>javascript语法基础系列之基本概念</p><a id="more"></a><h3 id="JS-简介"><a href="#JS-简介" class="headerlink" title="JS 简介"></a>JS 简介</h3><h2 id="javascript-内容的引入"><a href="#javascript-内容的引入" class="headerlink" title="javascript 内容的引入"></a>javascript 内容的引入</h2><p>   如何在静态页面上做出如下动态特效：<br>    1、亲切的欢迎讯息<br>    2、漂亮的数字钟<br>    3、有广告效果的跑马灯及简易的选举<br>    4、轮流播放的图片<br>    5、对客户端数据进行验证   </p><h2 id="javascript-是什么东东？"><a href="#javascript-是什么东东？" class="headerlink" title="javascript 是什么东东？"></a>javascript 是什么东东？</h2><p>   JavaScript主要用于HTML的页面，嵌入在HTML的源码中。<br>   JavaScript是因特网上最流行的脚本语言，它存在于全世界所有的Web浏览器中，能够增强用户与Web站点和Web应用程序之间的交互。<br>   JS是弱类型语言，没有类型声明，它的变量不必具有一个明确的类型。<br>   JS是脚本语言。换句话说，能够用来编程的并且直接执行源代码的语言，就是脚本语言。<br>   JS也是解释性的语言。何为解释性语言？是在运行的时候将程序直接翻译成机器语言。<br>   JS是一种基于对象（Object）和事件驱动（Event Driven）并具有安全性能的脚本语言，可广泛用于服务器、PC、笔记本电脑、平板电脑和智能手机等设备。<br>   HTML5的出现更是突出了JavaScript的重要性，例如HTML5的绘图支持、本地存储、离线应用、客户端通信等，都大量使用了JavaScript。</p><h2 id="javascript-的历史？"><a href="#javascript-的历史？" class="headerlink" title="javascript 的历史？"></a>javascript 的历史？</h2><p>   网景公司在上个世纪的1995年，凭借其Navigator浏览器，成为Web时代开启时最著名的第一代互联网公司。由于网景公司希望能在静态的HTML页面添加一些动态的效果，于是叫Brendan Eich这哥们在两周之内设计出了JavaScript语言。为什么起名叫JavaScript？原因是当时Java语言非常红火，所以网景公司希望借Java的名气来推广，但事实上，JavaScript除了语法上有点像Java，其他部分基本上没啥关系。就像雷锋与雷峰塔的关系。</p><h2 id="javascript的特点"><a href="#javascript的特点" class="headerlink" title="javascript的特点"></a>javascript的特点</h2><p>   1、简单性：它是基于Java基本语句和控制流之上的简单而紧凑的设计，是学习Java的好过渡，而且，它的变量类型是采用弱类型，未采用严格的数据类型。<br>   2、安全性：JS不允许访问本地硬盘，不能将数据存入到服务器上，不允许对网络文档进行修改和删除，只能通过浏览器实现信息浏览和动态交互，从而有效的防止数据的丢失。<br>   3、动态性：JS可以直接对用户或客户输入做出响应，无须经过Web程序。它对用户的响应通过以事件驱动的方式进行，即由某种操作动作引发响应的事件响应，如：点击鼠标、移动窗口、选择菜单等。<br>   4、跨平台：JS依赖浏览器本身，与操作环境无关。只要能运行浏览器 的计算机，并安装了支持JS的浏览器就可以正确执行，从而实现了“编写一次，走遍天下”的梦想。</p><h2 id="javascroipt-的组成"><a href="#javascroipt-的组成" class="headerlink" title="javascroipt 的组成"></a>javascroipt 的组成</h2><p>   JavaScript是由ECMAScript、文档对象模型（Document Object Model： DOM）、浏览器对象模型（Browser Object Model：BOM）三部分构成，其核心是ECMAScript，它描述了该语言的语法和基本对象；DOM描述了处理网页内容的方法和接口，通过DOM，可以访问所有的HTML元素，连同它们所包含的文本和属性，可以对其中的内容进行修改和删除，同时也可以创建新的元素；BOM描述了与浏览器进行交互的方法和接口，BOM提供了独立于内容而与浏览器窗口进行交互的对象，例如可以移动，调整浏览器窗口大小的window对象，可以用于导航的location对象和history对象，可以获取浏览器，操作系统与用户屏幕信息的navigator与screen对象，可以使用document作为访问HTML文档的入口，管理框架的frames对象等。</p><h3 id="JS-注释"><a href="#JS-注释" class="headerlink" title="JS 注释"></a>JS 注释</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单行注释</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 多行注释</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="JS的引入方式"><a href="#JS的引入方式" class="headerlink" title="JS的引入方式"></a>JS的引入方式</h3><p>   1.外部的js代码<br>     在<script></script>标签里面src=””;中添加链接<br>     注：如果链接了外部JS文件，script标签内部的JS代码就不会执行了<br>   2.内部添加JS代码<br>     直接将js语句写在 标签内部<br>   注：script 标签可以有多个，将按顺序执行</p><h3 id="JS的输出方式"><a href="#JS的输出方式" class="headerlink" title="JS的输出方式"></a>JS的输出方式</h3><p>   1.页面输出</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.write("sunck is a nice man"); // document可以在页面中输出标签的内容</span><br></pre></td></tr></table></figure><p>   2.控制台输出</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log("sunck is a good man"); // 只能将标签以字符串的形式输出</span><br></pre></td></tr></table></figure><p>   3.提示框输出</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert("sunck is a handsome man"); // 只能将标签以字符串的形式输出</span><br></pre></td></tr></table></figure><h2 id="JS-标识符"><a href="#JS-标识符" class="headerlink" title="JS 标识符"></a>JS 标识符</h2><p>  1.含义：一串字符串（字符串未必是标识符）<br>  2.作用：用来给变量函数等命名的<br>  3.规则：<br>       · 由字母，数字，下划线和$组成<br>       · 不能以数字开头<br>       · 不能是JS中的关键字和保留字<br>       · 区分大小写<br>       · 遵循驼峰原则（funName）第一个首字母小写，后面单词字母大写<br>       · 见名知意<br>  4.同一命名空间</p><h2 id="JS数据类型"><a href="#JS数据类型" class="headerlink" title="JS数据类型"></a>JS数据类型</h2><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><p>  1.数字（Number）<br>    含义：包括浮点型和整型<br>          浮点型—就是该数值中必须有以为小数点并且小数点后面必须有以为数字<br>          由于浮点数值的内存空间是保存整数值的两倍，<br>          所以js会不失时机的把浮点型数转换为整型。<br>          小数点后面没数值或1.0会被保存为整数<br>    特殊的数字类型<br>        NaN:<br>          表示不是一个数字，其实他是一个特殊的数字<br>          当运算符错误的时候，一般会得到NaN<br>          NaN 具有传染性，即NaN参与任何运算，结果都为NaN<br>          NaN 与任何值都不相等<br>        Infinity:<br>          数值超过了js可以表示的范围，是一个特殊的数字<br>          Infinity 与其他数据类型进行操作运算，结果还是Infinity<br>          数字除以0得到Infinity<br>   2.字符串（String）<br>      含义：多个字符的有序序列，双引号和单引号引起来的都是字符串<br>      特点：<br>          两个字符串相加，实际上是两个字符串拼接<br>          两个字符串相加，是拼接而不是运算，其他运算结果为<br>          NaN,表示计算错误<br>          字符串加数字，首先将数字转化为响应的字符串<br>          然后再参与运算。<br>          同样不支持-、*、+、/等其他运算<br>   3.布尔值（Boolean）<br>      包括false 和 true<br>      通常用在流程控制语句，选择判断语句<br>      false值<br>        数字0<br>        NaN<br>        ‘’,空字符串<br>        false<br>        undefined<br>        null<br>      除了false值就是true 值<br>   4.undefined<br>      如果使用一个未定义的变量，会得到一个undefinedde<br>      值，当定义了一个变量未初始化，<br>      默认的也会给它初始化成undefined的值<br>   5.Null<br>      代表什么都没有<br>      注意：Null和undefined最大的区别是如果变量值为null<br>          说明变量是存在的，只不过它的值是空值null</p><h3 id="非基本数据类型"><a href="#非基本数据类型" class="headerlink" title="非基本数据类型"></a>非基本数据类型</h3><h2 id="变量和常量"><a href="#变量和常量" class="headerlink" title="变量和常量"></a>变量和常量</h2><p>  变量<br>     含义：是程序可操作的内存空间<br>           程序运行期间是可以改变的<br>     作用：存储数据<br>     定义：var 变量名<br>     存储方式：变量名 = 表达式<br>  常量<br>     含义：程序运行期间是不可以改变的</p><h2 id="JS数据类型查看符typeof、instanceof、tostring"><a href="#JS数据类型查看符typeof、instanceof、tostring" class="headerlink" title="JS数据类型查看符typeof、instanceof、tostring"></a>JS数据类型查看符typeof、instanceof、tostring</h2><pre><code>查看方式 typeOf 变量名</code></pre><h2 id="isNaN-函数-和-isFinite-函数"><a href="#isNaN-函数-和-isFinite-函数" class="headerlink" title="isNaN()函数 和 isFinite() 函数"></a>isNaN()函数 和 isFinite() 函数</h2><p>  isNaN()<br>    判断一个数是否为NaN的唯一方式，<br>    如果是NaN则返回true,否则返回false</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(NaN == NaN); // false</span><br><span class="line">console.log(isNaN(NaN)); // true</span><br></pre></td></tr></table></figure><p>  isFinite()<br>    如果是NaN或者Infinity返回false,否则返回true</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">console.log(isFinite(Infinity)); // false</span><br><span class="line">console.log(isFinite(NaN));      // false</span><br><span class="line">console.log(isFinite(1));        // true</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript语法基础系列之Date用法</title>
      <link href="/2019/09/09/javascripty%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97%E4%B9%8BDate%E7%94%A8%E6%B3%95/"/>
      <url>/2019/09/09/javascripty%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97%E4%B9%8BDate%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>javascript语法基础系列之Date用法</p><a id="more"></a><h2 id="了解时间"><a href="#了解时间" class="headerlink" title="了解时间"></a>了解时间</h2><h3 id="格里尼治时间（GTM）"><a href="#格里尼治时间（GTM）" class="headerlink" title="格里尼治时间（GTM）"></a>格里尼治时间（GTM）</h3><p>   是英国郊区格林尼治天文台的时间，因为地球自转的问题，每个时区的时间是不一样的。格林尼治天文台所处的是经度为零的地方，世界上一些重大的时间都是采用的格林尼治时间。</p><h3 id="世界标准时间（UTC）"><a href="#世界标准时间（UTC）" class="headerlink" title="世界标准时间（UTC）"></a>世界标准时间（UTC）</h3><p>  世界标准时间（UTC）</p><h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><p>  JS中的Date类型是由早期Java.util.Date类型基础之上构建的，所以保存的是距离1970年1月1日0时的毫秒数来存储时间的。</p><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><h4 id="1-用Date-函数创建-字符串类型"><a href="#1-用Date-函数创建-字符串类型" class="headerlink" title="1.用Date()函数创建(字符串类型)"></a>1.用Date()函数创建(字符串类型)</h4><p>  var nowDate = Date();<br>  得到是当前时间<br>  是字符串类型<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var nowDate = Date();</span><br><span class="line">console.log(nowDate);  // Tue Oct 10 2018 09:57</span><br><span class="line">console.log(typeof nowDate);  // string</span><br></pre></td></tr></table></figure></p><h4 id="2-使用构造函数（对象类型）"><a href="#2-使用构造函数（对象类型）" class="headerlink" title="2.使用构造函数（对象类型）"></a>2.使用构造函数（对象类型）</h4><p>  (1).不使用参数，得到当前时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var nowDate = new Date();</span><br><span class="line">console.log(typeof nowDate)  // object</span><br></pre></td></tr></table></figure><p>   (2). 使用参数<br>      参数是一个表示时间的字符串<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//月、日、年、时、分、秒</span><br><span class="line">// 2017-07-08 09：05：08 == 2017-07-08 9：5：8</span><br><span class="line">// == 2017/7/8 9：5：8</span><br><span class="line">var date = new Date(&apos;2017/7/8 09：05：08&apos;);</span><br><span class="line">console.log(date); // Web Oct 11 2017 10:11:34</span><br><span class="line">// 省掉 时、分、秒 默认为0（默认是标准时间）</span><br><span class="line">var date = new Date(&apos;2017/10/10&apos;);</span><br><span class="line">console.log(date); //  Web Oct 10 2017 00:00:00</span><br><span class="line">// 省掉日默认为1日</span><br><span class="line">var date = new(&apos;2017/10&apos;);</span><br><span class="line">console.log(date); //   Web Oct 01 2017 00:00:00</span><br><span class="line">// 省掉月默认为1月</span><br><span class="line">var date = new Date(&apos;2017&apos;);</span><br><span class="line">console.log(date); //  Web Jan 01 2017 08:00:00</span><br></pre></td></tr></table></figure></p><p>  参数是年、月、时、分、秒、毫秒<br>     a.年必须写的，月是从0开始，日是从1开始的<br>     b.如果月份超过11，则年份自动增加<br>     c.如果日超过当月应有的天数，则月份自动增加<br>     d.时、分、秒、毫秒都是如此<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数是年、月、日、时、分、秒、毫秒</span></span><br><span class="line">var date = new Date(2017,05,11,08,30,55);</span><br><span class="line">console.log(date); // Sun Jun 11 2017 08:30:55</span><br></pre></td></tr></table></figure></p><p>   参数是一个数字<br>       得到的是距离1970年1月1日0时参数毫秒之后的时间<br>       注意：对应北京时间需要加8小时<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var date = new(1508802220603);</span><br><span class="line">console.log(date); // Wed Oct 11 2017 14:10:20 GWT</span><br></pre></td></tr></table></figure></p><h3 id="Date对象的方法"><a href="#Date对象的方法" class="headerlink" title="Date对象的方法"></a>Date对象的方法</h3><h4 id="Get"><a href="#Get" class="headerlink" title="Get"></a>Get</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取当前时间</span></span><br><span class="line">var date = new Date();</span><br><span class="line"><span class="comment">// 获取年</span></span><br><span class="line">var year = date.getFullYear();</span><br><span class="line"><span class="comment">// 获取月</span></span><br><span class="line">var month = date.getMonth();</span><br><span class="line"><span class="comment">// 获取日</span></span><br><span class="line">var Date = date.getDate();</span><br><span class="line"><span class="comment">// 获取星期</span></span><br><span class="line">var day = date.getDay();</span><br><span class="line"><span class="comment">// 获取时</span></span><br><span class="line">var hour = date.getHours();</span><br><span class="line"><span class="comment">// 获取分</span></span><br><span class="line">var minute = date.getMinutes();</span><br><span class="line"><span class="comment">// 获取秒</span></span><br><span class="line">var seconds = date.getSeconds();</span><br><span class="line"><span class="comment">// 获取毫秒</span></span><br><span class="line">var millSecond = date.getMillSeconds();</span><br><span class="line"><span class="comment">// 获取当前时间距离 1970年1月1日0时的毫秒数</span></span><br><span class="line">var dutation = date.getTime();</span><br></pre></td></tr></table></figure><h4 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var date = new Date();</span><br><span class="line"><span class="comment">// 设置年</span></span><br><span class="line">var Year = date.setFullYear(2017);</span><br><span class="line"><span class="comment">// 设置月 月是从0开始 如果大于等于12，年份增加</span></span><br><span class="line">var Month = date.setMonth(10);</span><br><span class="line"><span class="comment">// 设置日 如果日大于当月应有的天数，月增加</span></span><br><span class="line">var Date = date.setDate();</span><br><span class="line"><span class="comment">// 设置星期  注意星期一般不设置</span></span><br><span class="line"><span class="comment">// 设置时 如果时大于23 日增加</span></span><br><span class="line">var Hour = date.setHours(08);</span><br><span class="line"><span class="comment">// 设置分钟 如果分钟大于59 时增加</span></span><br><span class="line">var Minute = date.setMinutes(54);</span><br><span class="line"><span class="comment">// 设置秒  如果秒大于 59 分增加</span></span><br><span class="line">var Second = date.setSeconds(55);</span><br><span class="line"><span class="comment">// 设置毫秒 如果毫秒大于999 秒增加</span></span><br><span class="line">var MillSecond = date.setMillseconds(666);</span><br><span class="line"><span class="comment">// 设置距离1970年1月1日0时毫秒数</span></span><br><span class="line">var duration = date.setTime(1507703240504);</span><br></pre></td></tr></table></figure><h4 id="转字符串"><a href="#转字符串" class="headerlink" title="转字符串"></a>转字符串</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 包含年月日时分秒</span></span><br><span class="line">var date = new Date();</span><br><span class="line"><span class="comment">// 包含年于日时分秒</span></span><br><span class="line">var str1 = date.toLocalString();</span><br><span class="line"><span class="comment">// 包含年月日</span></span><br><span class="line">var str2 = date.toLocalDateString();</span><br><span class="line"><span class="comment">// 包含时分秒</span></span><br><span class="line">var str3 = date.toLocalTimeString();</span><br></pre></td></tr></table></figure><h4 id="Date-对象间的运算"><a href="#Date-对象间的运算" class="headerlink" title="Date 对象间的运算"></a>Date 对象间的运算</h4><p>  两个时间对象相减，得到的时两个对象间相差的毫秒数</p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git基本命令及其用法</title>
      <link href="/2019/09/09/git%E5%9F%BA%E6%9C%AC%E6%8C%87%E4%BB%A4/"/>
      <url>/2019/09/09/git%E5%9F%BA%E6%9C%AC%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>使用git前需要做相关配置</p><a id="more"></a><h2 id="查看git配置的基本指令"><a href="#查看git配置的基本指令" class="headerlink" title="查看git配置的基本指令"></a>查看git配置的基本指令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --list  <span class="comment"># 显示配置信息列表</span></span><br><span class="line">git config --global user.name <span class="string">'hongtanhao'</span></span><br><span class="line">git cinfig --global user.emil <span class="string">'antartec@outlook.com'</span></span><br></pre></td></tr></table></figure><h2 id="git使用ssh密钥"><a href="#git使用ssh密钥" class="headerlink" title="git使用ssh密钥"></a>git使用ssh密钥</h2><p>git支持https和git两种传输协议，github分享链接时会有两种协议可选：<br>git使用https协议，每次pull, push都会提示要输入密码，使用git协议，然后使用ssh密钥，这样免去每次都输密码的麻烦</p><p>初次使用git的用户要使用git协议大概需要三个步骤：</p><h3 id="步骤一，生成密钥对"><a href="#步骤一，生成密钥对" class="headerlink" title="步骤一，生成密钥对"></a>步骤一，生成密钥对</h3><p>大多数 Git 服务器都会选择使用 SSH 公钥来进行授权。系统中的每个用户都必须提供一个公钥用于授权，没有的话就要生成一个。生成公钥的过程在所有操作系统上都差不多。首先你要确认一下本机是否已经有一个公钥。<br>SSH 公钥默认储存在账户的主目录下的 ~/.ssh 目录。查看：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~/.ssh</span><br><span class="line">$ ls</span><br></pre></td></tr></table></figure></p><p>若没有，可以用ssh-keygen 来创建<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">'antartec@outlook.com'</span></span><br></pre></td></tr></table></figure></p><h3 id="步骤二，设置远程仓库（本文以github为例）上的公钥"><a href="#步骤二，设置远程仓库（本文以github为例）上的公钥" class="headerlink" title="步骤二，设置远程仓库（本文以github为例）上的公钥"></a>步骤二，设置远程仓库（本文以github为例）上的公钥</h3><ol><li>查看你生成的公钥<blockquote><p> cat ~/.ssh/id_rsa.pub</p></blockquote></li><li>登陆你的github帐户。点击你的头像，然后 Settings -&gt; 左栏点击 SSH and GPG keys -&gt; 点击 New SSH key</li><li>然后你复制上面的公钥内容，粘贴进“Key”文本域内。 title域，自己随便起个名字。</li><li>点击 Add key。<br>完成以后，验证下这个key是不是正常工作：<blockquote><p>ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a><br>如果，看到：</p></blockquote></li></ol><p><code>Hi xxx! You&#39;ve successfully authenticated, but GitHub does not # provide shell access.</code></p><p>恭喜你，你的设置已经成功了。</p><h3 id="步骤三，把git的-remote-url-修改为git协议"><a href="#步骤三，把git的-remote-url-修改为git协议" class="headerlink" title="步骤三，把git的 remote url 修改为git协议"></a>步骤三，把git的 remote url 修改为git协议</h3><p> 使用命令 git remote -v 查看你当前的 remote url</p><blockquote><p>$ git remote -v<br>origin <a href="https://github.com/someaccount/someproject.git" target="_blank" rel="noopener">https://github.com/someaccount/someproject.git</a> (fetch)<br>origin <a href="https://github.com/someaccount/someproject.git" target="_blank" rel="noopener">https://github.com/someaccount/someproject.git</a> (push)</p></blockquote><p>上面是http协议，若想设置为ssh协议：</p><blockquote><p>git remote set-url origin <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:someaccount/someproject.git</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 基本命令</title>
      <link href="/2019/09/09/hello-world/"/>
      <url>/2019/09/09/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Hexo 基本命令</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>get 请求中特殊字符的处理</title>
      <link href="/2019/09/09/get%20%E8%AF%B7%E6%B1%82%E4%B8%AD%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%E7%9A%84%E5%A4%84%E7%90%86/"/>
      <url>/2019/09/09/get%20%E8%AF%B7%E6%B1%82%E4%B8%AD%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%E7%9A%84%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>get 请求中特殊字符的处理</p><a id="more"></a><h3 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h3><p>在get 请求参数中如果包括&amp;符号，在发送请求时就被当做参数的分隔符处理<br>比如请求参数<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> url = <span class="string">"xxx?name=aaa&amp;bbb"</span></span><br></pre></td></tr></table></figure></p><p>期望的请求参数应该是 name = “aaa&amp;&amp;bbb”<br>实际的请求参数会变成 name = “aaa” 和 bbb = </p><h3 id="处理方法"><a href="#处理方法" class="headerlink" title="处理方法"></a>处理方法</h3><p>在拼接参数的时候，使用enwxxxcode-styleURLComponent()进行手动转义</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> url = <span class="string">"xxx?name="</span> + enwxxxcode-styleURLComponent(<span class="string">"aaa&amp;bbb"</span>)</span><br></pre></td></tr></table></figure><h3 id="特殊字符的含义"><a href="#特殊字符的含义" class="headerlink" title="特殊字符的含义"></a>特殊字符的含义</h3><table><thead><tr><th>字符</th><th>特殊字符的含义</th><th>URL</th></tr></thead><tbody><tr><td>+</td><td>URL中加号表示空格</td><td>%2B</td></tr><tr><td>空格</td><td>URL中的加号可以用空格或编码</td><td>%20</td></tr><tr><td>/</td><td>分割目录和子目录</td><td>%2F</td></tr><tr><td>？</td><td>分割实际的URL和参数</td><td>%3F</td></tr><tr><td>%</td><td>指定特殊字符</td><td>%25</td></tr><tr><td>#</td><td>表示书签</td><td>%23</td></tr><tr><td>&amp;#038；</td><td>URL中指定的参数间的分隔符</td><td>%26</td></tr><tr><td>=</td><td>URL中指定参数的值</td><td>%3D</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>weex + vue2.0 开发android/iOS 应用之配置环境</title>
      <link href="/2019/09/09/weex%20+%20vue2.0%20%E5%BC%80%E5%8F%91Android%E5%92%8CiOS%20%E5%BA%94%E7%94%A8/"/>
      <url>/2019/09/09/weex%20+%20vue2.0%20%E5%BC%80%E5%8F%91Android%E5%92%8CiOS%20%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>weex + vue2.0 开发android/iOS 应用之配置环境</p><a id="more"></a><h3 id="一、安装java运行环境（JDK）"><a href="#一、安装java运行环境（JDK）" class="headerlink" title="一、安装java运行环境（JDK）"></a>一、安装java运行环境（JDK）</h3><p>检测本机操作系统是否已经安装了jdk<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -v</span><br></pre></td></tr></table></figure></p><p>若，没安装过，下载JDK,安装成功后并且配置系统环境变量</p><h3 id="二、安装nodejs"><a href="#二、安装nodejs" class="headerlink" title="二、安装nodejs"></a>二、安装nodejs</h3><p>安装完成后，检测是否安装成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure></p><h3 id="三、安装weex、weexpack、webpack"><a href="#三、安装weex、weexpack、webpack" class="headerlink" title="三、安装weex、weexpack、webpack"></a>三、安装weex、weexpack、webpack</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install weex weexpack webpack -g</span><br></pre></td></tr></table></figure><h3 id="四、初始化项目目录"><a href="#四、初始化项目目录" class="headerlink" title="四、初始化项目目录"></a>四、初始化项目目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">weex init/create weeex-demo</span><br></pre></td></tr></table></figure><p>根据提示选择依赖库，等工程目录创建完成后，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> weex-demo</span><br><span class="line">npm install</span><br><span class="line">npm run build</span><br><span class="line">npm run start</span><br></pre></td></tr></table></figure></p><p>可以在浏览器查看项目初始效果</p><h3 id="五、添加Android-iOS-SDK-支持原生app"><a href="#五、添加Android-iOS-SDK-支持原生app" class="headerlink" title="五、添加Android/iOS SDK  支持原生app"></a>五、添加Android/iOS SDK  支持原生app</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">weex platform add android <span class="comment"># 增加安卓sdk</span></span><br></pre></td></tr></table></figure><h3 id="六、安装Android-Studio"><a href="#六、安装Android-Studio" class="headerlink" title="六、安装Android Studio"></a>六、安装Android Studio</h3><ul><li>首次打开 as， 需要在setting 中配置jdk和sdk</li><li>Show Package Details</li><li>Android SDK Build Tools </li><li>Android Support Repository<br>安装完成后，配置gradle，导入刚创建的项目，便可进行原生开发、打包.apk等 <h3 id="七、调试"><a href="#七、调试" class="headerlink" title="七、调试"></a>七、调试</h3>1.方法一<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">weex debug your_weex.vue <span class="comment"># 调试单个页面</span></span><br><span class="line">weex debug your/path -e App.vue <span class="comment"># 调试整个工程</span></span><br></pre></td></tr></table></figure></li></ul><p>执行调试命令后，会将指定的文件打包成 JSBundle，并启动一个 weex Devtool 服务（<a href="http://localhost:8088可访问，如下图），同时将" target="_blank" rel="noopener">http://localhost:8088可访问，如下图），同时将</a> JSBundle 文件传递至该服务跟路径下的weex文件夹内（<a href="http://localhost:8088/weex/App.js，实际是下图右边二维码的的内容）。" target="_blank" rel="noopener">http://localhost:8088/weex/App.js，实际是下图右边二维码的的内容）。</a></p><p>2.方法二<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">weex your_weex.vue</span><br></pre></td></tr></table></figure></p><p>此时本地同时启动一个watch的服务器用于检查代码变更，自动重新构建 JSBundle，视觉同步刷新。</p><p>上图看到的效果即为H5页面的效果，我们一般在整个单页编写完成后在使用 Weex Playground App 扫码查看真机效果，或者你也可以在编写的同时使用真机观察代码的运行效果，每次重新构建包到重绘的速度还是很快的。</p><p>但前提是你要保证，你的手机和电脑的连在同一个局域网下，并且使用IP访问。</p><h3 id="八、打包"><a href="#八、打包" class="headerlink" title="八、打包"></a>八、打包</h3><p>熟悉 React Native 的人都知道， React Native 的发布实际上就是发布一个 JSBundle，Weex 也是这样，但不同的是，Weex 将工程进行分包，发布多个 JSBundle。因为 Weex 是单页独立开发的，每个页面都将通过 Weex 打包器将 vue/we 页面打包成一个单独的 JSBundle，这样的好处在于减少单个 bundle 包的大小，使其变的足够小巧轻量，提高增量更新的效率。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm run build <span class="comment"># 仅打包</span></span><br><span class="line">weex build iso <span class="comment"># 打包 + 构建</span></span><br><span class="line">weex run iso <span class="comment"># 打包 + 构建 +运行</span></span><br></pre></td></tr></table></figure></p><p>以上三种均会触发 Weex 对工程进行打包。<br>在我们执行了以上打包命令后，所有的工程文件将被单独打成一个独立的 JSBundle，如下：<br>index.vue  ==&gt; index.js<br>home.vue   ==&gt; home.js<br>topit.vue  ==&gt; topic.js<br>shop.vue   ==&gt; shop.js<br>打包后的 JSBundle 有两种格式<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 由.vue文件打包出来的包格式（简写），使用 vue 2.0 语法编写</span></span><br><span class="line">// &#123; <span class="string">"framework"</span>: <span class="string">"Vue"</span>&#125; </span><br><span class="line">/******/ (<span class="keyword">function</span>(modules) &#123; </span><br><span class="line">          .......</span><br><span class="line">/******/ &#125;)</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 由.we文件打包出来的包格式（简写），使用 weex 语法编写</span></span><br><span class="line">// &#123; <span class="string">"framework"</span>: <span class="string">"Weex"</span> &#125;</span><br><span class="line">/******/ (<span class="keyword">function</span>(modules) &#123; </span><br><span class="line">          .......</span><br><span class="line">/******/ &#125;)</span><br></pre></td></tr></table></figure><p>不同的头部是要告诉使用什么语法解析此JSBundle。</p><p>至此，我们准备「热更新的包」就已经准备完毕了，接下就是发包执行了</p><h3 id="九、发包"><a href="#九、发包" class="headerlink" title="九、发包"></a>九、发包</h3><p>打包后的 JSBundle 一般发布到发包服务器上，客户端从服务器更新包后即可在下次启动执行新的版本，而无需重新下载 app，因为运行依赖的 WeexSDK 已经存在于客户端了，除非新包依赖于新的 SDK，这也是热更新的基本原理。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">【WeexSDK】包括</span><br><span class="line">【JS Framework】JSBundle 的执行环境</span><br><span class="line">【JS-Native Bridge】中间件或者叫通讯桥梁，也叫【Weex Runtime】</span><br><span class="line">【Native Render Engine】解析 js 端发出的指令做原生控件布局渲染</span><br></pre></td></tr></table></figure></p><h3 id="十、执行"><a href="#十、执行" class="headerlink" title="十、执行"></a>十、执行</h3><p>Weex 的 iOS 和 Android 客户端的【JSFramework】中都会运行一个 JavaScript 引擎，来执行 JS bundle，同时向各端的渲染层发送规范化的指令，调度客户端的渲染和其它各种能力。iOS 下选择了 JavaScriptCore 内核，而在 Android 下选择了 UC 提供的 v8 内核（RN两端都是JavaScriptCore 内核）。</p><p>JSBundle 被 push 到客户端后就会在 JSFramework 中执行，最终输出三端可读性的 VNode 节点，数据结构简化如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  tag: <span class="string">'div'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    staticStyle: &#123; <span class="attr">justifyContent</span>: <span class="string">'center'</span> &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  children: [&#123;</span><br><span class="line">    tag: <span class="string">'text'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      staticClass: <span class="string">'txt'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    context: &#123;</span><br><span class="line">      $options: &#123;</span><br><span class="line">        style: &#123;</span><br><span class="line">          freestyle: &#123;</span><br><span class="line">            textAlign: <span class="string">'center'</span>,</span><br><span class="line">            fontSize: <span class="number">200</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    children: [&#123;</span><br><span class="line">      tag: <span class="string">''</span>,</span><br><span class="line">      text: <span class="string">'文字'</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>有了统一的 VNode 节点，各端即可根据自己的方法解析渲染原生UI了，之前的所有操作都是一致的，包括文件格式、打包编译过程、模板指令、组件的生命周期、数据绑定等。</p><p>然而由于目标执行环境不同（浏览器和 Weex 容器），在渲染真实原生 UI 的时候调用的接口也不同。</p><p>Vnode  —DOM api —&gt; Web<br>Vnode  —Native DOM API Weex<br>此过程发生在【Weex SDK】的【Weex Runtime】中。</p><p>最总【Weex Runtime】发起渲染指令callNative({…})有RenderEngine完成渲染</p><h1 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h1><ul><li>Weex 文件分包打包成单个 JSBundle 文件</li><li>发布到发包服务器上，通过热更新 push 到用户的客户端</li><li>交由【Weex SDK】执行解析</li><li>SDK 中的【JS Framework】执行 Bundle 脚本生成 Virtual DOM</li><li>Virtual DOM 经由各端执行环境【Weex Runtime】解析翻译成执行指令</li><li>【Native RenderEngine】接收到指令后执行渲染操作，作出渲染出完整的界面<br><img src="http://pqcpelaly.bkt.clouddn.com/vue.png" alt="图示"></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> weex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在ubuntu系统中部署tomcat服务器</title>
      <link href="/2019/09/09/%E5%9C%A8linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B8%AD%E9%83%A8%E7%BD%B2tomcat%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2019/09/09/%E5%9C%A8linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B8%AD%E9%83%A8%E7%BD%B2tomcat%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>在ubuntu系统中部署tomcat服务器，使用https协议通信<br><a id="more"></a></p><h2 id="使用远程管理软件XShell上传文件到Linux服务器上"><a href="#使用远程管理软件XShell上传文件到Linux服务器上" class="headerlink" title="使用远程管理软件XShell上传文件到Linux服务器上"></a>使用远程管理软件XShell上传文件到Linux服务器上</h2><ol><li>首先连接上一台Linux主机</li><li>输入rz命令，看是否已经安装了lrzsz，如果没有安装则执行<br>yum  -y install lrzsz （或apt install  lrzsz） 命令进行安装。</li><li>安装成功后，输入rpm命令确认是否正确安装<br>rpm -qa lrzsz</li><li>使用 rz -y命令进行文件上传，此时会弹出上传的窗口：</li><li>选择要上传的文件，点击确定即可将本地文件上传到Linux上，如图表示成功上传文件</li><li>使用ls命令可以看到文件已经上传到了当前目录下</li></ol><h2 id="Ubuntu-18-04安装JDK并配置环境变量"><a href="#Ubuntu-18-04安装JDK并配置环境变量" class="headerlink" title="Ubuntu 18.04安装JDK并配置环境变量"></a>Ubuntu 18.04安装JDK并配置环境变量</h2><ol><li><p>官网下载jdk<br>下载链接<br><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a><br>可以根据自己的系统进行下载</p></li><li><p>进行解压<br>sudo tar -zxvf jdk-8u171-linux-x64.tar.gz 则解压到了当前目录下，解压后可以把解压文件移动到自己想要放的目录下，使用mv命令 sudo mv jdk1.8.0_171 /usr/lib/xxx</p></li><li><p>进行配置<br>使用全局设置方法，它是所有用户的共用的环境变量<br>命令如下：$sudo gedit  ~/.bashrc / (view ~/.bashrc)<br>然后把如下命令复制到最底部</p></li></ol><p>export JAVA_HOME=/home/wind/ub_server/java/jdk1.8.0_211<br>export JRE_HOME=${JAVA_HOME}/jre<br>export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib<br>export PATH=${JAVA_HOME}/bin:$PATH<br>export JAVA_HOME=后面要填写自己解压后的jdk的路径<br><code>血的教训：：请千万注意路径后面不能有空格，否则就不能生效</code></p><ol start="4"><li><p>生效~/.bashrc文件<br>命令如下：$sudo source ~/.bashrc</p></li><li><p>测试是否安装成功<br>java -version 查看版本号是否改变</p></li></ol><h2 id="在Ubuntu16-04下安装mysql"><a href="#在Ubuntu16-04下安装mysql" class="headerlink" title="在Ubuntu16.04下安装mysql"></a>在Ubuntu16.04下安装mysql</h2><ol><li><p>首先执行下面三条命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mysql-server</span><br><span class="line">sudo apt install mysql-client</span><br><span class="line">sudo apt install libmysqlclient-dev</span><br></pre></td></tr></table></figure></li><li><p>安装成功后可以通过下面的命令测试是否安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo netstat -tap | grep mysql</span><br></pre></td></tr></table></figure></li><li><p>可以通过如下命令进入mysql服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p你的密码</span><br></pre></td></tr></table></figure></li><li><p>现在设置mysql允许远程访问，首先编辑文件/etc/mysql/mysql.conf.d/mysqld.cnf：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure></li></ol><p>注释掉bind-address = 127.0.0.1：<br>保存退出</p><ol start="5"><li><p>在mysql环境下执行授权命令(授权给远程任何电脑登录数据库)：<br>输入下面的命令进行开启：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant all on *.* to root@<span class="string">'%'</span> identified by <span class="string">'123456'</span> with grant option;</span><br></pre></td></tr></table></figure></li><li><p>回车后刷新配置<br>flush privileges;</p></li><li><p>然后执行quit命令退出mysql服务，执行如下命令重启mysql：<br>service mysql restart</p><p><code>现在</code> 在windows下可以使用navicat远程连接ubuntu下的mysql服务</p></li></ol><h2 id="以上如果出现问题："><a href="#以上如果出现问题：" class="headerlink" title="以上如果出现问题："></a>以上如果出现问题：</h2><ol><li>问题:远程连接mysql数据库出现错误:2003-can’t connect to MYSQL server on ‘’(10060)<br>解决方案：打开阿里云控制台,在实例安全组中添加3306端口</li></ol><h2 id="https证书配置（没解决实际问题）"><a href="#https证书配置（没解决实际问题）" class="headerlink" title="https证书配置（没解决实际问题）"></a>https证书配置（没解决实际问题）</h2><ol><li><p>Ubuntu上CA证书的配置可以通过工具ca-certificates来方便的进行。该工具默认是随Ubuntu安装的，如果没有可以通过下面的命令来安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ca-certificates</span><br></pre></td></tr></table></figure></li><li><p>需要安装CA证书我们只需要将其放在”/usr/share/ca-certificates”目录或其子目录下，ca-certificates工具就能自动扫描到。为了不与其它根证书混淆，我们创建一个子目录名为”extra”:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /usr/share/ca-certificates/extra</span><br></pre></td></tr></table></figure></li><li><p>然后将待安装的证书 CASHLibCACert.crt (需要下载)拷贝到刚刚创建的目录下：<br>sudo  cp _amanda.org.cn.crt /usr/share/ca-certificates/extra/amanda.org.cn.crt<br>（注意这里的证书是.crt的扩展名）</p></li><li><p>接下来让ca-certificates工具帮我们安装CA证书：<br>sudo dpkg-reconfigure ca-certificates</p></li><li><p>选择”Yes”，我们能看到待安装的CA证书已经被扫描到了，选中它（点空格键）然后选”OK”就行了。</p></li><li><p>那么安装的CA证书在哪里呢，Ubuntu把所有的证书都放在”/etc/ssl/certs”目录下，包括CA证书和普通的证书。来看看刚刚安装好的证书<br>CASHLibCACert.pem就是CA证书。 我们安装的时候证书扩展名是.crt，安装后扩展名变为了.pem。这两者的内容其实是一样的。CASHLibCACert.pem就是CA证书。 我们安装的时候证书扩展名是.crt，安装后扩展名变为了.pem。.crt证书是按base64编码的，如果.pem也采用base64编码，那么这两者是可以通用的。在本例中，CA证书的内容在安装前后没有变化。<br>普通证书是指除CA之外的证书，真正用来做身份认证或签名的证书。相对而言，CA证书用来验证普通证书的可信性。</p></li></ol><p>普通证书没有特别的安装步骤，放在任意可以访问的目录下就可以了。当然也可以拷贝到Ubuntu的证书目录下，跟刚刚安装的CA证书在同一目录——”/etc/ssl/certs”</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring aop原理分析</title>
      <link href="/2019/09/09/spring%20aop%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/"/>
      <url>/2019/09/09/spring%20aop%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>AOP（Aspect-OrientedProgramming，面向方面编程），可以说是OOP（Object-Oriented Programing，面向对象编程）的补充和完善。</p><a id="more"></a><h2 id="什么是aop"><a href="#什么是aop" class="headerlink" title="什么是aop"></a>什么是aop</h2><ul><li>AOP（Aspect-OrientedProgramming，面向方面编程），可以说是OOP（Object-Oriented Programing，面向对象编程）的补充和完善。OOP引入封装、继承和多态性等概念来建立一种对象层次结构，用以模拟公共行为的一个集合。当我们需要为分散的对象引入公共行为的时候，OOP则显得无能为力。也就是说，<code>OOP允许你定义从上到下的关系，但并不适合定义从左到右的关系</code>。例如日志功能。日志代码往往水平地散布在所有对象层次中，而与它所散布到的对象的核心功能毫无关系。对于其他类型的代码，如安全性、异常处理和透明的持续性也是如此。这种散布在各处的无关的代码被称为横切（cross-cutting）代码，在OOP设计中，它导致了大量代码的重复，而不利于各个模块的重用。</li></ul><ul><li><p>而AOP技术则恰恰相反，它利用一种称为“横切”的技术，剖解开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其名为“Aspect”，即方面。所谓“方面”，简单地说，就是将那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可操作性和可维护性。AOP代表的是一个横向的关系，如果说“对象”是一个空心的圆柱体，其中封装的是对象的属性和行为；那么面向方面编程的方法，就仿佛一把利刃，将这些空心圆柱体剖开，以获得其内部的消息。而剖开的切面，也就是所谓的“方面”了。然后它又以巧夺天功的妙手将这些剖开的切面复原，不留痕迹。</p></li><li><p>使用“横切”技术，AOP把软件系统分为两个部分：核心关注点和横切关注点。业务处理的主要流程是核心关注点，与之关系不大的部分是横切关注点。横切关注点的一个特点是，他们经常发生在核心关注点的多处，而各处都基本相似。比如权限认证、日志、事务处理。Aop 的作用在于分离系统中的各种关注点，将核心关注点和横切关注点分离开来。正如Avanade公司的高级方案构架师Adam Magee所说，AOP的核心思想就是“将应用程序中的商业逻辑同对其提供支持的通用服务进行分离。”</p></li></ul><h2 id="AOP使用场景"><a href="#AOP使用场景" class="headerlink" title="AOP使用场景"></a>AOP使用场景</h2><p>AOP用来封装横切关注点，具体可以在下面的场景中使用:</p><ul><li>Authentication 权限</li><li>Caching 缓存</li><li>Context passing 内容传递</li><li>Error handling 错误处理</li><li>Lazy loading　懒加载  </li><li>Debugging　　调试</li><li>logging, tracing, profiling and monitoring　记录跟踪　优化　校准</li><li>Performance optimization　性能优化</li><li>Persistence　　持久化</li><li>Resource pooling　资源池</li><li>Synchronization　同步</li><li>Transactions 事务</li></ul><h2 id="Transactions-事务"><a href="#Transactions-事务" class="headerlink" title="Transactions 事务"></a>Transactions 事务</h2><ol><li><p>方面（Aspect）：一个关注点的模块化，这个关注点实现可能另外横切多个对象。事务管理是J2EE应用中一个很好的横切关注点例子。方面用Spring的 Advisor或拦截器实现。</p></li><li><p>连接点（Joinpoint）: 程序执行过程中明确的点，如方法的调用或特定的异常被抛出。</p></li><li><p>通知（Advice）: 在特定的连接点，AOP框架执行的动作。各种类型的通知包括“around”、“before”和“throws”通知。通知类型将在下面讨论。许多AOP框架包括Spring都是以拦截器做通知模型，维护一个“围绕”连接点的拦截器链。Spring中定义了四个advice: BeforeAdvice, AfterAdvice, ThrowAdvice和DynamicIntroductionAdvice</p></li><li><p>切入点（Pointcut）: 指定一个通知将被引发的一系列连接点的集合。AOP框架必须允许开发者指定切入点：例如，使用正则表达式。 Spring定义了Pointcut接口，用来组合MethodMatcher和ClassFilter，可以通过名字很清楚的理解， MethodMatcher是用来检查目标类的方法是否可以被应用此通知，而ClassFilter是用来检查Pointcut是否应该应用到目标类上</p></li><li><p>引入（Introduction）: 添加方法或字段到被通知的类。 Spring允许引入新的接口到任何被通知的对象。例如，你可以使用一个引入使任何对象实现 IsModified接口，来简化缓存。Spring中要使用Introduction, 可有通过DelegatingIntroductionInterceptor来实现通知，通过DefaultIntroductionAdvisor来配置Advice和代理类要实现的接口</p></li><li><p>目标对象（Target Object）: 包含连接点的对象。也被称作被通知或被代理对象。POJO</p></li><li><p>AOP代理（AOP Proxy）: AOP框架创建的对象，包含通知。 在Spring中，AOP代理可以是JDK动态代理或者CGLIB代理</p></li><li><p>织入（Weaving）: 组装方面来创建一个被通知对象。这可以在编译时完成（例如使用AspectJ编译器），也可以在运行时完成。Spring和其他纯Java AOP框架一样，在运行时完成织入。</p></li></ol><h2 id="如何使用Spring-AOP"><a href="#如何使用Spring-AOP" class="headerlink" title="如何使用Spring AOP"></a>如何使用Spring AOP</h2><p>可以通过配置文件或者编程的方式来使用Spring AOP。</p><p>配置可以通过xml文件来进行，大概有四种方式：</p><ol><li>配置ProxyFactoryBean，显式地设置advisors, advice, target等</li><li>配置AutoProxyCreator，这种方式下，还是如以前一样使用定义的bean，但是从容器中获得的其实已经是代理对象</li><li>通过<a href="aop:config" target="_blank" rel="noopener">aop:config</a>来配置</li><li>通过&lt;aop: aspectj-autoproxy&gt;来配置，使用AspectJ的注解来标识通知及切入点</li></ol><p>也可以直接使用ProxyFactory来以编程的方式使用Spring AOP，通过ProxyFactory提供的方法可以设置target对象, advisor等相关配置，最终通过 getProxy()方法来获取代理对象<br>具体使用的示例可以google. 这里略去</p><h2 id="Spring-AOP代理对象的生成"><a href="#Spring-AOP代理对象的生成" class="headerlink" title="Spring AOP代理对象的生成"></a>Spring AOP代理对象的生成</h2><p>Spring提供了两种方式来生成代理对象: JDKProxy和Cglib，具体使用哪种方式生成由AopProxyFactory根据AdvisedSupport对象的配置来决定。默认的策略是如果目标类是接口，则使用JDK动态代理技术，否则使用Cglib来生成代理。下面我们来研究一下Spring如何使用JDK来生成代理对象，具体的生成代码放在JdkDynamicAopProxy这个类中，直接上相关代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">**</span><br><span class="line">* &lt;ol&gt;</span><br><span class="line">* &lt;li&gt;获取代理类要实现的接口,除了Advised对象中配置的,还会加上SpringProxy, Advised(opaque=<span class="keyword">false</span>)</span><br><span class="line">* &lt;li&gt;检查上面得到的接口中有没有定义 equals或者hashcode的接口</span><br><span class="line">* &lt;li&gt;调用Proxy.newProxyInstance创建代理对象</span><br><span class="line">* &lt;/ol&gt;</span><br><span class="line">*/</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">(ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">       logger.debug(<span class="string">"Creating JDK dynamic proxy: target source is "</span> +<span class="keyword">this</span>.advised.getTargetSource());</span><br><span class="line">   &#125;</span><br><span class="line">   Class[] proxiedInterfaces = AopProxyUtils.completeProxiedInterfaces(<span class="keyword">this</span>.advised);</span><br><span class="line">   findDefinedEqualsAndHashCodeMethods(proxiedInterfaces);</span><br><span class="line">   <span class="keyword">return</span> Proxy.newProxyInstance(classLoader, proxiedInterfaces, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面的问题是，代理对象生成了，那切面是如何织入的？</p><p>我们知道InvocationHandler是JDK动态代理的核心，生成的代理对象的方法调用都会委托到InvocationHandler.invoke()方法。而通过JdkDynamicAopProxy的签名我们可以看到这个类其实也实现了InvocationHandler，下面我们就通过分析这个类中实现的invoke()方法来具体看下Spring AOP是如何织入切面的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> throwsThrowable </span>&#123;</span><br><span class="line">  MethodInvocation invocation = <span class="keyword">null</span>;</span><br><span class="line">  Object oldProxy = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">boolean</span> setProxyContext = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">  TargetSource targetSource = <span class="keyword">this</span>.advised.targetSource;</span><br><span class="line">  Class targetClass = <span class="keyword">null</span>;</span><br><span class="line">  Object target = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//eqauls()方法，具目标对象未实现此方法</span></span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.equalsDefined &amp;&amp; AopUtils.isEqualsMethod(method))&#123;</span><br><span class="line">            <span class="keyword">return</span> (equals(args[<span class="number">0</span>])? Boolean.TRUE : Boolean.FALSE);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//hashCode()方法，具目标对象未实现此方法</span></span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.hashCodeDefined &amp;&amp; AopUtils.isHashCodeMethod(method))&#123;</span><br><span class="line">            <span class="keyword">return</span> newInteger(hashCode());</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//Advised接口或者其父接口中定义的方法,直接反射调用,不应用通知</span></span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.advised.opaque &amp;&amp;method.getDeclaringClass().isInterface()</span><br><span class="line">                &amp;&amp;method.getDeclaringClass().isAssignableFrom(Advised.class)) &#123;</span><br><span class="line">            <span class="comment">// Service invocations onProxyConfig with the proxy config...</span></span><br><span class="line">            <span class="keyword">return</span> AopUtils.invokeJoinpointUsingReflection(<span class="keyword">this</span>.advised,method, args);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      Object retVal = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.advised.exposeProxy) &#123;</span><br><span class="line">            <span class="comment">// Make invocation available ifnecessary.</span></span><br><span class="line">            oldProxy = AopContext.setCurrentProxy(proxy);</span><br><span class="line">            setProxyContext = <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//获得目标对象的类</span></span><br><span class="line">      target = targetSource.getTarget();</span><br><span class="line">      <span class="keyword">if</span> (target != <span class="keyword">null</span>) &#123;</span><br><span class="line">            targetClass = target.getClass();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//获取可以应用到此方法上的Interceptor列表</span></span><br><span class="line">      List chain = <span class="keyword">this</span>.advised.getInterceptorsAndDynamicInterceptionAdvice(method,targetClass);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//如果没有可以应用到此方法的通知(Interceptor)，此直接反射调用 method.invoke(target, args)</span></span><br><span class="line">      <span class="keyword">if</span> (chain.isEmpty()) &#123;</span><br><span class="line">            retVal = AopUtils.invokeJoinpointUsingReflection(target,method, args);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//创建MethodInvocation</span></span><br><span class="line">            invocation = newReflectiveMethodInvocation(proxy, target, method, args, targetClass, chain);</span><br><span class="line">            retVal = invocation.proceed();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Massage return value if necessary.</span></span><br><span class="line">      <span class="keyword">if</span> (retVal != <span class="keyword">null</span> &amp;&amp; retVal == target &amp;&amp;method.getReturnType().isInstance(proxy)</span><br><span class="line">                &amp;&amp;!RawTargetAccess.class.isAssignableFrom(method.getDeclaringClass())) &#123;</span><br><span class="line">            <span class="comment">// Special case: it returned"this" and the return type of the method</span></span><br><span class="line">            <span class="comment">// is type-compatible. Notethat we can't help if the target sets</span></span><br><span class="line">            <span class="comment">// a reference to itself inanother returned object.</span></span><br><span class="line">            retVal = proxy;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> retVal;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (target != <span class="keyword">null</span> &amp;&amp; !targetSource.isStatic()) &#123;</span><br><span class="line">            <span class="comment">// Must have come fromTargetSource.</span></span><br><span class="line">          targetSource.releaseTarget(target);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (setProxyContext) &#123;</span><br><span class="line">            <span class="comment">// Restore old proxy.</span></span><br><span class="line">            AopContext.setCurrentProxy(oldProxy);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>主流程可以简述为：获取可以应用到此方法上的通知链（Interceptor Chain）,如果有,则应用通知,并执行joinpoint; 如果没有,则直接反射执行joinpoint。而这里的关键是通知链是如何获取的以及它又是如何执行的，下面逐一分析下。</p><p>首先，从上面的代码可以看到，通知链是通过Advised.getInterceptorsAndDynamicInterceptionAdvice()这个方法来获取的,我们来看下这个方法的实现:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Object&gt;getInterceptorsAndDynamicInterceptionAdvice(Method method, Class targetClass) &#123;</span><br><span class="line">  MethodCacheKeycacheKey = <span class="keyword">new</span> MethodCacheKey(method);</span><br><span class="line">  List&lt;Object&gt;cached = <span class="keyword">this</span>.methodCache.get(cacheKey);</span><br><span class="line">  <span class="keyword">if</span>(cached == <span class="keyword">null</span>) &#123;</span><br><span class="line">    cached= <span class="keyword">this</span>.advisorChainFactory.getInterceptorsAndDynamicInterceptionAdvice(<span class="keyword">this</span>, method, targetClass);</span><br><span class="line">    <span class="keyword">this</span>.methodCache.put(cacheKey,cached);</span><br><span class="line">  &#125;</span><br><span class="line">  returncached;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到实际的获取工作其实是由AdvisorChainFactory. getInterceptorsAndDynamicInterceptionAdvice()这个方法来完成的，获取到的结果会被缓存。</p><p>下面来分析下这个方法的实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 从提供的配置实例config中获取advisor列表,遍历处理这些advisor.如果是IntroductionAdvisor,</span></span><br><span class="line"><span class="comment">  * 则判断此Advisor能否应用到目标类targetClass上.如果是PointcutAdvisor,则判断</span></span><br><span class="line"><span class="comment">  * 此Advisor能否应用到目标方法method上.将满足条件的Advisor通过AdvisorAdaptor转化成Interceptor列表返回.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function">publicList <span class="title">getInterceptorsAndDynamicInterceptionAdvice</span><span class="params">(Advised config, Methodmethod, Class targetClass)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// This is somewhat tricky... we have to process introductions first,</span></span><br><span class="line">  <span class="comment">// but we need to preserve order in the ultimate list.</span></span><br><span class="line">  List interceptorList = <span class="keyword">new</span> ArrayList(config.getAdvisors().length);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//查看是否包含IntroductionAdvisor</span></span><br><span class="line">  <span class="keyword">boolean</span> hasIntroductions = hasMatchingIntroductions(config,targetClass);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//这里实际上注册一系列AdvisorAdapter,用于将Advisor转化成MethodInterceptor</span></span><br><span class="line">  AdvisorAdapterRegistry registry = GlobalAdvisorAdapterRegistry.getInstance();</span><br><span class="line"></span><br><span class="line">  Advisor[] advisors = config.getAdvisors();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;advisors.length; i++) &#123;</span><br><span class="line">      Advisor advisor = advisors[i];</span><br><span class="line">      <span class="keyword">if</span> (advisor <span class="keyword">instanceof</span> PointcutAdvisor) &#123;</span><br><span class="line">          <span class="comment">// Add it conditionally.</span></span><br><span class="line">          PointcutAdvisor pointcutAdvisor= (PointcutAdvisor) advisor;</span><br><span class="line">          <span class="keyword">if</span>(config.isPreFiltered() ||pointcutAdvisor.getPointcut().getClassFilter().matches(targetClass)) &#123;</span><br><span class="line">              <span class="comment">//<span class="doctag">TODO:</span> 这个地方这两个方法的位置可以互换下</span></span><br><span class="line">              <span class="comment">//将Advisor转化成Interceptor</span></span><br><span class="line">              MethodInterceptor[]interceptors = registry.getInterceptors(advisor);</span><br><span class="line"></span><br><span class="line">              <span class="comment">//检查当前advisor的pointcut是否可以匹配当前方法</span></span><br><span class="line">              MethodMatcher mm =pointcutAdvisor.getPointcut().getMethodMatcher();</span><br><span class="line"></span><br><span class="line">              <span class="keyword">if</span> (MethodMatchers.matches(mm,method, targetClass, hasIntroductions)) &#123;</span><br><span class="line">                  <span class="keyword">if</span>(mm.isRuntime()) &#123;</span><br><span class="line">                      <span class="comment">// Creating a newobject instance in the getInterceptors() method</span></span><br><span class="line">                      <span class="comment">// isn't a problemas we normally cache created chains.</span></span><br><span class="line">                      <span class="keyword">for</span> (intj = <span class="number">0</span>; j &lt; interceptors.length; j++) &#123;</span><br><span class="line">                          interceptorList.add(<span class="keyword">new</span> InterceptorAndDynamicMethodMatcher(interceptors[j],mm));</span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                      interceptorList.addAll(Arrays.asList(interceptors));</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (advisor <span class="keyword">instanceof</span> IntroductionAdvisor)&#123;</span><br><span class="line">          IntroductionAdvisor ia =(IntroductionAdvisor) advisor;</span><br><span class="line">          <span class="keyword">if</span>(config.isPreFiltered() || ia.getClassFilter().matches(targetClass)) &#123;</span><br><span class="line">              Interceptor[] interceptors= registry.getInterceptors(advisor);</span><br><span class="line">              interceptorList.addAll(Arrays.asList(interceptors));</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          Interceptor[] interceptors =registry.getInterceptors(advisor);</span><br><span class="line">          interceptorList.addAll(Arrays.asList(interceptors));</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> interceptorList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个方法执行完成后，Advised中配置能够应用到连接点或者目标类的Advisor全部被转化成了MethodInterceptor.<br>接下来我们再看下得到的拦截器链是怎么起作用的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (chain.isEmpty()) &#123;</span><br><span class="line">    retVal = AopUtils.invokeJoinpointUsingReflection(target,method, args);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//创建MethodInvocation</span></span><br><span class="line">    invocation = newReflectiveMethodInvocation(proxy, target, method, args, targetClass, chain);</span><br><span class="line">    retVal = invocation.proceed();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从这段代码可以看出，如果得到的拦截器链为空，则直接反射调用目标方法，否则创建MethodInvocation，调用其proceed方法，触发拦截器链的执行，来看下具体代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">proceed</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">  <span class="comment">//  We start with an index of -1and increment early.</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.currentInterceptorIndex == <span class="keyword">this</span>.interceptorsAndDynamicMethodMatchers.size()- <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="comment">//如果Interceptor执行完了，则执行joinPoint</span></span><br><span class="line">      <span class="keyword">return</span> invokeJoinpoint();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Object interceptorOrInterceptionAdvice =</span><br><span class="line">      <span class="keyword">this</span>.interceptorsAndDynamicMethodMatchers.get(++<span class="keyword">this</span>.currentInterceptorIndex);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//如果要动态匹配joinPoint</span></span><br><span class="line">  <span class="keyword">if</span> (interceptorOrInterceptionAdvice <span class="keyword">instanceof</span> InterceptorAndDynamicMethodMatcher)</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="comment">// Evaluate dynamic method matcher here: static part will already have</span></span><br><span class="line">      <span class="comment">// been evaluated and found to match.</span></span><br><span class="line">      InterceptorAndDynamicMethodMatcher dm =</span><br><span class="line">          (InterceptorAndDynamicMethodMatcher)interceptorOrInterceptionAdvice;</span><br><span class="line">      <span class="comment">//动态匹配：运行时参数是否满足匹配条件</span></span><br><span class="line">      <span class="keyword">if</span> (dm.methodMatcher.matches(<span class="keyword">this</span>.method, <span class="keyword">this</span>.targetClass,<span class="keyword">this</span>.arguments)) &#123;</span><br><span class="line">          <span class="comment">//执行当前Intercetpor</span></span><br><span class="line">          returndm.interceptor.invoke(<span class="keyword">this</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">//动态匹配失败时,略过当前Intercetpor,调用下一个Interceptor</span></span><br><span class="line">          <span class="keyword">return</span> proceed();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">      <span class="comment">// It's an interceptor, so we just invoke it: The pointcutwill have</span></span><br><span class="line">      <span class="comment">// been evaluated statically before this object was constructed.</span></span><br><span class="line">      <span class="comment">//执行当前Intercetpor</span></span><br><span class="line">      <span class="keyword">return</span> ((MethodInterceptor) interceptorOrInterceptionAdvice).invoke(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
